///*************************************************************
//** Class generated by CodeTrigger, Version 6.1.0.7
//** This class was generated on 2.12.2018 01:22:24
//** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
//**************************************************************/
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Net;
//using System.Net.Http;
//using System.Web.Http;
//using System.Web.Http.Description;
//using System.Threading.Tasks;
//using Northwind.Mvc.SampleViewModels;
//using Northwind.Business;
//using Northwind.Business.Interfaces;
//using Northwind.Business.Repository;
//using Northwind.Business.Repository.Interfaces;

//namespace Northwind.Mvc.SampleApiControllers
//{
//	public partial class İdentityuserprofileController : ApiController
//	{
//		protected IIdentityuserprofileRepository _iİdentityuserprofileRepository;

//            // GET: api/İdentityuserprofile
//        public async Task<IHttpActionResult> Getİdentityuserprofile(int page = 0, int pageSize = 5)
//        {
//            int totalCount = 0;

//            IList<İdentityuserprofileVm> listVm = new List<İdentityuserprofileVm>();
//            var result = Task.Factory.StartNew(() => {

//                ICriteria criteria = new Criteria<BOIdentityuserprofile>(İdentityuserprofileRepository);
//                totalCount = criteria.Count();

//                IList<BOIdentityuserprofile> listBOs = criteria
//                    .Add(new OrderBy("UserId", OrderBy.OrderDirection.Ascending))
//                    .Skip(page * pageSize)
//                    .Take(pageSize)
//                    .List<BOIdentityuserprofile>();

//                foreach (var bo in listBOs)
//                    listVm.Add(new İdentityuserprofileVm(bo));
//                return listVm;
//            });
//            await result;

//            return Ok(new { Data = result.Result, Paging = new { Total = totalCount, Limit = pageSize, CurrentPage = page, PageCount = (int) Math.Ceiling((double)totalCount / pageSize) } });
//        }

//        // GET: api/İdentityuserprofile/5
//        [ResponseType(typeof(İdentityuserprofileVm))]
//        public async Task<IHttpActionResult> Getİdentityuserprofile(string id)
//        {
//            var result = Task.Factory.StartNew(() => {

//                BOIdentityuserprofile bo = new Criteria<BOIdentityuserprofile>(İdentityuserprofileRepository)
//                .Add(Expression.Eq("UserId", id))
//                .SingleOrDefault<BOIdentityuserprofile>();
//                return bo == null ? null : new İdentityuserprofileVm(bo);

//            });
//            await result;
//            if (result.Result == null)
//            {
//                return NotFound();
//            }

//            return Ok(result.Result);
//        }

//        // PUT: api/İdentityuserprofile/5
//        [ResponseType(typeof(void))]
//        public async Task<IHttpActionResult> Putİdentityuserprofile(string id, İdentityuserprofileVm vm)
//        {
//            if (!ModelState.IsValid)
//            {
//                return BadRequest(ModelState);
//            }

//            if (id != vm.UserId)
//            {
//                return BadRequest();
//            }

//            var result = Task.Factory.StartNew(() => {

//                IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { İdentityuserprofileRepository }); 
//                var bo = (BOIdentityuserprofile)vm.BOİdentityuserprofile(İdentityuserprofileRepository);
//                uow.Update(bo);

//                string err;
//                if (!uow.Commit(out err))
//                {
//                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
//                    throw new HttpResponseException(resp);
//                }
//                return true;
//            });
//            await result;
//            if (!result.Result)
//                return NotFound();

//            return StatusCode(HttpStatusCode.NoContent);
//        }

//        // POST: api/İdentityuserprofile
//        [ResponseType(typeof(İdentityuserprofileVm))]
//        public async Task<IHttpActionResult> Postİdentityuserprofile(İdentityuserprofileVm vm)
//        {
//            if (!ModelState.IsValid)
//            {
//                return BadRequest(ModelState);
//            }

//            var result = Task.Factory.StartNew(() =>
//            {
//                IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { İdentityuserprofileRepository }); 
//                var bo = (BOIdentityuserprofile)vm.BOİdentityuserprofile(İdentityuserprofileRepository);
//                uow.Create(bo);

//                string err;
//                if (!uow.Commit(out err))
//                {
//                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
//                    throw new HttpResponseException(resp);
//                }
//                vm = new İdentityuserprofileVm(bo);
//                return true;
//            });
//            await result;
//            return CreatedAtRoute("DefaultApi", new { id = vm.UserId }, vm);
//        }

//        // DELETE: api/İdentityuserprofile/5
//        [ResponseType(typeof(İdentityuserprofileVm))]
//        public async Task<IHttpActionResult> Deleteİdentityuserprofile(string id)
//        {
//            var result = Task.Factory.StartNew(() =>
//            {
//                 IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { İdentityuserprofileRepository }); 
//                var bo = new BOIdentityuserprofile();
//                bo.Repository = İdentityuserprofileRepository;
//                bo.Init(id);
                
//                uow.Delete(bo);

//                string err;
//                if (!uow.Commit(out err))
//                {
//                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
//                    throw new HttpResponseException(resp);
//                }
//                return true;
//            });
//            await result;
//            if (!result.Result)
//                return NotFound();

//            return Ok(result.Result);
//        }

        
//        public IIdentityuserprofileRepository İdentityuserprofileRepository
//        {
//            get { return _iİdentityuserprofileRepository ?? (_iİdentityuserprofileRepository = RF.New().İdentityuserprofileRepository); }
//            set { _iİdentityuserprofileRepository = value; }
//        }
        

//        protected override void Dispose(bool disposing)
//        {
//            if (disposing)
//            {
//            }
//            base.Dispose(disposing);
//        }
//	}
//}
