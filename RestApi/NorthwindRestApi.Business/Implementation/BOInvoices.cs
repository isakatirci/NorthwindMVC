/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOInvoices.
	///</Summary>
	public partial class BOInvoices : zNorthwindRestApiConn_BaseBusiness, IBOInvoices, IQueryableCollection
	{
		#region member variables
		protected string _shipName;
		protected string _shipAddress;
		protected string _shipCity;
		protected string _shipRegion;
		protected string _shipPostalCode;
		protected string _shipCountry;
		protected string _customerID;
		protected string _customerName;
		protected string _address;
		protected string _city;
		protected string _region;
		protected string _postalCode;
		protected string _country;
		protected string _salesperson;
		protected Int32? _orderID;
		protected DateTime? _orderDate;
		protected DateTime? _requiredDate;
		protected DateTime? _shippedDate;
		protected string _shipperName;
		protected Int32? _productID;
		protected string _productName;
		protected decimal? _unitPrice;
		protected Int16? _quantity;
		protected float? _discount;
		protected decimal? _extendedPrice;
		protected decimal? _freight;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IInvoicesRepository _iInvoicesRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOInvoices()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOInvoices
		///</parameters>
		protected internal BOInvoices(IDAOInvoices daoInvoices)
		{
			try
			{
				_shipName = daoInvoices.ShipName;
				_shipAddress = daoInvoices.ShipAddress;
				_shipCity = daoInvoices.ShipCity;
				_shipRegion = daoInvoices.ShipRegion;
				_shipPostalCode = daoInvoices.ShipPostalCode;
				_shipCountry = daoInvoices.ShipCountry;
				_customerID = daoInvoices.CustomerID;
				_customerName = daoInvoices.CustomerName;
				_address = daoInvoices.Address;
				_city = daoInvoices.City;
				_region = daoInvoices.Region;
				_postalCode = daoInvoices.PostalCode;
				_country = daoInvoices.Country;
				_salesperson = daoInvoices.Salesperson;
				_orderID = daoInvoices.OrderID;
				_orderDate = daoInvoices.OrderDate;
				_requiredDate = daoInvoices.RequiredDate;
				_shippedDate = daoInvoices.ShippedDate;
				_shipperName = daoInvoices.ShipperName;
				_productID = daoInvoices.ProductID;
				_productName = daoInvoices.ProductName;
				_unitPrice = daoInvoices.UnitPrice;
				_quantity = daoInvoices.Quantity;
				_discount = daoInvoices.Discount;
				_extendedPrice = daoInvoices.ExtendedPrice;
				_freight = daoInvoices.Freight;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///InvoicesCollection
		///This method returns the collection of BOInvoices objects
		///</Summary>
		///<returns>
		///IList[IBOInvoices]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOInvoices> InvoicesCollection(IInvoicesRepository iInvoicesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOInvoices> boInvoicesCollection = new List<IBOInvoices>();
				IList<IDAOInvoices> daoInvoicesCollection = iInvoicesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOInvoices daoInvoices in daoInvoicesCollection)
					boInvoicesCollection.Add(new BOInvoices(daoInvoices));
				
				return boInvoicesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///InvoicesCollectionCount
		///This method returns the collection count of BOInvoices objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 InvoicesCollectionCount(IInvoicesRepository iInvoicesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iInvoicesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///InvoicesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOInvoices>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iInvoicesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boInvoicesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOInvoices> daoInvoicesCollection = _iInvoicesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOInvoices resdaoInvoices in daoInvoicesCollection)
					boInvoicesCollection.Add((T)(object)new BOInvoices(resdaoInvoices));
				
				return boInvoicesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOInvoices objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOInvoices> boInvoicesCollection = new List<IBOInvoices>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iInvoicesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInvoicesRepository InvoicesRepository
		{
			set
			{
				_iInvoicesRepository = value;
			}
		}
		
		public virtual string ShipName
		{
			get
			{
				 return _shipName;
			}
			set
			{
				_shipName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipAddress
		{
			get
			{
				 return _shipAddress;
			}
			set
			{
				_shipAddress = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipCity
		{
			get
			{
				 return _shipCity;
			}
			set
			{
				_shipCity = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipRegion
		{
			get
			{
				 return _shipRegion;
			}
			set
			{
				_shipRegion = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipPostalCode
		{
			get
			{
				 return _shipPostalCode;
			}
			set
			{
				_shipPostalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipCountry
		{
			get
			{
				 return _shipCountry;
			}
			set
			{
				_shipCountry = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerID
		{
			get
			{
				 return _customerID;
			}
			set
			{
				_customerID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerName
		{
			get
			{
				 return _customerName;
			}
			set
			{
				_customerName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string Region
		{
			get
			{
				 return _region;
			}
			set
			{
				_region = value;
				_isDirty = true;
			}
		}
		
		public virtual string PostalCode
		{
			get
			{
				 return _postalCode;
			}
			set
			{
				_postalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Country
		{
			get
			{
				 return _country;
			}
			set
			{
				_country = value;
				_isDirty = true;
			}
		}
		
		public virtual string Salesperson
		{
			get
			{
				 return _salesperson;
			}
			set
			{
				_salesperson = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OrderID
		{
			get
			{
				 return _orderID;
			}
			set
			{
				_orderID = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? OrderDate
		{
			get
			{
				 return _orderDate;
			}
			set
			{
				_orderDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? RequiredDate
		{
			get
			{
				 return _requiredDate;
			}
			set
			{
				_requiredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ShippedDate
		{
			get
			{
				 return _shippedDate;
			}
			set
			{
				_shippedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipperName
		{
			get
			{
				 return _shipperName;
			}
			set
			{
				_shipperName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ProductID
		{
			get
			{
				 return _productID;
			}
			set
			{
				_productID = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductName
		{
			get
			{
				 return _productName;
			}
			set
			{
				_productName = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? UnitPrice
		{
			get
			{
				 return _unitPrice;
			}
			set
			{
				_unitPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual float? Discount
		{
			get
			{
				 return _discount;
			}
			set
			{
				_discount = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ExtendedPrice
		{
			get
			{
				 return _extendedPrice;
			}
			set
			{
				_extendedPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Freight
		{
			get
			{
				 return _freight;
			}
			set
			{
				_freight = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iInvoicesRepository;	}
			set {	InvoicesRepository = (IInvoicesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
