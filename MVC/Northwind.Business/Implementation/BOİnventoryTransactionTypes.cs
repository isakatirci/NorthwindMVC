/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOİnventoryTransactionTypes.
	///It maintains a collection of BOİnventoryTransactions objects.
	///</Summary>
	public partial class BOInventoryTransactionTypes : zNorthwindConn_BaseBusiness, IBOİnventoryTransactionTypes, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _typeName;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOİnventoryTransactions> _boİnventoryTransactionsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IInventoryTransactionTypesRepository _iİnventoryTransactionTypesRepository;
		protected IInventoryTransactionsRepository _iİnventoryTransactionsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOInventoryTransactionTypes()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOİnventoryTransactionTypes daoİnventoryTransactionTypes = _iİnventoryTransactionTypesRepository.SelectOne(id);
				_id = daoİnventoryTransactionTypes.İd;
				_typeName = daoİnventoryTransactionTypes.TypeName;
				_ctrVersion = daoİnventoryTransactionTypes.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOİnventoryTransactionTypes
		///</parameters>
		protected internal BOInventoryTransactionTypes(IDAOİnventoryTransactionTypes daoİnventoryTransactionTypes)
		{
			try
			{
				_id = daoİnventoryTransactionTypes.İd;
				_typeName = daoİnventoryTransactionTypes.TypeName;
				_ctrVersion = daoİnventoryTransactionTypes.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new İnventoryTransactionTypes record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOİnventoryTransactionTypes daoİnventoryTransactionTypes = _iİnventoryTransactionTypesRepository.New();
			RegisterDataObject( _iİnventoryTransactionTypesRepository, _iİnventoryTransactionTypesRepository.BaseData(daoİnventoryTransactionTypes));
			BeginTransaction( _iİnventoryTransactionTypesRepository, "savenewBOİnventoryTransactio6398");
			try
			{
				daoİnventoryTransactionTypes.İd = _id;
				daoİnventoryTransactionTypes.TypeName = _typeName;
				_iİnventoryTransactionTypesRepository.Insert(daoİnventoryTransactionTypes);
				CommitTransaction( _iİnventoryTransactionTypesRepository);
				Done(this);
				
				_id = daoİnventoryTransactionTypes.İd;
				_typeName = daoİnventoryTransactionTypes.TypeName;
				_ctrVersion = daoİnventoryTransactionTypes.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionTypesRepository, "savenewBOİnventoryTransactio6398");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one İnventoryTransactionTypes record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOİnventoryTransactionTypes
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOİnventoryTransactionTypes daoİnventoryTransactionTypes = _iİnventoryTransactionTypesRepository.New();
			RegisterDataObject(_iİnventoryTransactionTypesRepository, _iİnventoryTransactionTypesRepository.BaseData(daoİnventoryTransactionTypes));
			BeginTransaction(_iİnventoryTransactionTypesRepository, "updateBOİnventoryTransaction1623");
			try
			{
				daoİnventoryTransactionTypes.İd = _id;
				daoİnventoryTransactionTypes.TypeName = _typeName;
				daoİnventoryTransactionTypes.CtrVersion = _ctrVersion;
				_iİnventoryTransactionTypesRepository.Update(daoİnventoryTransactionTypes);
				CommitTransaction(_iİnventoryTransactionTypesRepository);
				Done(this);
				
				_id = daoİnventoryTransactionTypes.İd;
				_typeName = daoİnventoryTransactionTypes.TypeName;
				_ctrVersion = daoİnventoryTransactionTypes.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionTypesRepository, "updateBOİnventoryTransaction1623");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one İnventoryTransactionTypes record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOİnventoryTransactionTypes daoİnventoryTransactionTypes = _iİnventoryTransactionTypesRepository.New();
			RegisterDataObject(_iİnventoryTransactionTypesRepository, _iİnventoryTransactionTypesRepository.BaseData(daoİnventoryTransactionTypes));
			BeginTransaction(_iİnventoryTransactionTypesRepository, "deleteBOİnventoryTransaction1623");
			try
			{
				daoİnventoryTransactionTypes.İd = _id;
				_iİnventoryTransactionTypesRepository.Delete(daoİnventoryTransactionTypes);
				CommitTransaction(_iİnventoryTransactionTypesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionTypesRepository, "deleteBOİnventoryTransaction1623");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///İnventoryTransactionTypesCollection
		///This method returns the collection of BOİnventoryTransactionTypes objects
		///</Summary>
		///<returns>
		///IList[IBOİnventoryTransactionTypes]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOİnventoryTransactionTypes> İnventoryTransactionTypesCollection(IInventoryTransactionTypesRepository iİnventoryTransactionTypesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOİnventoryTransactionTypes> boİnventoryTransactionTypesCollection = new List<IBOİnventoryTransactionTypes>();
				IList<IDAOİnventoryTransactionTypes> daoİnventoryTransactionTypesCollection = iİnventoryTransactionTypesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOİnventoryTransactionTypes daoİnventoryTransactionTypes in daoİnventoryTransactionTypesCollection)
					boİnventoryTransactionTypesCollection.Add(new BOInventoryTransactionTypes(daoİnventoryTransactionTypes));
				
				return boİnventoryTransactionTypesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///İnventoryTransactionTypesCollectionCount
		///This method returns the collection count of BOİnventoryTransactionTypes objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 İnventoryTransactionTypesCollectionCount(IInventoryTransactionTypesRepository iİnventoryTransactionTypesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iİnventoryTransactionTypesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///İnventoryTransactionTypesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOİnventoryTransactionTypes>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iİnventoryTransactionTypesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boİnventoryTransactionTypesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOİnventoryTransactionTypes> daoİnventoryTransactionTypesCollection = _iİnventoryTransactionTypesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOİnventoryTransactionTypes resdaoİnventoryTransactionTypes in daoİnventoryTransactionTypesCollection)
					boİnventoryTransactionTypesCollection.Add((T)(object)new BOInventoryTransactionTypes(resdaoİnventoryTransactionTypes));
				
				return boİnventoryTransactionTypesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOİnventoryTransactionTypes objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOİnventoryTransactionTypes> boİnventoryTransactionTypesCollection = new List<IBOİnventoryTransactionTypes>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iİnventoryTransactionTypesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///İnventoryTransactionsCollection
		///This method returns its collection of BOİnventoryTransactions objects
		///</Summary>
		///<returns>
		///IList[IBOİnventoryTransactions]
		///</returns>
		///<parameters>
		///BOİnventoryTransactionTypes
		///</parameters>
		public virtual IList<IBOİnventoryTransactions> İnventoryTransactionsCollection()
		{
			Doing(this);
			try
			{
				if(_boİnventoryTransactionsCollection == null)
					LoadİnventoryTransactionsCollection();
				return _boİnventoryTransactionsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadİnventoryTransactionsCollection
		///This method loads the internal collection of BOİnventoryTransactions objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadİnventoryTransactionsCollection()
		{
			Doing(this);
			try
			{
				_boİnventoryTransactionsCollection = new List<IBOİnventoryTransactions>();
				IList<IDAOİnventoryTransactions> daoİnventoryTransactionsCollection = _iİnventoryTransactionsRepository.SelectAllByTransactionType(_id);
				Done(this);
				
				foreach(IDAOİnventoryTransactions daoİnventoryTransactions in daoİnventoryTransactionsCollection)
					_boİnventoryTransactionsCollection.Add(new BOInventoryTransactions(daoİnventoryTransactions));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddİnventoryTransactions
		///This method persists a BOİnventoryTransactions object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOİnventoryTransactions
		///</parameters>
		public virtual void AddİnventoryTransactions(IBOİnventoryTransactions boİnventoryTransactions)
		{
			Doing(this);
			IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.New();
			RegisterDataObject(_iİnventoryTransactionsRepository, _iİnventoryTransactionsRepository.BaseData(daoİnventoryTransactions));
			BeginTransaction(_iİnventoryTransactionsRepository, "addİnventoryTransactions");
			try
			{
				daoİnventoryTransactions.İd = boİnventoryTransactions.İd;
				daoİnventoryTransactions.TransactionCreatedDate = boİnventoryTransactions.TransactionCreatedDate;
				daoİnventoryTransactions.TransactionModifiedDate = boİnventoryTransactions.TransactionModifiedDate;
				daoİnventoryTransactions.Productİd = boİnventoryTransactions.Productİd;
				daoİnventoryTransactions.Quantity = boİnventoryTransactions.Quantity;
				daoİnventoryTransactions.PurchaseOrderİd = boİnventoryTransactions.PurchaseOrderİd;
				daoİnventoryTransactions.CustomerOrderİd = boİnventoryTransactions.CustomerOrderİd;
				daoİnventoryTransactions.Comments = boİnventoryTransactions.Comments;
				daoİnventoryTransactions.TransactionType = _id;
				_iİnventoryTransactionsRepository.Insert(daoİnventoryTransactions);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boİnventoryTransactions = new BOInventoryTransactions(daoİnventoryTransactions);
				if(_boİnventoryTransactionsCollection != null)
					_boİnventoryTransactionsCollection.Add(boİnventoryTransactions);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "addİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllİnventoryTransactions
		///This method deletes all BOİnventoryTransactions objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllİnventoryTransactions()
		{
			Doing(this);
			RegisterDataObject(_iİnventoryTransactionsRepository, null);
			BeginTransaction(_iİnventoryTransactionsRepository, "deleteAllİnventoryTransactions");
			try
			{
				_iİnventoryTransactionsRepository.DeleteAllByTransactionType(_id);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				if(_boİnventoryTransactionsCollection != null)
				{
					_boİnventoryTransactionsCollection.Clear();
					_boİnventoryTransactionsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "deleteAllİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInventoryTransactionTypesRepository İnventoryTransactionTypesRepository
		{
			set
			{
				_iİnventoryTransactionTypesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInventoryTransactionsRepository İnventoryTransactionsRepository
		{
			set
			{
				_iİnventoryTransactionsRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string TypeName
		{
			get
			{
				 return _typeName;
			}
			set
			{
				_typeName = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iİnventoryTransactionTypesRepository;	}
			set {	İnventoryTransactionTypesRepository = (IInventoryTransactionTypesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
