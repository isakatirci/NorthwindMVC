/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindTest3.DataObjects.Interfaces;

namespace NorthwindTest3.DataObjects
{
	public partial class DAOOrderDetails : zNorthwindTest3Conn_BaseData
	{
		#region member variables
		protected Int32? _orderID;
		protected Int32? _productID;
		protected decimal? _unitPrice;
		protected Int16? _quantity;
		protected float? _discount;
		#endregion

		#region class methods
		public DAOOrderDetails()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Order Details based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOOrderDetails
		///</returns>
		///<parameters>
		///Int32? orderID, Int32? productID
		///</parameters>
		public static DAOOrderDetails SelectOne(Int32? orderID, Int32? productID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Order Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOOrderDetails retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrderDetails();
					retObj._orderID					 = Convert.IsDBNull(dt.Rows[0]["OrderID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OrderID"];
					retObj._productID					 = Convert.IsDBNull(dt.Rows[0]["ProductID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ProductID"];
					retObj._unitPrice					 = Convert.IsDBNull(dt.Rows[0]["UnitPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["UnitPrice"];
					retObj._quantity					 = Convert.IsDBNull(dt.Rows[0]["Quantity"]) ? (Int16?)null : (Int16?)dt.Rows[0]["Quantity"];
					retObj._discount					 = Convert.IsDBNull(dt.Rows[0]["Discount"]) ? (float?)null : (float?)dt.Rows[0]["Discount"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Order Details based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_productID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Order Details based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOrderDetails.
		///</returns>
		///<parameters>
		///Int32? orderID
		///</parameters>
		public static IList<DAOOrderDetails> SelectAllByOrderID(Int32? orderID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectAllByOrderID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Order Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOrderDetails> objList = new List<DAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int16?)null : (Int16?)row["Quantity"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (float?)null : (float?)row["Discount"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? orderID
		///</parameters>
		public static Int32 SelectAllByOrderIDCount(Int32? orderID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectAllByOrderIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Order Details with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? orderID
		///</parameters>
		public static void DeleteAllByOrderID(zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? orderID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_DeleteAllByOrderID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Order Details based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOOrderDetails.
		///</returns>
		///<parameters>
		///Int32? productID
		///</parameters>
		public static IList<DAOOrderDetails> SelectAllByProductID(Int32? productID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectAllByProductID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Order Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOrderDetails> objList = new List<DAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int16?)null : (Int16?)row["Quantity"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (float?)null : (float?)row["Discount"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? productID
		///</parameters>
		public static Int32 SelectAllByProductIDCount(Int32? productID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectAllByProductIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Order Details with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? productID
		///</parameters>
		public static void DeleteAllByProductID(zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? productID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_DeleteAllByProductID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Order Details
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_productID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitPrice", SqlDbType.Money, 8, ParameterDirection.InputOutput, false, 19, 4, "", DataRowVersion.Proposed, (object)_unitPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discount", SqlDbType.Real, 4, ParameterDirection.InputOutput, false, 24, 0, "", DataRowVersion.Proposed, (object)_discount?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_orderID					 = Convert.IsDBNull(command.Parameters["@OrderID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OrderID"].Value;
				_productID					 = Convert.IsDBNull(command.Parameters["@ProductID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ProductID"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["@UnitPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@UnitPrice"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int16?)null : (Int16?)command.Parameters["@Quantity"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["@Discount"].Value) ? (float?)null : (float?)command.Parameters["@Discount"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Order Details
		///</Summary>
		///<returns>
		///IList-DAOOrderDetails.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOOrderDetails> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Order Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOrderDetails> objList = new List<DAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int16?)null : (Int16?)row["Quantity"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (float?)null : (float?)row["Discount"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOrder Details
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrderDetails_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Order Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "OrderID", true) == 0) lst.Add(Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"]);
						if (string.Compare(projection.Member, "ProductID", true) == 0) lst.Add(Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"]);
						if (string.Compare(projection.Member, "UnitPrice", true) == 0) lst.Add(Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"]);
						if (string.Compare(projection.Member, "Quantity", true) == 0) lst.Add(Convert.IsDBNull(row["Quantity"]) ? (Int16?)null : (Int16?)row["Quantity"]);
						if (string.Compare(projection.Member, "Discount", true) == 0) lst.Add(Convert.IsDBNull(row["Discount"]) ? (float?)null : (float?)row["Discount"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Order Details
		///</Summary>
		///<returns>
		///IList-DAOOrderDetails.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOOrderDetails> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrderDetails_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Order Details");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOOrderDetails> objList = new List<DAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._quantity					 = Convert.IsDBNull(row["Quantity"]) ? (Int16?)null : (Int16?)row["Quantity"];
						retObj._discount					 = Convert.IsDBNull(row["Discount"]) ? (float?)null : (float?)row["Discount"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Order Details
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrderDetails_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Order Details based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrderDetails_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_productID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitPrice", SqlDbType.Money, 8, ParameterDirection.InputOutput, false, 19, 4, "", DataRowVersion.Proposed, (object)_unitPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Quantity", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, false, 5, 0, "", DataRowVersion.Proposed, (object)_quantity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discount", SqlDbType.Real, 4, ParameterDirection.InputOutput, false, 24, 0, "", DataRowVersion.Proposed, (object)_discount?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_orderID					 = Convert.IsDBNull(command.Parameters["@OrderID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OrderID"].Value;
				_productID					 = Convert.IsDBNull(command.Parameters["@ProductID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ProductID"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["@UnitPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@UnitPrice"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["@Quantity"].Value) ? (Int16?)null : (Int16?)command.Parameters["@Quantity"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["@Discount"].Value) ? (float?)null : (float?)command.Parameters["@Discount"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? OrderID
		{
			get
			{
				return _orderID;
			}
			set
			{
				_orderID = value;
			}
		}

		public Int32? ProductID
		{
			get
			{
				return _productID;
			}
			set
			{
				_productID = value;
			}
		}

		public decimal? UnitPrice
		{
			get
			{
				return _unitPrice;
			}
			set
			{
				_unitPrice = value;
			}
		}

		public Int16? Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}

		public float? Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				_discount = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindTest3.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprOrderDetails_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[ProductID]
			,[UnitPrice]
			,[Quantity]
			,[Discount]
			FROM [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID
			AND [ProductID] = @ProductID
			";

		internal static string ctprOrderDetails_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID
			AND [ProductID] = @ProductID
			";

		internal static string ctprOrderDetails_SelectAllByOrderID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[ProductID]
			,[UnitPrice]
			,[Quantity]
			,[Discount]
			FROM [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID OR ([OrderID] IS NULL AND @OrderID IS NULL)
			";

		internal static string ctprOrderDetails_SelectAllByOrderIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID OR ([OrderID] IS NULL AND @OrderID IS NULL)
			";

		internal static string ctprOrderDetails_DeleteAllByOrderID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID OR ([OrderID] IS NULL AND @OrderID IS NULL)
			";

		internal static string ctprOrderDetails_SelectAllByProductID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[ProductID]
			,[UnitPrice]
			,[Quantity]
			,[Discount]
			FROM [dbo].[Order Details]
			WHERE 
			[ProductID] = @ProductID OR ([ProductID] IS NULL AND @ProductID IS NULL)
			";

		internal static string ctprOrderDetails_SelectAllByProductIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Order Details]
			WHERE 
			[ProductID] = @ProductID OR ([ProductID] IS NULL AND @ProductID IS NULL)
			";

		internal static string ctprOrderDetails_DeleteAllByProductID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Order Details]
			WHERE 
			[ProductID] = @ProductID OR ([ProductID] IS NULL AND @ProductID IS NULL)
			";

		internal static string ctprOrderDetails_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Order Details]
			(
			[OrderID]
			,[ProductID]
			,[UnitPrice]
			,[Quantity]
			,[Discount]
			)
			VALUES
			(
			@OrderID
			,@ProductID
			,@UnitPrice
			,@Quantity
			,@Discount
			)
			SELECT 
			@OrderID = [OrderID]
			,@ProductID = [ProductID]
			,@UnitPrice = [UnitPrice]
			,@Quantity = [Quantity]
			,@Discount = [Discount]
			FROM [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID
			AND [ProductID] = @ProductID
			";

		internal static string ctprOrderDetails_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[ProductID]
			,[UnitPrice]
			,[Quantity]
			,[Discount]
			FROM [dbo].[Order Details]
			";

		internal static string ctprOrderDetails_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Order Details]
			";

		internal static string ctprOrderDetails_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Order Details]
			##CRITERIA##
			";

		internal static string ctprOrderDetails_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[OrderID]
			,[ProductID]
			,[UnitPrice]
			,[Quantity]
			,[Discount]
			FROM [dbo].[Order Details]
			##CRITERIA##
			";

		internal static string ctprOrderDetails_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Order Details]
			##CRITERIA##
			";

		internal static string ctprOrderDetails_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Order Details]
			SET
			[UnitPrice] = @UnitPrice
			,[Quantity] = @Quantity
			,[Discount] = @Discount
			WHERE 
			[OrderID] = @OrderID
			AND [ProductID] = @ProductID
			SELECT 
			@OrderID = [OrderID]
			,@ProductID = [ProductID]
			,@UnitPrice = [UnitPrice]
			,@Quantity = [Quantity]
			,@Discount = [Discount]
			FROM [dbo].[Order Details]
			WHERE 
			[OrderID] = @OrderID
			AND [ProductID] = @ProductID
			";

	}
}
#endregion
