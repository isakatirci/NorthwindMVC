/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BORegion.
	///It maintains a collection of BOTerritories objects.
	///</Summary>
	public partial class BORegion : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _regionID;
		protected string _regionDescription;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOTerritories> _boTerritoriesCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BORegion()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 regionID
		///</parameters>
		public BORegion(Int32 regionID)
		{
			try
			{
				DAORegion daoRegion = DAORegion.SelectOne(regionID);
				_regionID = daoRegion.RegionID;
				_regionDescription = daoRegion.RegionDescription;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAORegion
		///</parameters>
		protected internal BORegion(DAORegion daoRegion)
		{
			try
			{
				_regionID = daoRegion.RegionID;
				_regionDescription = daoRegion.RegionDescription;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Region record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAORegion daoRegion = new DAORegion();
			RegisterDataObject(daoRegion);
			BeginTransaction("savenewBORegion");
			try
			{
				daoRegion.RegionID = _regionID;
				daoRegion.RegionDescription = _regionDescription;
				daoRegion.Insert();
				CommitTransaction();
				
				_regionID = daoRegion.RegionID;
				_regionDescription = daoRegion.RegionDescription;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBORegion");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Region record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORegion
		///</parameters>
		public virtual void Update()
		{
			DAORegion daoRegion = new DAORegion();
			RegisterDataObject(daoRegion);
			BeginTransaction("updateBORegion");
			try
			{
				daoRegion.RegionID = _regionID;
				daoRegion.RegionDescription = _regionDescription;
				daoRegion.Update();
				CommitTransaction();
				
				_regionID = daoRegion.RegionID;
				_regionDescription = daoRegion.RegionDescription;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBORegion");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Region record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAORegion daoRegion = new DAORegion();
			RegisterDataObject(daoRegion);
			BeginTransaction("deleteBORegion");
			try
			{
				daoRegion.RegionID = _regionID;
				daoRegion.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBORegion");
				throw;
			}
		}
		
		///<Summary>
		///RegionCollection
		///This method returns the collection of BORegion objects
		///</Summary>
		///<returns>
		///List[BORegion]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BORegion> RegionCollection()
		{
			try
			{
				IList<BORegion> boRegionCollection = new List<BORegion>();
				IList<DAORegion> daoRegionCollection = DAORegion.SelectAll();
			
				foreach(DAORegion daoRegion in daoRegionCollection)
					boRegionCollection.Add(new BORegion(daoRegion));
			
				return boRegionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RegionCollectionCount
		///This method returns the collection count of BORegion objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 RegionCollectionCount()
		{
			try
			{
				Int32 objCount = DAORegion.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///TerritoriesCollection
		///This method returns its collection of BOTerritories objects
		///</Summary>
		///<returns>
		///IList[BOTerritories]
		///</returns>
		///<parameters>
		///BORegion
		///</parameters>
		public virtual IList<BOTerritories> TerritoriesCollection()
		{
			try
			{
				if(_boTerritoriesCollection == null)
					LoadTerritoriesCollection();
				
				return _boTerritoriesCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BORegion>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAORegion.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RegionCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BORegion objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boRegionCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAORegion> daoRegionCollection = DAORegion.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAORegion resdaoRegion in daoRegionCollection)
					boRegionCollection.Add((T)(object)new BORegion(resdaoRegion));
			
				return boRegionCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///RegionCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BORegion objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAORegion.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadTerritoriesCollection
		///This method loads the internal collection of BOTerritories objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadTerritoriesCollection()
		{
			try
			{
				_boTerritoriesCollection = new List<BOTerritories>();
				IList<DAOTerritories> daoTerritoriesCollection = DAOTerritories.SelectAllByRegionID(_regionID.Value);
				
				foreach(DAOTerritories daoTerritories in daoTerritoriesCollection)
					_boTerritoriesCollection.Add(new BOTerritories(daoTerritories));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddTerritories
		///This method persists a BOTerritories object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTerritories
		///</parameters>
		public virtual void AddTerritories(BOTerritories boTerritories)
		{
			DAOTerritories daoTerritories = new DAOTerritories();
			RegisterDataObject(daoTerritories);
			BeginTransaction("addTerritories");
			try
			{
				daoTerritories.TerritoryID = boTerritories.TerritoryID;
				daoTerritories.TerritoryDescription = boTerritories.TerritoryDescription;
				daoTerritories.RegionID = _regionID.Value;
				daoTerritories.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boTerritories = new BOTerritories(daoTerritories);
				if(_boTerritoriesCollection != null)
					_boTerritoriesCollection.Add(boTerritories);
			}
			catch
			{
				RollbackTransaction("addTerritories");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllTerritories
		///This method deletes all BOTerritories objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllTerritories()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllTerritories");
			try
			{
				DAOTerritories.DeleteAllByRegionID(ConnectionProvider, _regionID.Value);
				CommitTransaction();
				if(_boTerritoriesCollection != null)
				{
					_boTerritoriesCollection.Clear();
					_boTerritoriesCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllTerritories");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? RegionID
		{
			get
			{
				 return _regionID;
			}
			set
			{
				_regionID = value;
				_isDirty = true;
			}
		}
		
		public virtual string RegionDescription
		{
			get
			{
				 return _regionDescription;
			}
			set
			{
				_regionDescription = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
