/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:24
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using System.Threading.Tasks;
using Northwind.Mvc.SampleViewModels;
using Northwind.Business;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Mvc.SampleApiControllers
{
	public partial class SalesReportsController : ApiController
	{
		protected ISalesReportsRepository _iSalesReportsRepository;

            // GET: api/SalesReports
        public async Task<IHttpActionResult> GetSalesReports(int page = 0, int pageSize = 5)
        {
            int totalCount = 0;

            IList<SalesReportsVm> listVm = new List<SalesReportsVm>();
            var result = Task.Factory.StartNew(() => {

                ICriteria criteria = new Criteria<BOSalesReports>(SalesReportsRepository);
                totalCount = criteria.Count();

                IList<BOSalesReports> listBOs = criteria
                    .Add(new OrderBy("group_by", OrderBy.OrderDirection.Ascending))
                    .Skip(page * pageSize)
                    .Take(pageSize)
                    .List<BOSalesReports>();

                foreach (var bo in listBOs)
                    listVm.Add(new SalesReportsVm(bo));
                return listVm;
            });
            await result;

            return Ok(new { Data = result.Result, Paging = new { Total = totalCount, Limit = pageSize, CurrentPage = page, PageCount = (int) Math.Ceiling((double)totalCount / pageSize) } });
        }

        // GET: api/SalesReports/5
        [ResponseType(typeof(SalesReportsVm))]
        public async Task<IHttpActionResult> GetSalesReports(string id)
        {
            var result = Task.Factory.StartNew(() => {

                BOSalesReports bo = new Criteria<BOSalesReports>(SalesReportsRepository)
                .Add(Expression.Eq("group_by", id))
                .SingleOrDefault<BOSalesReports>();
                return bo == null ? null : new SalesReportsVm(bo);

            });
            await result;
            if (result.Result == null)
            {
                return NotFound();
            }

            return Ok(result.Result);
        }

        // PUT: api/SalesReports/5
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> PutSalesReports(string id, SalesReportsVm vm)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != vm.GroupBy)
            {
                return BadRequest();
            }

            var result = Task.Factory.StartNew(() => {

                IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { SalesReportsRepository }); 
                var bo = (BOSalesReports)vm.BOSalesReports(SalesReportsRepository);
                uow.Update(bo);

                string err;
                if (!uow.Commit(out err))
                {
                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
                    throw new HttpResponseException(resp);
                }
                return true;
            });
            await result;
            if (!result.Result)
                return NotFound();

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST: api/SalesReports
        [ResponseType(typeof(SalesReportsVm))]
        public async Task<IHttpActionResult> PostSalesReports(SalesReportsVm vm)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = Task.Factory.StartNew(() =>
            {
                IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { SalesReportsRepository }); 
                var bo = (BOSalesReports)vm.BOSalesReports(SalesReportsRepository);
                uow.Create(bo);

                string err;
                if (!uow.Commit(out err))
                {
                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
                    throw new HttpResponseException(resp);
                }
                vm = new SalesReportsVm(bo);
                return true;
            });
            await result;
            return CreatedAtRoute("DefaultApi", new { id = vm.GroupBy }, vm);
        }

        // DELETE: api/SalesReports/5
        [ResponseType(typeof(SalesReportsVm))]
        public async Task<IHttpActionResult> DeleteSalesReports(string id)
        {
            var result = Task.Factory.StartNew(() =>
            {
                 IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { SalesReportsRepository }); 
                var bo = new BOSalesReports();
                bo.Repository = SalesReportsRepository;
                bo.Init(id);
                
                uow.Delete(bo);

                string err;
                if (!uow.Commit(out err))
                {
                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
                    throw new HttpResponseException(resp);
                }
                return true;
            });
            await result;
            if (!result.Result)
                return NotFound();

            return Ok(result.Result);
        }

        
        public ISalesReportsRepository SalesReportsRepository
        {
            get { return _iSalesReportsRepository ?? (_iSalesReportsRepository = RF.New().SalesReportsRepository); }
            set { _iSalesReportsRepository = value; }
        }
        

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
            }
            base.Dispose(disposing);
        }
	}
}
