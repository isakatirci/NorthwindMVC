/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOIdentityrole.
	///It maintains a collection of BOIdentityuserrole objects.
	///</Summary>
	public partial class BOIdentityrole : zNorthwindConn_BaseBusiness, IBOIdentityrole, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _ıd;
		protected string _name;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOIdentityuserrole> _boIdentityuserroleCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IIdentityroleRepository _iIdentityroleRepository;
		protected IIdentityuserroleRepository _iIdentityuserroleRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOIdentityrole()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string ıd
		///</parameters>
		public void Init(string ıd)
		{
			try
			{
				IDAOIdentityrole daoIdentityrole = _iIdentityroleRepository.SelectOne(ıd);
				_ıd = daoIdentityrole.Id;
				_name = daoIdentityrole.Name;
				_ctrVersion = daoIdentityrole.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOIdentityrole
		///</parameters>
		protected internal BOIdentityrole(IDAOIdentityrole daoIdentityrole)
		{
			try
			{
				_ıd = daoIdentityrole.Id;
				_name = daoIdentityrole.Name;
				_ctrVersion = daoIdentityrole.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Identityrole record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOIdentityrole daoIdentityrole = _iIdentityroleRepository.New();
			RegisterDataObject( _iIdentityroleRepository, _iIdentityroleRepository.BaseData(daoIdentityrole));
			BeginTransaction( _iIdentityroleRepository, "savenewBOIdentityrole");
			try
			{
				daoIdentityrole.Name = _name;
				_iIdentityroleRepository.Insert(daoIdentityrole);
				CommitTransaction( _iIdentityroleRepository);
				Done(this);
				
				_ıd = daoIdentityrole.Id;
				_name = daoIdentityrole.Name;
				_ctrVersion = daoIdentityrole.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityroleRepository, "savenewBOIdentityrole");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Identityrole record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIdentityrole
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOIdentityrole daoIdentityrole = _iIdentityroleRepository.New();
			RegisterDataObject(_iIdentityroleRepository, _iIdentityroleRepository.BaseData(daoIdentityrole));
			BeginTransaction(_iIdentityroleRepository, "updateBOIdentityrole");
			try
			{
				daoIdentityrole.Id = _ıd;
				daoIdentityrole.Name = _name;
				daoIdentityrole.CtrVersion = _ctrVersion;
				_iIdentityroleRepository.Update(daoIdentityrole);
				CommitTransaction(_iIdentityroleRepository);
				Done(this);
				
				_ıd = daoIdentityrole.Id;
				_name = daoIdentityrole.Name;
				_ctrVersion = daoIdentityrole.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityroleRepository, "updateBOIdentityrole");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Identityrole record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOIdentityrole daoIdentityrole = _iIdentityroleRepository.New();
			RegisterDataObject(_iIdentityroleRepository, _iIdentityroleRepository.BaseData(daoIdentityrole));
			BeginTransaction(_iIdentityroleRepository, "deleteBOIdentityrole");
			try
			{
				daoIdentityrole.Id = _ıd;
				_iIdentityroleRepository.Delete(daoIdentityrole);
				CommitTransaction(_iIdentityroleRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityroleRepository, "deleteBOIdentityrole");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///IdentityroleCollection
		///This method returns the collection of BOIdentityrole objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityrole]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOIdentityrole> IdentityroleCollection(IIdentityroleRepository iIdentityroleRepository)
		{
			Doing(null);
			try
			{
				IList<IBOIdentityrole> boIdentityroleCollection = new List<IBOIdentityrole>();
				IList<IDAOIdentityrole> daoIdentityroleCollection = iIdentityroleRepository.SelectAll();
				Done(null);
				
				foreach(IDAOIdentityrole daoIdentityrole in daoIdentityroleCollection)
					boIdentityroleCollection.Add(new BOIdentityrole(daoIdentityrole));
				
				return boIdentityroleCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///IdentityroleCollectionCount
		///This method returns the collection count of BOIdentityrole objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 IdentityroleCollectionCount(IIdentityroleRepository iIdentityroleRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iIdentityroleRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///IdentityroleCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOIdentityrole>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iIdentityroleRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boIdentityroleCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOIdentityrole> daoIdentityroleCollection = _iIdentityroleRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOIdentityrole resdaoIdentityrole in daoIdentityroleCollection)
					boIdentityroleCollection.Add((T)(object)new BOIdentityrole(resdaoIdentityrole));
				
				return boIdentityroleCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOIdentityrole objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOIdentityrole> boIdentityroleCollection = new List<IBOIdentityrole>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iIdentityroleRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///IdentityuserroleCollection
		///This method returns its collection of BOIdentityuserrole objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityuserrole]
		///</returns>
		///<parameters>
		///BOIdentityrole
		///</parameters>
		public virtual IList<IBOIdentityuserrole> IdentityuserroleCollection()
		{
			Doing(this);
			try
			{
				if(_boIdentityuserroleCollection == null)
					LoadIdentityuserroleCollection();
				return _boIdentityuserroleCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadIdentityuserroleCollection
		///This method loads the internal collection of BOIdentityuserrole objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadIdentityuserroleCollection()
		{
			Doing(this);
			try
			{
				_boIdentityuserroleCollection = new List<IBOIdentityuserrole>();
				IList<IDAOIdentityuserrole> daoIdentityuserroleCollection = _iIdentityuserroleRepository.SelectAllByRoleId(_ıd);
				Done(this);
				
				foreach(IDAOIdentityuserrole daoIdentityuserrole in daoIdentityuserroleCollection)
					_boIdentityuserroleCollection.Add(new BOIdentityuserrole(daoIdentityuserrole));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddIdentityuserrole
		///This method persists a BOIdentityuserrole object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIdentityuserrole
		///</parameters>
		public virtual void AddIdentityuserrole(IBOIdentityuserrole boIdentityuserrole)
		{
			Doing(this);
			IDAOIdentityuserrole daoIdentityuserrole = _iIdentityuserroleRepository.New();
			RegisterDataObject(_iIdentityuserroleRepository, _iIdentityuserroleRepository.BaseData(daoIdentityuserrole));
			BeginTransaction(_iIdentityuserroleRepository, "addIdentityuserrole");
			try
			{
				daoIdentityuserrole.UserId = boIdentityuserrole.UserId;
				daoIdentityuserrole.RoleId = _ıd;
				_iIdentityuserroleRepository.Insert(daoIdentityuserrole);
				CommitTransaction(_iIdentityuserroleRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boIdentityuserrole = new BOIdentityuserrole(daoIdentityuserrole);
				if(_boIdentityuserroleCollection != null)
					_boIdentityuserroleCollection.Add(boIdentityuserrole);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityuserroleRepository, "addIdentityuserrole");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllIdentityuserrole
		///This method deletes all BOIdentityuserrole objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllIdentityuserrole()
		{
			Doing(this);
			RegisterDataObject(_iIdentityuserroleRepository, null);
			BeginTransaction(_iIdentityuserroleRepository, "deleteAllIdentityuserrole");
			try
			{
				_iIdentityuserroleRepository.DeleteAllByRoleId(_ıd);
				CommitTransaction(_iIdentityuserroleRepository);
				Done(this);
				if(_boIdentityuserroleCollection != null)
				{
					_boIdentityuserroleCollection.Clear();
					_boIdentityuserroleCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityuserroleRepository, "deleteAllIdentityuserrole");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IIdentityroleRepository IdentityroleRepository
		{
			set
			{
				_iIdentityroleRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IIdentityuserroleRepository IdentityuserroleRepository
		{
			set
			{
				_iIdentityuserroleRepository = value;
			}
		}
		
		public virtual string Id
		{
			get
			{
				 return _ıd;
			}
			set
			{
				_ıd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iIdentityroleRepository;	}
			set {	IdentityroleRepository = (IIdentityroleRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
