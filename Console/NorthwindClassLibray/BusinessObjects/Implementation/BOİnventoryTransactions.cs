/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 12:15:59
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindClassLibrary.DataObjects;
using NorthwindClassLibrary.DataObjects.Interfaces;
using NorthwindClassLibrary.BusinessObjects.Interfaces;
using NorthwindClassLibrary.BusinessObjects.Repository.Interfaces;

namespace NorthwindClassLibrary.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOInventoryTransactions.
	///It maintains a collection of BOPurchaseOrderDetails objects.
	///</Summary>
	public partial class BOInventoryTransactions : zNorthwindClassLibrayConn_BaseBusiness, IBOInventoryTransactions, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _transactionType;
		protected string _transactionCreatedDate;
		protected string _transactionModifiedDate;
		protected string _productId;
		protected string _quantity;
		protected string _purchaseOrderId;
		protected string _customerOrderId;
		protected string _comments;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOPurchaseOrderDetails> _boPurchaseOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IInventoryTransactionsRepository _iInventoryTransactionsRepository;
		protected IPurchaseOrderDetailsRepository _iPurchaseOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOInventoryTransactions()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOInventoryTransactions daoInventoryTransactions = _iInventoryTransactionsRepository.SelectOne(id);
				_id = daoInventoryTransactions.Id;
				_transactionType = daoInventoryTransactions.TransactionType;
				_transactionCreatedDate = daoInventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoInventoryTransactions.TransactionModifiedDate;
				_productId = daoInventoryTransactions.ProductId;
				_quantity = daoInventoryTransactions.Quantity;
				_purchaseOrderId = daoInventoryTransactions.PurchaseOrderId;
				_customerOrderId = daoInventoryTransactions.CustomerOrderId;
				_comments = daoInventoryTransactions.Comments;
				_ctrVersion = daoInventoryTransactions.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOInventoryTransactions
		///</parameters>
		protected internal BOInventoryTransactions(IDAOInventoryTransactions daoInventoryTransactions)
		{
			try
			{
				_id = daoInventoryTransactions.Id;
				_transactionType = daoInventoryTransactions.TransactionType;
				_transactionCreatedDate = daoInventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoInventoryTransactions.TransactionModifiedDate;
				_productId = daoInventoryTransactions.ProductId;
				_quantity = daoInventoryTransactions.Quantity;
				_purchaseOrderId = daoInventoryTransactions.PurchaseOrderId;
				_customerOrderId = daoInventoryTransactions.CustomerOrderId;
				_comments = daoInventoryTransactions.Comments;
				_ctrVersion = daoInventoryTransactions.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new InventoryTransactions record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOInventoryTransactions daoInventoryTransactions = _iInventoryTransactionsRepository.New();
			RegisterDataObject( _iInventoryTransactionsRepository, _iInventoryTransactionsRepository.BaseData(daoInventoryTransactions));
			BeginTransaction( _iInventoryTransactionsRepository, "savenewBOInventoryTransactions");
			try
			{
				daoInventoryTransactions.TransactionType = _transactionType;
				daoInventoryTransactions.TransactionCreatedDate = _transactionCreatedDate;
				daoInventoryTransactions.TransactionModifiedDate = _transactionModifiedDate;
				daoInventoryTransactions.ProductId = _productId;
				daoInventoryTransactions.Quantity = _quantity;
				daoInventoryTransactions.PurchaseOrderId = _purchaseOrderId;
				daoInventoryTransactions.CustomerOrderId = _customerOrderId;
				daoInventoryTransactions.Comments = _comments;
				_iInventoryTransactionsRepository.Insert(daoInventoryTransactions);
				CommitTransaction( _iInventoryTransactionsRepository);
				Done(this);
				
				_id = daoInventoryTransactions.Id;
				_transactionType = daoInventoryTransactions.TransactionType;
				_transactionCreatedDate = daoInventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoInventoryTransactions.TransactionModifiedDate;
				_productId = daoInventoryTransactions.ProductId;
				_quantity = daoInventoryTransactions.Quantity;
				_purchaseOrderId = daoInventoryTransactions.PurchaseOrderId;
				_customerOrderId = daoInventoryTransactions.CustomerOrderId;
				_comments = daoInventoryTransactions.Comments;
				_ctrVersion = daoInventoryTransactions.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iInventoryTransactionsRepository, "savenewBOInventoryTransactions");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one InventoryTransactions record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOInventoryTransactions
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOInventoryTransactions daoInventoryTransactions = _iInventoryTransactionsRepository.New();
			RegisterDataObject(_iInventoryTransactionsRepository, _iInventoryTransactionsRepository.BaseData(daoInventoryTransactions));
			BeginTransaction(_iInventoryTransactionsRepository, "updateBOInventoryTransactions");
			try
			{
				daoInventoryTransactions.Id = _id;
				daoInventoryTransactions.TransactionType = _transactionType;
				daoInventoryTransactions.TransactionCreatedDate = _transactionCreatedDate;
				daoInventoryTransactions.TransactionModifiedDate = _transactionModifiedDate;
				daoInventoryTransactions.ProductId = _productId;
				daoInventoryTransactions.Quantity = _quantity;
				daoInventoryTransactions.PurchaseOrderId = _purchaseOrderId;
				daoInventoryTransactions.CustomerOrderId = _customerOrderId;
				daoInventoryTransactions.Comments = _comments;
				daoInventoryTransactions.CtrVersion = _ctrVersion;
				_iInventoryTransactionsRepository.Update(daoInventoryTransactions);
				CommitTransaction(_iInventoryTransactionsRepository);
				Done(this);
				
				_id = daoInventoryTransactions.Id;
				_transactionType = daoInventoryTransactions.TransactionType;
				_transactionCreatedDate = daoInventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoInventoryTransactions.TransactionModifiedDate;
				_productId = daoInventoryTransactions.ProductId;
				_quantity = daoInventoryTransactions.Quantity;
				_purchaseOrderId = daoInventoryTransactions.PurchaseOrderId;
				_customerOrderId = daoInventoryTransactions.CustomerOrderId;
				_comments = daoInventoryTransactions.Comments;
				_ctrVersion = daoInventoryTransactions.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iInventoryTransactionsRepository, "updateBOInventoryTransactions");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one InventoryTransactions record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOInventoryTransactions daoInventoryTransactions = _iInventoryTransactionsRepository.New();
			RegisterDataObject(_iInventoryTransactionsRepository, _iInventoryTransactionsRepository.BaseData(daoInventoryTransactions));
			BeginTransaction(_iInventoryTransactionsRepository, "deleteBOInventoryTransactions");
			try
			{
				daoInventoryTransactions.Id = _id;
				_iInventoryTransactionsRepository.Delete(daoInventoryTransactions);
				CommitTransaction(_iInventoryTransactionsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iInventoryTransactionsRepository, "deleteBOInventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///InventoryTransactionsCollection
		///This method returns the collection of BOInventoryTransactions objects
		///</Summary>
		///<returns>
		///IList[IBOInventoryTransactions]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOInventoryTransactions> InventoryTransactionsCollection(IInventoryTransactionsRepository iInventoryTransactionsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOInventoryTransactions> boInventoryTransactionsCollection = new List<IBOInventoryTransactions>();
				IList<IDAOInventoryTransactions> daoInventoryTransactionsCollection = iInventoryTransactionsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOInventoryTransactions daoInventoryTransactions in daoInventoryTransactionsCollection)
					boInventoryTransactionsCollection.Add(new BOInventoryTransactions(daoInventoryTransactions));
				
				return boInventoryTransactionsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///InventoryTransactionsCollectionCount
		///This method returns the collection count of BOInventoryTransactions objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 InventoryTransactionsCollectionCount(IInventoryTransactionsRepository iInventoryTransactionsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iInventoryTransactionsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///InventoryTransactionsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOInventoryTransactions>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iInventoryTransactionsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boInventoryTransactionsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOInventoryTransactions> daoInventoryTransactionsCollection = _iInventoryTransactionsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOInventoryTransactions resdaoInventoryTransactions in daoInventoryTransactionsCollection)
					boInventoryTransactionsCollection.Add((T)(object)new BOInventoryTransactions(resdaoInventoryTransactions));
				
				return boInventoryTransactionsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOInventoryTransactions objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOInventoryTransactions> boInventoryTransactionsCollection = new List<IBOInventoryTransactions>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iInventoryTransactionsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailsCollection
		///This method returns its collection of BOPurchaseOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrderDetails]
		///</returns>
		///<parameters>
		///BOInventoryTransactions
		///</parameters>
		public virtual IList<IBOPurchaseOrderDetails> PurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrderDetailsCollection == null)
					LoadPurchaseOrderDetailsCollection();
				return _boPurchaseOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailsCollection
		///This method loads the internal collection of BOPurchaseOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrderDetailsCollection = new List<IBOPurchaseOrderDetails>();
				IList<IDAOPurchaseOrderDetails> daoPurchaseOrderDetailsCollection = _iPurchaseOrderDetailsRepository.SelectAllByInventoryId(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrderDetails daoPurchaseOrderDetails in daoPurchaseOrderDetailsCollection)
					_boPurchaseOrderDetailsCollection.Add(new BOPurchaseOrderDetails(daoPurchaseOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetails
		///This method persists a BOPurchaseOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetails
		///</parameters>
		public virtual void AddPurchaseOrderDetails(IBOPurchaseOrderDetails boPurchaseOrderDetails)
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject(_iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.Id = boPurchaseOrderDetails.Id;
				daoPurchaseOrderDetails.PurchaseOrderId = boPurchaseOrderDetails.PurchaseOrderId;
				daoPurchaseOrderDetails.ProductId = boPurchaseOrderDetails.ProductId;
				daoPurchaseOrderDetails.Quantity = boPurchaseOrderDetails.Quantity;
				daoPurchaseOrderDetails.UnitCost = boPurchaseOrderDetails.UnitCost;
				daoPurchaseOrderDetails.DateReceived = boPurchaseOrderDetails.DateReceived;
				daoPurchaseOrderDetails.PostedToInventory = boPurchaseOrderDetails.PostedToInventory;
				daoPurchaseOrderDetails.InventoryId = _id;
				_iPurchaseOrderDetailsRepository.Insert(daoPurchaseOrderDetails);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetails = new BOPurchaseOrderDetails(daoPurchaseOrderDetails);
				if(_boPurchaseOrderDetailsCollection != null)
					_boPurchaseOrderDetailsCollection.Add(boPurchaseOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetails
		///This method deletes all BOPurchaseOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrderDetailsRepository, null);
			BeginTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
			try
			{
				_iPurchaseOrderDetailsRepository.DeleteAllByInventoryId(_id);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				if(_boPurchaseOrderDetailsCollection != null)
				{
					_boPurchaseOrderDetailsCollection.Clear();
					_boPurchaseOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInventoryTransactionsRepository InventoryTransactionsRepository
		{
			set
			{
				_iInventoryTransactionsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrderDetailsRepository PurchaseOrderDetailsRepository
		{
			set
			{
				_iPurchaseOrderDetailsRepository = value;
			}
		}
		
		public virtual string Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionType
		{
			get
			{
				 return _transactionType;
			}
			set
			{
				_transactionType = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionCreatedDate
		{
			get
			{
				 return _transactionCreatedDate;
			}
			set
			{
				_transactionCreatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionModifiedDate
		{
			get
			{
				 return _transactionModifiedDate;
			}
			set
			{
				_transactionModifiedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductId
		{
			get
			{
				 return _productId;
			}
			set
			{
				_productId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual string PurchaseOrderId
		{
			get
			{
				 return _purchaseOrderId;
			}
			set
			{
				_purchaseOrderId = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerOrderId
		{
			get
			{
				 return _customerOrderId;
			}
			set
			{
				_customerOrderId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Comments
		{
			get
			{
				 return _comments;
			}
			set
			{
				_comments = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iInventoryTransactionsRepository;	}
			set {	InventoryTransactionsRepository = (IInventoryTransactionsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
