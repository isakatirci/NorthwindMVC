/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:11:04
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindTest2.Data;
using NorthwindTest2.Data.Interfaces;
using NorthwindTest2.Business.Interfaces;
using NorthwindTest2.Business.Repository.Interfaces;

namespace NorthwindTest2.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCategories.
	///It maintains a collection of BOProducts objects.
	///</Summary>
	public partial class BOCategories : zNorthwindTest2Conn_BaseBusiness, IBOCategories, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _categoryID;
		protected string _categoryName;
		protected string _description;
		protected byte[] _picture;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOProducts> _boProductsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected ICategoriesRepository _iCategoriesRepository;
		protected IProductsRepository _iProductsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCategories()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 categoryID
		///</parameters>
		public void Init(Int32 categoryID)
		{
			try
			{
				IDAOCategories daoCategories = _iCategoriesRepository.SelectOne(categoryID);
				_categoryID = daoCategories.CategoryID;
				_categoryName = daoCategories.CategoryName;
				_description = daoCategories.Description;
				_picture = daoCategories.Picture;
				_ctrVersion = daoCategories.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCategories
		///</parameters>
		protected internal BOCategories(IDAOCategories daoCategories)
		{
			try
			{
				_categoryID = daoCategories.CategoryID;
				_categoryName = daoCategories.CategoryName;
				_description = daoCategories.Description;
				_picture = daoCategories.Picture;
				_ctrVersion = daoCategories.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Categories record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOCategories daoCategories = _iCategoriesRepository.New();
			RegisterDataObject( _iCategoriesRepository, _iCategoriesRepository.BaseData(daoCategories));
			BeginTransaction( _iCategoriesRepository, "savenewBOCategories");
			try
			{
				daoCategories.CategoryName = _categoryName;
				daoCategories.Description = _description;
				daoCategories.Picture = _picture;
				_iCategoriesRepository.Insert(daoCategories);
				CommitTransaction( _iCategoriesRepository);
				Done(this);
				
				_categoryID = daoCategories.CategoryID;
				_categoryName = daoCategories.CategoryName;
				_description = daoCategories.Description;
				_picture = daoCategories.Picture;
				_ctrVersion = daoCategories.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iCategoriesRepository, "savenewBOCategories");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Categories record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCategories
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOCategories daoCategories = _iCategoriesRepository.New();
			RegisterDataObject(_iCategoriesRepository, _iCategoriesRepository.BaseData(daoCategories));
			BeginTransaction(_iCategoriesRepository, "updateBOCategories");
			try
			{
				daoCategories.CategoryID = _categoryID;
				daoCategories.CategoryName = _categoryName;
				daoCategories.Description = _description;
				daoCategories.Picture = _picture;
				daoCategories.CtrVersion = _ctrVersion;
				_iCategoriesRepository.Update(daoCategories);
				CommitTransaction(_iCategoriesRepository);
				Done(this);
				
				_categoryID = daoCategories.CategoryID;
				_categoryName = daoCategories.CategoryName;
				_description = daoCategories.Description;
				_picture = daoCategories.Picture;
				_ctrVersion = daoCategories.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iCategoriesRepository, "updateBOCategories");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Categories record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOCategories daoCategories = _iCategoriesRepository.New();
			RegisterDataObject(_iCategoriesRepository, _iCategoriesRepository.BaseData(daoCategories));
			BeginTransaction(_iCategoriesRepository, "deleteBOCategories");
			try
			{
				daoCategories.CategoryID = _categoryID;
				_iCategoriesRepository.Delete(daoCategories);
				CommitTransaction(_iCategoriesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iCategoriesRepository, "deleteBOCategories");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///CategoriesCollection
		///This method returns the collection of BOCategories objects
		///</Summary>
		///<returns>
		///IList[IBOCategories]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOCategories> CategoriesCollection(ICategoriesRepository iCategoriesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOCategories> boCategoriesCollection = new List<IBOCategories>();
				IList<IDAOCategories> daoCategoriesCollection = iCategoriesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOCategories daoCategories in daoCategoriesCollection)
					boCategoriesCollection.Add(new BOCategories(daoCategories));
				
				return boCategoriesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CategoriesCollectionCount
		///This method returns the collection count of BOCategories objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CategoriesCollectionCount(ICategoriesRepository iCategoriesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iCategoriesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///CategoriesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOCategories>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iCategoriesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCategoriesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOCategories> daoCategoriesCollection = _iCategoriesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOCategories resdaoCategories in daoCategoriesCollection)
					boCategoriesCollection.Add((T)(object)new BOCategories(resdaoCategories));
				
				return boCategoriesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOCategories objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOCategories> boCategoriesCollection = new List<IBOCategories>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iCategoriesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///ProductsCollection
		///This method returns its collection of BOProducts objects
		///</Summary>
		///<returns>
		///IList[IBOProducts]
		///</returns>
		///<parameters>
		///BOCategories
		///</parameters>
		public virtual IList<IBOProducts> ProductsCollection()
		{
			Doing(this);
			try
			{
				if(_boProductsCollection == null)
					LoadProductsCollection();
				return _boProductsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadProductsCollection
		///This method loads the internal collection of BOProducts objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadProductsCollection()
		{
			Doing(this);
			try
			{
				_boProductsCollection = new List<IBOProducts>();
				IList<IDAOProducts> daoProductsCollection = _iProductsRepository.SelectAllByCategoryID(_categoryID.Value);
				Done(this);
				
				foreach(IDAOProducts daoProducts in daoProductsCollection)
					_boProductsCollection.Add(new BOProducts(daoProducts));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddProducts
		///This method persists a BOProducts object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual void AddProducts(IBOProducts boProducts)
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject(_iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction(_iProductsRepository, "addProducts");
			try
			{
				daoProducts.ProductID = boProducts.ProductID;
				daoProducts.ProductName = boProducts.ProductName;
				daoProducts.SupplierID = boProducts.SupplierID;
				daoProducts.QuantityPerUnit = boProducts.QuantityPerUnit;
				daoProducts.UnitPrice = boProducts.UnitPrice;
				daoProducts.UnitsInStock = boProducts.UnitsInStock;
				daoProducts.UnitsOnOrder = boProducts.UnitsOnOrder;
				daoProducts.ReorderLevel = boProducts.ReorderLevel;
				daoProducts.Discontinued = boProducts.Discontinued;
				daoProducts.CategoryID = _categoryID.Value;
				_iProductsRepository.Insert(daoProducts);
				CommitTransaction(_iProductsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boProducts = new BOProducts(daoProducts);
				if(_boProductsCollection != null)
					_boProductsCollection.Add(boProducts);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "addProducts");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllProducts
		///This method deletes all BOProducts objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllProducts()
		{
			Doing(this);
			RegisterDataObject(_iProductsRepository, null);
			BeginTransaction(_iProductsRepository, "deleteAllProducts");
			try
			{
				_iProductsRepository.DeleteAllByCategoryID(_categoryID.Value);
				CommitTransaction(_iProductsRepository);
				Done(this);
				if(_boProductsCollection != null)
				{
					_boProductsCollection.Clear();
					_boProductsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "deleteAllProducts");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ICategoriesRepository CategoriesRepository
		{
			set
			{
				_iCategoriesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IProductsRepository ProductsRepository
		{
			set
			{
				_iProductsRepository = value;
			}
		}
		
		public virtual Int32? CategoryID
		{
			get
			{
				 return _categoryID;
			}
			set
			{
				_categoryID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CategoryName
		{
			get
			{
				 return _categoryName;
			}
			set
			{
				_categoryName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Description
		{
			get
			{
				 return _description;
			}
			set
			{
				_description = value;
				_isDirty = true;
			}
		}
		
		public virtual byte[] Picture
		{
			get
			{
				 return _picture;
			}
			set
			{
				_picture = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iCategoriesRepository;	}
			set {	CategoriesRepository = (ICategoriesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
