/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOProductSalesFor1997.
	///</Summary>
	public partial class BOProductSalesFor1997 : zNorthwindRestApiConn_BaseBusiness, IBOProductSalesFor1997, IQueryableCollection
	{
		#region member variables
		protected string _categoryName;
		protected string _productName;
		protected decimal? _productSales;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IProductSalesFor1997Repository _iProductSalesFor1997Repository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOProductSalesFor1997()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOProductSalesFor1997
		///</parameters>
		protected internal BOProductSalesFor1997(IDAOProductSalesFor1997 daoProductSalesFor1997)
		{
			try
			{
				_categoryName = daoProductSalesFor1997.CategoryName;
				_productName = daoProductSalesFor1997.ProductName;
				_productSales = daoProductSalesFor1997.ProductSales;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///ProductSalesFor1997Collection
		///This method returns the collection of BOProductSalesFor1997 objects
		///</Summary>
		///<returns>
		///IList[IBOProductSalesFor1997]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOProductSalesFor1997> ProductSalesFor1997Collection(IProductSalesFor1997Repository iProductSalesFor1997Repository)
		{
			Doing(null);
			try
			{
				IList<IBOProductSalesFor1997> boProductSalesFor1997Collection = new List<IBOProductSalesFor1997>();
				IList<IDAOProductSalesFor1997> daoProductSalesFor1997Collection = iProductSalesFor1997Repository.SelectAll();
				Done(null);
				
				foreach(IDAOProductSalesFor1997 daoProductSalesFor1997 in daoProductSalesFor1997Collection)
					boProductSalesFor1997Collection.Add(new BOProductSalesFor1997(daoProductSalesFor1997));
				
				return boProductSalesFor1997Collection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ProductSalesFor1997CollectionCount
		///This method returns the collection count of BOProductSalesFor1997 objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ProductSalesFor1997CollectionCount(IProductSalesFor1997Repository iProductSalesFor1997Repository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iProductSalesFor1997Repository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///ProductSalesFor1997CollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOProductSalesFor1997>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iProductSalesFor1997Repository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boProductSalesFor1997Collection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOProductSalesFor1997> daoProductSalesFor1997Collection = _iProductSalesFor1997Repository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOProductSalesFor1997 resdaoProductSalesFor1997 in daoProductSalesFor1997Collection)
					boProductSalesFor1997Collection.Add((T)(object)new BOProductSalesFor1997(resdaoProductSalesFor1997));
				
				return boProductSalesFor1997Collection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOProductSalesFor1997 objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOProductSalesFor1997> boProductSalesFor1997Collection = new List<IBOProductSalesFor1997>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iProductSalesFor1997Repository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IProductSalesFor1997Repository ProductSalesFor1997Repository
		{
			set
			{
				_iProductSalesFor1997Repository = value;
			}
		}
		
		public virtual string CategoryName
		{
			get
			{
				 return _categoryName;
			}
			set
			{
				_categoryName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductName
		{
			get
			{
				 return _productName;
			}
			set
			{
				_productName = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? ProductSales
		{
			get
			{
				 return _productSales;
			}
			set
			{
				_productSales = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iProductSalesFor1997Repository;	}
			set {	ProductSalesFor1997Repository = (IProductSalesFor1997Repository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
