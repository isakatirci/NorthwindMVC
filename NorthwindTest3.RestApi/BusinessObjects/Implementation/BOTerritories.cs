/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTerritories.
	///It maintains a collection of BOEmployeeTerritories objects.
	///</Summary>
	public partial class BOTerritories : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _territoryID;
		protected string _territoryDescription;
		protected Int32? _regionID;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOEmployeeTerritories> _boEmployeeTerritoriesCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTerritories()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string territoryID
		///</parameters>
		public BOTerritories(string territoryID)
		{
			try
			{
				DAOTerritories daoTerritories = DAOTerritories.SelectOne(territoryID);
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTerritories
		///</parameters>
		protected internal BOTerritories(DAOTerritories daoTerritories)
		{
			try
			{
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Territories record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOTerritories daoTerritories = new DAOTerritories();
			RegisterDataObject(daoTerritories);
			BeginTransaction("savenewBOTerritories");
			try
			{
				daoTerritories.TerritoryID = _territoryID;
				daoTerritories.TerritoryDescription = _territoryDescription;
				daoTerritories.RegionID = _regionID;
				daoTerritories.Insert();
				CommitTransaction();
				
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOTerritories");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Territories record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTerritories
		///</parameters>
		public virtual void Update()
		{
			DAOTerritories daoTerritories = new DAOTerritories();
			RegisterDataObject(daoTerritories);
			BeginTransaction("updateBOTerritories");
			try
			{
				daoTerritories.TerritoryID = _territoryID;
				daoTerritories.TerritoryDescription = _territoryDescription;
				daoTerritories.RegionID = _regionID;
				daoTerritories.Update();
				CommitTransaction();
				
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOTerritories");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Territories record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOTerritories daoTerritories = new DAOTerritories();
			RegisterDataObject(daoTerritories);
			BeginTransaction("deleteBOTerritories");
			try
			{
				daoTerritories.TerritoryID = _territoryID;
				daoTerritories.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOTerritories");
				throw;
			}
		}
		
		///<Summary>
		///TerritoriesCollection
		///This method returns the collection of BOTerritories objects
		///</Summary>
		///<returns>
		///List[BOTerritories]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOTerritories> TerritoriesCollection()
		{
			try
			{
				IList<BOTerritories> boTerritoriesCollection = new List<BOTerritories>();
				IList<DAOTerritories> daoTerritoriesCollection = DAOTerritories.SelectAll();
			
				foreach(DAOTerritories daoTerritories in daoTerritoriesCollection)
					boTerritoriesCollection.Add(new BOTerritories(daoTerritories));
			
				return boTerritoriesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TerritoriesCollectionCount
		///This method returns the collection count of BOTerritories objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TerritoriesCollectionCount()
		{
			try
			{
				Int32 objCount = DAOTerritories.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///EmployeeTerritoriesCollection
		///This method returns its collection of BOEmployeeTerritories objects
		///</Summary>
		///<returns>
		///IList[BOEmployeeTerritories]
		///</returns>
		///<parameters>
		///BOTerritories
		///</parameters>
		public virtual IList<BOEmployeeTerritories> EmployeeTerritoriesCollection()
		{
			try
			{
				if(_boEmployeeTerritoriesCollection == null)
					LoadEmployeeTerritoriesCollection();
				
				return _boEmployeeTerritoriesCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOTerritories>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOTerritories.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TerritoriesCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOTerritories objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boTerritoriesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOTerritories> daoTerritoriesCollection = DAOTerritories.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOTerritories resdaoTerritories in daoTerritoriesCollection)
					boTerritoriesCollection.Add((T)(object)new BOTerritories(resdaoTerritories));
			
				return boTerritoriesCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///TerritoriesCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOTerritories objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOTerritories.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadEmployeeTerritoriesCollection
		///This method loads the internal collection of BOEmployeeTerritories objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadEmployeeTerritoriesCollection()
		{
			try
			{
				_boEmployeeTerritoriesCollection = new List<BOEmployeeTerritories>();
				IList<DAOEmployeeTerritories> daoEmployeeTerritoriesCollection = DAOEmployeeTerritories.SelectAllByTerritoryID(_territoryID);
				
				foreach(DAOEmployeeTerritories daoEmployeeTerritories in daoEmployeeTerritoriesCollection)
					_boEmployeeTerritoriesCollection.Add(new BOEmployeeTerritories(daoEmployeeTerritories));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddEmployeeTerritories
		///This method persists a BOEmployeeTerritories object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployeeTerritories
		///</parameters>
		public virtual void AddEmployeeTerritories(BOEmployeeTerritories boEmployeeTerritories)
		{
			DAOEmployeeTerritories daoEmployeeTerritories = new DAOEmployeeTerritories();
			RegisterDataObject(daoEmployeeTerritories);
			BeginTransaction("addEmployeeTerritories");
			try
			{
				daoEmployeeTerritories.EmployeeID = boEmployeeTerritories.EmployeeID;
				daoEmployeeTerritories.TerritoryID = _territoryID;
				daoEmployeeTerritories.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boEmployeeTerritories = new BOEmployeeTerritories(daoEmployeeTerritories);
				if(_boEmployeeTerritoriesCollection != null)
					_boEmployeeTerritoriesCollection.Add(boEmployeeTerritories);
			}
			catch
			{
				RollbackTransaction("addEmployeeTerritories");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllEmployeeTerritories
		///This method deletes all BOEmployeeTerritories objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllEmployeeTerritories()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllEmployeeTerritories");
			try
			{
				DAOEmployeeTerritories.DeleteAllByTerritoryID(ConnectionProvider, _territoryID);
				CommitTransaction();
				if(_boEmployeeTerritoriesCollection != null)
				{
					_boEmployeeTerritoriesCollection.Clear();
					_boEmployeeTerritoriesCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllEmployeeTerritories");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string TerritoryID
		{
			get
			{
				 return _territoryID;
			}
			set
			{
				_territoryID = value;
				_isDirty = true;
			}
		}
		
		public virtual string TerritoryDescription
		{
			get
			{
				 return _territoryDescription;
			}
			set
			{
				_territoryDescription = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegionID
		{
			get
			{
				 return _regionID;
			}
			set
			{
				_regionID = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
