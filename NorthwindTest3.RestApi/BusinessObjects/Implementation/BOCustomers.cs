/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCustomers.
	///It maintains a collection of BOCustomerCustomerDemo,BOOrders objects.
	///</Summary>
	public partial class BOCustomers : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _customerID;
		protected string _companyName;
		protected string _contactName;
		protected string _contactTitle;
		protected string _address;
		protected string _city;
		protected string _region;
		protected string _postalCode;
		protected string _country;
		protected string _phone;
		protected string _fax;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOCustomerCustomerDemo> _boCustomerCustomerDemoCollection;
		List<BOOrders> _boOrdersCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCustomers()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string customerID
		///</parameters>
		public BOCustomers(string customerID)
		{
			try
			{
				DAOCustomers daoCustomers = DAOCustomers.SelectOne(customerID);
				_customerID = daoCustomers.CustomerID;
				_companyName = daoCustomers.CompanyName;
				_contactName = daoCustomers.ContactName;
				_contactTitle = daoCustomers.ContactTitle;
				_address = daoCustomers.Address;
				_city = daoCustomers.City;
				_region = daoCustomers.Region;
				_postalCode = daoCustomers.PostalCode;
				_country = daoCustomers.Country;
				_phone = daoCustomers.Phone;
				_fax = daoCustomers.Fax;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCustomers
		///</parameters>
		protected internal BOCustomers(DAOCustomers daoCustomers)
		{
			try
			{
				_customerID = daoCustomers.CustomerID;
				_companyName = daoCustomers.CompanyName;
				_contactName = daoCustomers.ContactName;
				_contactTitle = daoCustomers.ContactTitle;
				_address = daoCustomers.Address;
				_city = daoCustomers.City;
				_region = daoCustomers.Region;
				_postalCode = daoCustomers.PostalCode;
				_country = daoCustomers.Country;
				_phone = daoCustomers.Phone;
				_fax = daoCustomers.Fax;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Customers record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOCustomers daoCustomers = new DAOCustomers();
			RegisterDataObject(daoCustomers);
			BeginTransaction("savenewBOCustomers");
			try
			{
				daoCustomers.CustomerID = _customerID;
				daoCustomers.CompanyName = _companyName;
				daoCustomers.ContactName = _contactName;
				daoCustomers.ContactTitle = _contactTitle;
				daoCustomers.Address = _address;
				daoCustomers.City = _city;
				daoCustomers.Region = _region;
				daoCustomers.PostalCode = _postalCode;
				daoCustomers.Country = _country;
				daoCustomers.Phone = _phone;
				daoCustomers.Fax = _fax;
				daoCustomers.Insert();
				CommitTransaction();
				
				_customerID = daoCustomers.CustomerID;
				_companyName = daoCustomers.CompanyName;
				_contactName = daoCustomers.ContactName;
				_contactTitle = daoCustomers.ContactTitle;
				_address = daoCustomers.Address;
				_city = daoCustomers.City;
				_region = daoCustomers.Region;
				_postalCode = daoCustomers.PostalCode;
				_country = daoCustomers.Country;
				_phone = daoCustomers.Phone;
				_fax = daoCustomers.Fax;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOCustomers");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Customers record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCustomers
		///</parameters>
		public virtual void Update()
		{
			DAOCustomers daoCustomers = new DAOCustomers();
			RegisterDataObject(daoCustomers);
			BeginTransaction("updateBOCustomers");
			try
			{
				daoCustomers.CustomerID = _customerID;
				daoCustomers.CompanyName = _companyName;
				daoCustomers.ContactName = _contactName;
				daoCustomers.ContactTitle = _contactTitle;
				daoCustomers.Address = _address;
				daoCustomers.City = _city;
				daoCustomers.Region = _region;
				daoCustomers.PostalCode = _postalCode;
				daoCustomers.Country = _country;
				daoCustomers.Phone = _phone;
				daoCustomers.Fax = _fax;
				daoCustomers.Update();
				CommitTransaction();
				
				_customerID = daoCustomers.CustomerID;
				_companyName = daoCustomers.CompanyName;
				_contactName = daoCustomers.ContactName;
				_contactTitle = daoCustomers.ContactTitle;
				_address = daoCustomers.Address;
				_city = daoCustomers.City;
				_region = daoCustomers.Region;
				_postalCode = daoCustomers.PostalCode;
				_country = daoCustomers.Country;
				_phone = daoCustomers.Phone;
				_fax = daoCustomers.Fax;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOCustomers");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Customers record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOCustomers daoCustomers = new DAOCustomers();
			RegisterDataObject(daoCustomers);
			BeginTransaction("deleteBOCustomers");
			try
			{
				daoCustomers.CustomerID = _customerID;
				daoCustomers.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOCustomers");
				throw;
			}
		}
		
		///<Summary>
		///CustomersCollection
		///This method returns the collection of BOCustomers objects
		///</Summary>
		///<returns>
		///List[BOCustomers]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOCustomers> CustomersCollection()
		{
			try
			{
				IList<BOCustomers> boCustomersCollection = new List<BOCustomers>();
				IList<DAOCustomers> daoCustomersCollection = DAOCustomers.SelectAll();
			
				foreach(DAOCustomers daoCustomers in daoCustomersCollection)
					boCustomersCollection.Add(new BOCustomers(daoCustomers));
			
				return boCustomersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomersCollectionCount
		///This method returns the collection count of BOCustomers objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CustomersCollectionCount()
		{
			try
			{
				Int32 objCount = DAOCustomers.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///CustomerCustomerDemoCollection
		///This method returns its collection of BOCustomerCustomerDemo objects
		///</Summary>
		///<returns>
		///IList[BOCustomerCustomerDemo]
		///</returns>
		///<parameters>
		///BOCustomers
		///</parameters>
		public virtual IList<BOCustomerCustomerDemo> CustomerCustomerDemoCollection()
		{
			try
			{
				if(_boCustomerCustomerDemoCollection == null)
					LoadCustomerCustomerDemoCollection();
				
				return _boCustomerCustomerDemoCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OrdersCollection
		///This method returns its collection of BOOrders objects
		///</Summary>
		///<returns>
		///IList[BOOrders]
		///</returns>
		///<parameters>
		///BOCustomers
		///</parameters>
		public virtual IList<BOOrders> OrdersCollection()
		{
			try
			{
				if(_boOrdersCollection == null)
					LoadOrdersCollection();
				
				return _boOrdersCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOCustomers>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOCustomers.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomersCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOCustomers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCustomersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOCustomers> daoCustomersCollection = DAOCustomers.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOCustomers resdaoCustomers in daoCustomersCollection)
					boCustomersCollection.Add((T)(object)new BOCustomers(resdaoCustomers));
			
				return boCustomersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomersCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOCustomers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOCustomers.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadCustomerCustomerDemoCollection
		///This method loads the internal collection of BOCustomerCustomerDemo objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadCustomerCustomerDemoCollection()
		{
			try
			{
				_boCustomerCustomerDemoCollection = new List<BOCustomerCustomerDemo>();
				IList<DAOCustomerCustomerDemo> daoCustomerCustomerDemoCollection = DAOCustomerCustomerDemo.SelectAllByCustomerID(_customerID);
				
				foreach(DAOCustomerCustomerDemo daoCustomerCustomerDemo in daoCustomerCustomerDemoCollection)
					_boCustomerCustomerDemoCollection.Add(new BOCustomerCustomerDemo(daoCustomerCustomerDemo));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddCustomerCustomerDemo
		///This method persists a BOCustomerCustomerDemo object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCustomerCustomerDemo
		///</parameters>
		public virtual void AddCustomerCustomerDemo(BOCustomerCustomerDemo boCustomerCustomerDemo)
		{
			DAOCustomerCustomerDemo daoCustomerCustomerDemo = new DAOCustomerCustomerDemo();
			RegisterDataObject(daoCustomerCustomerDemo);
			BeginTransaction("addCustomerCustomerDemo");
			try
			{
				daoCustomerCustomerDemo.CustomerTypeID = boCustomerCustomerDemo.CustomerTypeID;
				daoCustomerCustomerDemo.CustomerID = _customerID;
				daoCustomerCustomerDemo.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boCustomerCustomerDemo = new BOCustomerCustomerDemo(daoCustomerCustomerDemo);
				if(_boCustomerCustomerDemoCollection != null)
					_boCustomerCustomerDemoCollection.Add(boCustomerCustomerDemo);
			}
			catch
			{
				RollbackTransaction("addCustomerCustomerDemo");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllCustomerCustomerDemo
		///This method deletes all BOCustomerCustomerDemo objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllCustomerCustomerDemo()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllCustomerCustomerDemo");
			try
			{
				DAOCustomerCustomerDemo.DeleteAllByCustomerID(ConnectionProvider, _customerID);
				CommitTransaction();
				if(_boCustomerCustomerDemoCollection != null)
				{
					_boCustomerCustomerDemoCollection.Clear();
					_boCustomerCustomerDemoCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllCustomerCustomerDemo");
				throw;
			}
		}
		
		///<Summary>
		///LoadOrdersCollection
		///This method loads the internal collection of BOOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrdersCollection()
		{
			try
			{
				_boOrdersCollection = new List<BOOrders>();
				IList<DAOOrders> daoOrdersCollection = DAOOrders.SelectAllByCustomerID(_customerID);
				
				foreach(DAOOrders daoOrders in daoOrdersCollection)
					_boOrdersCollection.Add(new BOOrders(daoOrders));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOrders
		///This method persists a BOOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual void AddOrders(BOOrders boOrders)
		{
			DAOOrders daoOrders = new DAOOrders();
			RegisterDataObject(daoOrders);
			BeginTransaction("addOrders");
			try
			{
				daoOrders.OrderID = boOrders.OrderID;
				daoOrders.EmployeeID = boOrders.EmployeeID;
				daoOrders.OrderDate = boOrders.OrderDate;
				daoOrders.RequiredDate = boOrders.RequiredDate;
				daoOrders.ShippedDate = boOrders.ShippedDate;
				daoOrders.ShipVia = boOrders.ShipVia;
				daoOrders.Freight = boOrders.Freight;
				daoOrders.ShipName = boOrders.ShipName;
				daoOrders.ShipAddress = boOrders.ShipAddress;
				daoOrders.ShipCity = boOrders.ShipCity;
				daoOrders.ShipRegion = boOrders.ShipRegion;
				daoOrders.ShipPostalCode = boOrders.ShipPostalCode;
				daoOrders.ShipCountry = boOrders.ShipCountry;
				daoOrders.CustomerID = _customerID;
				daoOrders.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOrders = new BOOrders(daoOrders);
				if(_boOrdersCollection != null)
					_boOrdersCollection.Add(boOrders);
			}
			catch
			{
				RollbackTransaction("addOrders");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOrders
		///This method deletes all BOOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrders()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOrders");
			try
			{
				DAOOrders.DeleteAllByCustomerID(ConnectionProvider, _customerID);
				CommitTransaction();
				if(_boOrdersCollection != null)
				{
					_boOrdersCollection.Clear();
					_boOrdersCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOrders");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string CustomerID
		{
			get
			{
				 return _customerID;
			}
			set
			{
				_customerID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyName
		{
			get
			{
				 return _companyName;
			}
			set
			{
				_companyName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContactName
		{
			get
			{
				 return _contactName;
			}
			set
			{
				_contactName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContactTitle
		{
			get
			{
				 return _contactTitle;
			}
			set
			{
				_contactTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string Region
		{
			get
			{
				 return _region;
			}
			set
			{
				_region = value;
				_isDirty = true;
			}
		}
		
		public virtual string PostalCode
		{
			get
			{
				 return _postalCode;
			}
			set
			{
				_postalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Country
		{
			get
			{
				 return _country;
			}
			set
			{
				_country = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string Fax
		{
			get
			{
				 return _fax;
			}
			set
			{
				_fax = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
