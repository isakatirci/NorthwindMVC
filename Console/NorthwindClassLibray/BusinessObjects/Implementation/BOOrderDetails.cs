/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 12:15:59
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindClassLibrary.DataObjects;
using NorthwindClassLibrary.DataObjects.Interfaces;
using NorthwindClassLibrary.BusinessObjects.Interfaces;
using NorthwindClassLibrary.BusinessObjects.Repository.Interfaces;

namespace NorthwindClassLibrary.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrderDetails.
	///</Summary>
	public partial class BOOrderDetails : zNorthwindClassLibrayConn_BaseBusiness, IBOOrderDetails, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _orderId;
		protected string _productId;
		protected string _quantity;
		protected string _unitPrice;
		protected double? _discount;
		protected string _statusId;
		protected string _dateAllocated;
		protected string _purchaseOrderId;
		protected string _inventoryId;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IOrderDetailsRepository _iOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrderDetails()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.SelectOne(id);
				_id = daoOrderDetails.Id;
				_orderId = daoOrderDetails.OrderId;
				_productId = daoOrderDetails.ProductId;
				_quantity = daoOrderDetails.Quantity;
				_unitPrice = daoOrderDetails.UnitPrice;
				_discount = daoOrderDetails.Discount;
				_statusId = daoOrderDetails.StatusId;
				_dateAllocated = daoOrderDetails.DateAllocated;
				_purchaseOrderId = daoOrderDetails.PurchaseOrderId;
				_inventoryId = daoOrderDetails.InventoryId;
				_ctrVersion = daoOrderDetails.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrderDetails
		///</parameters>
		protected internal BOOrderDetails(IDAOOrderDetails daoOrderDetails)
		{
			try
			{
				_id = daoOrderDetails.Id;
				_orderId = daoOrderDetails.OrderId;
				_productId = daoOrderDetails.ProductId;
				_quantity = daoOrderDetails.Quantity;
				_unitPrice = daoOrderDetails.UnitPrice;
				_discount = daoOrderDetails.Discount;
				_statusId = daoOrderDetails.StatusId;
				_dateAllocated = daoOrderDetails.DateAllocated;
				_purchaseOrderId = daoOrderDetails.PurchaseOrderId;
				_inventoryId = daoOrderDetails.InventoryId;
				_ctrVersion = daoOrderDetails.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OrderDetails record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject( _iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction( _iOrderDetailsRepository, "savenewBOOrderDetails");
			try
			{
				daoOrderDetails.OrderId = _orderId;
				daoOrderDetails.ProductId = _productId;
				daoOrderDetails.Quantity = _quantity;
				daoOrderDetails.UnitPrice = _unitPrice;
				daoOrderDetails.Discount = _discount;
				daoOrderDetails.StatusId = _statusId;
				daoOrderDetails.DateAllocated = _dateAllocated;
				daoOrderDetails.PurchaseOrderId = _purchaseOrderId;
				daoOrderDetails.InventoryId = _inventoryId;
				_iOrderDetailsRepository.Insert(daoOrderDetails);
				CommitTransaction( _iOrderDetailsRepository);
				Done(this);
				
				_id = daoOrderDetails.Id;
				_orderId = daoOrderDetails.OrderId;
				_productId = daoOrderDetails.ProductId;
				_quantity = daoOrderDetails.Quantity;
				_unitPrice = daoOrderDetails.UnitPrice;
				_discount = daoOrderDetails.Discount;
				_statusId = daoOrderDetails.StatusId;
				_dateAllocated = daoOrderDetails.DateAllocated;
				_purchaseOrderId = daoOrderDetails.PurchaseOrderId;
				_inventoryId = daoOrderDetails.InventoryId;
				_ctrVersion = daoOrderDetails.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "savenewBOOrderDetails");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one OrderDetails record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject(_iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction(_iOrderDetailsRepository, "updateBOOrderDetails");
			try
			{
				daoOrderDetails.Id = _id;
				daoOrderDetails.OrderId = _orderId;
				daoOrderDetails.ProductId = _productId;
				daoOrderDetails.Quantity = _quantity;
				daoOrderDetails.UnitPrice = _unitPrice;
				daoOrderDetails.Discount = _discount;
				daoOrderDetails.StatusId = _statusId;
				daoOrderDetails.DateAllocated = _dateAllocated;
				daoOrderDetails.PurchaseOrderId = _purchaseOrderId;
				daoOrderDetails.InventoryId = _inventoryId;
				daoOrderDetails.CtrVersion = _ctrVersion;
				_iOrderDetailsRepository.Update(daoOrderDetails);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				
				_id = daoOrderDetails.Id;
				_orderId = daoOrderDetails.OrderId;
				_productId = daoOrderDetails.ProductId;
				_quantity = daoOrderDetails.Quantity;
				_unitPrice = daoOrderDetails.UnitPrice;
				_discount = daoOrderDetails.Discount;
				_statusId = daoOrderDetails.StatusId;
				_dateAllocated = daoOrderDetails.DateAllocated;
				_purchaseOrderId = daoOrderDetails.PurchaseOrderId;
				_inventoryId = daoOrderDetails.InventoryId;
				_ctrVersion = daoOrderDetails.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "updateBOOrderDetails");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OrderDetails record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject(_iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction(_iOrderDetailsRepository, "deleteBOOrderDetails");
			try
			{
				daoOrderDetails.Id = _id;
				_iOrderDetailsRepository.Delete(daoOrderDetails);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "deleteBOOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns the collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOOrderDetails]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOOrderDetails> OrderDetailsCollection(IOrderDetailsRepository iOrderDetailsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOOrderDetails> boOrderDetailsCollection = new List<IBOOrderDetails>();
				IList<IDAOOrderDetails> daoOrderDetailsCollection = iOrderDetailsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
				
				return boOrderDetailsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///OrderDetailsCollectionCount
		///This method returns the collection count of BOOrderDetails objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrderDetailsCollectionCount(IOrderDetailsRepository iOrderDetailsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iOrderDetailsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///OrderDetailsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOOrderDetails>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iOrderDetailsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrderDetailsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOOrderDetails> daoOrderDetailsCollection = _iOrderDetailsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOOrderDetails resdaoOrderDetails in daoOrderDetailsCollection)
					boOrderDetailsCollection.Add((T)(object)new BOOrderDetails(resdaoOrderDetails));
				
				return boOrderDetailsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOOrderDetails objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOOrderDetails> boOrderDetailsCollection = new List<IBOOrderDetails>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iOrderDetailsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderDetailsRepository OrderDetailsRepository
		{
			set
			{
				_iOrderDetailsRepository = value;
			}
		}
		
		public virtual string Id
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string OrderId
		{
			get
			{
				 return _orderId;
			}
			set
			{
				_orderId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductId
		{
			get
			{
				 return _productId;
			}
			set
			{
				_productId = value;
				_isDirty = true;
			}
		}
		
		public virtual string Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual string UnitPrice
		{
			get
			{
				 return _unitPrice;
			}
			set
			{
				_unitPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual double? Discount
		{
			get
			{
				 return _discount;
			}
			set
			{
				_discount = value;
				_isDirty = true;
			}
		}
		
		public virtual string StatusId
		{
			get
			{
				 return _statusId;
			}
			set
			{
				_statusId = value;
				_isDirty = true;
			}
		}
		
		public virtual string DateAllocated
		{
			get
			{
				 return _dateAllocated;
			}
			set
			{
				_dateAllocated = value;
				_isDirty = true;
			}
		}
		
		public virtual string PurchaseOrderId
		{
			get
			{
				 return _purchaseOrderId;
			}
			set
			{
				_purchaseOrderId = value;
				_isDirty = true;
			}
		}
		
		public virtual string InventoryId
		{
			get
			{
				 return _inventoryId;
			}
			set
			{
				_inventoryId = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iOrderDetailsRepository;	}
			set {	OrderDetailsRepository = (IOrderDetailsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
