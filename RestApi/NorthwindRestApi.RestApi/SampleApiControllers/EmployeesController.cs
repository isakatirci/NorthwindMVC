/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:13
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using System.Threading.Tasks;
using NorthwindRestApi.RestApi.SampleViewModels;
using NorthwindRestApi.Business;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.RestApi.SampleApiControllers
{
	public partial class EmployeesController : ApiController
	{
		protected IEmployeesRepository _iEmployeesRepository;

			// GET: api/Employees
		public async Task<IHttpActionResult> GetEmployees(int page = 0, int pageSize = 5)
		{
			int totalCount = 0;

			IList<EmployeesVm> listVm = new List<EmployeesVm>();
			var result = Task.Factory.StartNew(() => {

				ICriteria criteria = new Criteria<BOEmployees>(EmployeesRepository);
				totalCount = criteria.Count();

				IList<BOEmployees> listBOs = criteria
					.Add(new OrderBy("EmployeeID", OrderBy.OrderDirection.Ascending))
					.Skip(page * pageSize)
					.Take(pageSize)
					.List<BOEmployees>();

				foreach (var bo in listBOs)
					listVm.Add(new EmployeesVm(bo));
				return listVm;
			});
			await result;

			return Ok(new { Data = result.Result, Paging = new { Total = totalCount, Limit = pageSize, CurrentPage = page, PageCount = (int) Math.Ceiling((double)totalCount / pageSize) } });
		}

		// GET: api/Employees/5
		[ResponseType(typeof(EmployeesVm))]
		public async Task<IHttpActionResult> GetEmployees(Int32 id)
		{
			var result = Task.Factory.StartNew(() => {

				BOEmployees bo = new Criteria<BOEmployees>(EmployeesRepository)
				.Add(Expression.Eq("EmployeeID", id))
				.SingleOrDefault<BOEmployees>();
				return bo == null ? null : new EmployeesVm(bo);

			});
			await result;
			if (result.Result == null)
			{
				return NotFound();
			}

			return Ok(result.Result);
		}

		// PUT: api/Employees/5
		[ResponseType(typeof(void))]
		public async Task<IHttpActionResult> PutEmployees(Int32 id, EmployeesVm vm)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest(ModelState);
			}

			if (id != vm.EmployeeID)
			{
				return BadRequest();
			}

			var result = Task.Factory.StartNew(() => {

				IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { EmployeesRepository }); 
				var bo = (BOEmployees)vm.BOEmployees(EmployeesRepository);
				uow.Update(bo);

				string err;
				if (!uow.Commit(out err))
				{
					var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
					throw new HttpResponseException(resp);
				}
				return true;
			});
			await result;
			if (!result.Result)
				return NotFound();

			return StatusCode(HttpStatusCode.NoContent);
		}

		// POST: api/Employees
		[ResponseType(typeof(EmployeesVm))]
		public async Task<IHttpActionResult> PostEmployees(EmployeesVm vm)
		{
			if (!ModelState.IsValid)
			{
				return BadRequest(ModelState);
			}

			var result = Task.Factory.StartNew(() =>
			{
				IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { EmployeesRepository }); 
				var bo = (BOEmployees)vm.BOEmployees(EmployeesRepository);
				uow.Create(bo);

				string err;
				if (!uow.Commit(out err))
				{
					var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
					throw new HttpResponseException(resp);
				}
				vm = new EmployeesVm(bo);
				return true;
			});
			await result;
			return CreatedAtRoute("DefaultApi", new { id = vm.EmployeeID }, vm);
		}

		// DELETE: api/Employees/5
		[ResponseType(typeof(EmployeesVm))]
		public async Task<IHttpActionResult> DeleteEmployees(Int32 id)
		{
			var result = Task.Factory.StartNew(() =>
			{
				 IUnitOfWork uow = new UnitOfWorkImp(new IRepositoryConnection[] { EmployeesRepository }); 
				var bo = new BOEmployees();
				bo.Repository = EmployeesRepository;
				bo.Init(id);
				
				uow.Delete(bo);

				string err;
				if (!uow.Commit(out err))
				{
					var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
					throw new HttpResponseException(resp);
				}
				return true;
			});
			await result;
			if (!result.Result)
				return NotFound();

			return Ok(result.Result);
		}

		
		public IEmployeesRepository EmployeesRepository
		{
			get { return _iEmployeesRepository ?? (_iEmployeesRepository = RF.New().EmployeesRepository); }
			set { _iEmployeesRepository = value; }
		}
		

		protected override void Dispose(bool disposing)
		{
			if (disposing)
			{
			}
			base.Dispose(disposing);
		}
	}
}
