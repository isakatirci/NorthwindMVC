/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using Northwind.Data.Interfaces;

namespace Northwind.Data
{
	public partial class DAOProducts : zNorthwindConn_BaseData, IDAOProducts
	{
		#region member variables
		protected string _supplierİds;
		protected string _id;
		protected string _productCode;
		protected string _productName;
		protected string _description;
		protected string _standardCost;
		protected string _listPrice;
		protected string _reorderLevel;
		protected string _targetLevel;
		protected string _quantityPerUnit;
		protected string _discontinued;
		protected string _minimumReorderQuantity;
		protected string _category;
		protected byte[] _attachments;
		protected string _ctrVersion;
		#endregion

		#region class methods
		public DAOProducts()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table products based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOProducts
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public static IDAOProducts SelectOne(string id)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("products");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				DAOProducts retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOProducts();
					retObj._supplierİds					 = Convert.IsDBNull(dt.Rows[0]["supplier_ids"]) ? null : (string)dt.Rows[0]["supplier_ids"];
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? null : (string)dt.Rows[0]["id"];
					retObj._productCode					 = Convert.IsDBNull(dt.Rows[0]["product_code"]) ? null : (string)dt.Rows[0]["product_code"];
					retObj._productName					 = Convert.IsDBNull(dt.Rows[0]["product_name"]) ? null : (string)dt.Rows[0]["product_name"];
					retObj._description					 = Convert.IsDBNull(dt.Rows[0]["description"]) ? null : (string)dt.Rows[0]["description"];
					retObj._standardCost					 = Convert.IsDBNull(dt.Rows[0]["standard_cost"]) ? null : (string)dt.Rows[0]["standard_cost"];
					retObj._listPrice					 = Convert.IsDBNull(dt.Rows[0]["list_price"]) ? null : (string)dt.Rows[0]["list_price"];
					retObj._reorderLevel					 = Convert.IsDBNull(dt.Rows[0]["reorder_level"]) ? null : (string)dt.Rows[0]["reorder_level"];
					retObj._targetLevel					 = Convert.IsDBNull(dt.Rows[0]["target_level"]) ? null : (string)dt.Rows[0]["target_level"];
					retObj._quantityPerUnit					 = Convert.IsDBNull(dt.Rows[0]["quantity_per_unit"]) ? null : (string)dt.Rows[0]["quantity_per_unit"];
					retObj._discontinued					 = Convert.IsDBNull(dt.Rows[0]["discontinued"]) ? null : (string)dt.Rows[0]["discontinued"];
					retObj._minimumReorderQuantity					 = Convert.IsDBNull(dt.Rows[0]["minimum_reorder_quantity"]) ? null : (string)dt.Rows[0]["minimum_reorder_quantity"];
					retObj._category					 = Convert.IsDBNull(dt.Rows[0]["category"]) ? null : (string)dt.Rows[0]["category"];
					retObj._attachments					 = Convert.IsDBNull(dt.Rows[0]["attachments"]) ? null : (byte[])dt.Rows[0]["attachments"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? null : (string)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table products based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);


			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table products
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İDS", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_supplierİds?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_DESCRİPTİON", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_description?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_CODE", MySqlDbType.VarChar, 75, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _productCode));
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_NAME", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _productName));
				command.Parameters.Add(new MySqlParameter("?P_STANDARD_COST", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _standardCost));
				command.Parameters.Add(new MySqlParameter("?P_LİST_PRİCE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _listPrice));
				command.Parameters.Add(new MySqlParameter("?P_REORDER_LEVEL", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _reorderLevel));
				command.Parameters.Add(new MySqlParameter("?P_TARGET_LEVEL", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetLevel));
				command.Parameters.Add(new MySqlParameter("?P_QUANTİTY_PER_UNİT", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _quantityPerUnit));
				command.Parameters.Add(new MySqlParameter("?P_DİSCONTİNUED", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 3, 0, "", DataRowVersion.Proposed, _discontinued));
				command.Parameters.Add(new MySqlParameter("?P_MİNİMUM_REORDER_QUANTİTY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _minimumReorderQuantity));
				command.Parameters.Add(new MySqlParameter("?P_CATEGORY", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _category));
				command.Parameters.Add(new MySqlParameter("?P_ATTACHMENTS", MySqlDbType.LongBlob, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _attachments));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.Output, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_productCode					 = Convert.IsDBNull(command.Parameters["?P_PRODUCT_CODE"].Value) ? null : (string)command.Parameters["?P_PRODUCT_CODE"].Value;
				_productName					 = Convert.IsDBNull(command.Parameters["?P_PRODUCT_NAME"].Value) ? null : (string)command.Parameters["?P_PRODUCT_NAME"].Value;
				_standardCost					 = Convert.IsDBNull(command.Parameters["?P_STANDARD_COST"].Value) ? null : (string)command.Parameters["?P_STANDARD_COST"].Value;
				_listPrice					 = Convert.IsDBNull(command.Parameters["?P_LİST_PRİCE"].Value) ? null : (string)command.Parameters["?P_LİST_PRİCE"].Value;
				_reorderLevel					 = Convert.IsDBNull(command.Parameters["?P_REORDER_LEVEL"].Value) ? null : (string)command.Parameters["?P_REORDER_LEVEL"].Value;
				_targetLevel					 = Convert.IsDBNull(command.Parameters["?P_TARGET_LEVEL"].Value) ? null : (string)command.Parameters["?P_TARGET_LEVEL"].Value;
				_quantityPerUnit					 = Convert.IsDBNull(command.Parameters["?P_QUANTİTY_PER_UNİT"].Value) ? null : (string)command.Parameters["?P_QUANTİTY_PER_UNİT"].Value;
				_discontinued					 = Convert.IsDBNull(command.Parameters["?P_DİSCONTİNUED"].Value) ? null : (string)command.Parameters["?P_DİSCONTİNUED"].Value;
				_minimumReorderQuantity					 = Convert.IsDBNull(command.Parameters["?P_MİNİMUM_REORDER_QUANTİTY"].Value) ? null : (string)command.Parameters["?P_MİNİMUM_REORDER_QUANTİTY"].Value;
				_category					 = Convert.IsDBNull(command.Parameters["?P_CATEGORY"].Value) ? null : (string)command.Parameters["?P_CATEGORY"].Value;
				_attachments					 = Convert.IsDBNull(command.Parameters["?P_ATTACHMENTS"].Value) ? null : (byte[])command.Parameters["?P_ATTACHMENTS"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table products
		///</Summary>
		///<returns>
		///List-IDAOProducts.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<IDAOProducts> SelectAll()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("products");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOProducts> objList = new List<IDAOProducts>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOProducts retObj = new DAOProducts();
						retObj._supplierİds					 = Convert.IsDBNull(row["supplier_ids"]) ? null : (string)row["supplier_ids"];
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._productCode					 = Convert.IsDBNull(row["product_code"]) ? null : (string)row["product_code"];
						retObj._productName					 = Convert.IsDBNull(row["product_name"]) ? null : (string)row["product_name"];
						retObj._description					 = Convert.IsDBNull(row["description"]) ? null : (string)row["description"];
						retObj._standardCost					 = Convert.IsDBNull(row["standard_cost"]) ? null : (string)row["standard_cost"];
						retObj._listPrice					 = Convert.IsDBNull(row["list_price"]) ? null : (string)row["list_price"];
						retObj._reorderLevel					 = Convert.IsDBNull(row["reorder_level"]) ? null : (string)row["reorder_level"];
						retObj._targetLevel					 = Convert.IsDBNull(row["target_level"]) ? null : (string)row["target_level"];
						retObj._quantityPerUnit					 = Convert.IsDBNull(row["quantity_per_unit"]) ? null : (string)row["quantity_per_unit"];
						retObj._discontinued					 = Convert.IsDBNull(row["discontinued"]) ? null : (string)row["discontinued"];
						retObj._minimumReorderQuantity					 = Convert.IsDBNull(row["minimum_reorder_quantity"]) ? null : (string)row["minimum_reorder_quantity"];
						retObj._category					 = Convert.IsDBNull(row["category"]) ? null : (string)row["category"];
						retObj._attachments					 = Convert.IsDBNull(row["attachments"]) ? null : (byte[])row["attachments"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiproducts
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("products");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_FİELDSFİELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "supplier_ids", true) == 0) lst.Add(Convert.IsDBNull(row["supplier_ids"]) ? null : (string)row["supplier_ids"]);
						if (string.Compare(projection.Member, "id", true) == 0) lst.Add(Convert.IsDBNull(row["id"]) ? null : (string)row["id"]);
						if (string.Compare(projection.Member, "product_code", true) == 0) lst.Add(Convert.IsDBNull(row["product_code"]) ? null : (string)row["product_code"]);
						if (string.Compare(projection.Member, "product_name", true) == 0) lst.Add(Convert.IsDBNull(row["product_name"]) ? null : (string)row["product_name"]);
						if (string.Compare(projection.Member, "description", true) == 0) lst.Add(Convert.IsDBNull(row["description"]) ? null : (string)row["description"]);
						if (string.Compare(projection.Member, "standard_cost", true) == 0) lst.Add(Convert.IsDBNull(row["standard_cost"]) ? null : (string)row["standard_cost"]);
						if (string.Compare(projection.Member, "list_price", true) == 0) lst.Add(Convert.IsDBNull(row["list_price"]) ? null : (string)row["list_price"]);
						if (string.Compare(projection.Member, "reorder_level", true) == 0) lst.Add(Convert.IsDBNull(row["reorder_level"]) ? null : (string)row["reorder_level"]);
						if (string.Compare(projection.Member, "target_level", true) == 0) lst.Add(Convert.IsDBNull(row["target_level"]) ? null : (string)row["target_level"]);
						if (string.Compare(projection.Member, "quantity_per_unit", true) == 0) lst.Add(Convert.IsDBNull(row["quantity_per_unit"]) ? null : (string)row["quantity_per_unit"]);
						if (string.Compare(projection.Member, "discontinued", true) == 0) lst.Add(Convert.IsDBNull(row["discontinued"]) ? null : (string)row["discontinued"]);
						if (string.Compare(projection.Member, "minimum_reorder_quantity", true) == 0) lst.Add(Convert.IsDBNull(row["minimum_reorder_quantity"]) ? null : (string)row["minimum_reorder_quantity"]);
						if (string.Compare(projection.Member, "category", true) == 0) lst.Add(Convert.IsDBNull(row["category"]) ? null : (string)row["category"]);
						if (string.Compare(projection.Member, "attachments", true) == 0) lst.Add(Convert.IsDBNull(row["attachments"]) ? null : (byte[])row["attachments"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api products
		///</Summary>
		///<returns>
		///List-IDAOProducts.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<IDAOProducts> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("products");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOProducts> objList = new List<IDAOProducts>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOProducts retObj = new DAOProducts();
						retObj._supplierİds					 = Convert.IsDBNull(row["supplier_ids"]) ? null : (string)row["supplier_ids"];
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._productCode					 = Convert.IsDBNull(row["product_code"]) ? null : (string)row["product_code"];
						retObj._productName					 = Convert.IsDBNull(row["product_name"]) ? null : (string)row["product_name"];
						retObj._description					 = Convert.IsDBNull(row["description"]) ? null : (string)row["description"];
						retObj._standardCost					 = Convert.IsDBNull(row["standard_cost"]) ? null : (string)row["standard_cost"];
						retObj._listPrice					 = Convert.IsDBNull(row["list_price"]) ? null : (string)row["list_price"];
						retObj._reorderLevel					 = Convert.IsDBNull(row["reorder_level"]) ? null : (string)row["reorder_level"];
						retObj._targetLevel					 = Convert.IsDBNull(row["target_level"]) ? null : (string)row["target_level"];
						retObj._quantityPerUnit					 = Convert.IsDBNull(row["quantity_per_unit"]) ? null : (string)row["quantity_per_unit"];
						retObj._discontinued					 = Convert.IsDBNull(row["discontinued"]) ? null : (string)row["discontinued"];
						retObj._minimumReorderQuantity					 = Convert.IsDBNull(row["minimum_reorder_quantity"]) ? null : (string)row["minimum_reorder_quantity"];
						retObj._category					 = Convert.IsDBNull(row["category"]) ? null : (string)row["category"];
						retObj._attachments					 = Convert.IsDBNull(row["attachments"]) ? null : (byte[])row["attachments"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api products
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table products based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_products_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İDS", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_supplierİds?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_DESCRİPTİON", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_description?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_CODE", MySqlDbType.VarChar, 75, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _productCode));
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_NAME", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _productName));
				command.Parameters.Add(new MySqlParameter("?P_STANDARD_COST", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _standardCost));
				command.Parameters.Add(new MySqlParameter("?P_LİST_PRİCE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _listPrice));
				command.Parameters.Add(new MySqlParameter("?P_REORDER_LEVEL", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _reorderLevel));
				command.Parameters.Add(new MySqlParameter("?P_TARGET_LEVEL", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _targetLevel));
				command.Parameters.Add(new MySqlParameter("?P_QUANTİTY_PER_UNİT", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _quantityPerUnit));
				command.Parameters.Add(new MySqlParameter("?P_DİSCONTİNUED", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 3, 0, "", DataRowVersion.Proposed, _discontinued));
				command.Parameters.Add(new MySqlParameter("?P_MİNİMUM_REORDER_QUANTİTY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _minimumReorderQuantity));
				command.Parameters.Add(new MySqlParameter("?P_CATEGORY", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _category));
				command.Parameters.Add(new MySqlParameter("?P_ATTACHMENTS", MySqlDbType.LongBlob, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _attachments));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_productCode					 = Convert.IsDBNull(command.Parameters["?P_PRODUCT_CODE"].Value) ? null : (string)command.Parameters["?P_PRODUCT_CODE"].Value;
				_productName					 = Convert.IsDBNull(command.Parameters["?P_PRODUCT_NAME"].Value) ? null : (string)command.Parameters["?P_PRODUCT_NAME"].Value;
				_standardCost					 = Convert.IsDBNull(command.Parameters["?P_STANDARD_COST"].Value) ? null : (string)command.Parameters["?P_STANDARD_COST"].Value;
				_listPrice					 = Convert.IsDBNull(command.Parameters["?P_LİST_PRİCE"].Value) ? null : (string)command.Parameters["?P_LİST_PRİCE"].Value;
				_reorderLevel					 = Convert.IsDBNull(command.Parameters["?P_REORDER_LEVEL"].Value) ? null : (string)command.Parameters["?P_REORDER_LEVEL"].Value;
				_targetLevel					 = Convert.IsDBNull(command.Parameters["?P_TARGET_LEVEL"].Value) ? null : (string)command.Parameters["?P_TARGET_LEVEL"].Value;
				_quantityPerUnit					 = Convert.IsDBNull(command.Parameters["?P_QUANTİTY_PER_UNİT"].Value) ? null : (string)command.Parameters["?P_QUANTİTY_PER_UNİT"].Value;
				_discontinued					 = Convert.IsDBNull(command.Parameters["?P_DİSCONTİNUED"].Value) ? null : (string)command.Parameters["?P_DİSCONTİNUED"].Value;
				_minimumReorderQuantity					 = Convert.IsDBNull(command.Parameters["?P_MİNİMUM_REORDER_QUANTİTY"].Value) ? null : (string)command.Parameters["?P_MİNİMUM_REORDER_QUANTİTY"].Value;
				_category					 = Convert.IsDBNull(command.Parameters["?P_CATEGORY"].Value) ? null : (string)command.Parameters["?P_CATEGORY"].Value;
				_attachments					 = Convert.IsDBNull(command.Parameters["?P_ATTACHMENTS"].Value) ? null : (byte[])command.Parameters["?P_ATTACHMENTS"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public string Supplierİds
		{
			get
			{
				return _supplierİds;
			}
			set
			{
				_supplierİds = value;
			}
		}
		public string İd
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}
		public string ProductCode
		{
			get
			{
				return _productCode;
			}
			set
			{
				_productCode = value;
			}
		}
		public string ProductName
		{
			get
			{
				return _productName;
			}
			set
			{
				_productName = value;
			}
		}
		public string Description
		{
			get
			{
				return _description;
			}
			set
			{
				_description = value;
			}
		}
		public string StandardCost
		{
			get
			{
				return _standardCost;
			}
			set
			{
				_standardCost = value;
			}
		}
		public string ListPrice
		{
			get
			{
				return _listPrice;
			}
			set
			{
				_listPrice = value;
			}
		}
		public string ReorderLevel
		{
			get
			{
				return _reorderLevel;
			}
			set
			{
				_reorderLevel = value;
			}
		}
		public string TargetLevel
		{
			get
			{
				return _targetLevel;
			}
			set
			{
				_targetLevel = value;
			}
		}
		public string QuantityPerUnit
		{
			get
			{
				return _quantityPerUnit;
			}
			set
			{
				_quantityPerUnit = value;
			}
		}
		public string Discontinued
		{
			get
			{
				return _discontinued;
			}
			set
			{
				_discontinued = value;
			}
		}
		public string MinimumReorderQuantity
		{
			get
			{
				return _minimumReorderQuantity;
			}
			set
			{
				_minimumReorderQuantity = value;
			}
		}
		public string Category
		{
			get
			{
				return _category;
			}
			set
			{
				_category = value;
			}
		}
		public byte[] Attachments
		{
			get
			{
				return _attachments;
			}
			set
			{
				_attachments = value;
			}
		}
		public string CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}
