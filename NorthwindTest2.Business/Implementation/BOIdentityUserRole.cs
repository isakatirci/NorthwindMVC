/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:09:42
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest2.Data;
using NorthwindTest2.Data.Interfaces;
using NorthwindTest2.Business.Interfaces;
using NorthwindTest2.Business.Repository.Interfaces;

namespace NorthwindTest2.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOIdentityUserRole.
	///</Summary>
	public partial class BOIdentityUserRole : zNorthwindTest2Conn_BaseBusiness, IBOIdentityUserRole, IQueryableCollection
	{
		#region member variables
		protected Int32? _userId;
		protected Int32? _roleId;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IIdentityUserRoleRepository _iIdentityUserRoleRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOIdentityUserRole()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 userId, Int32 roleId
		///</parameters>
		public void Init(Int32 userId, Int32 roleId)
		{
			try
			{
				IDAOIdentityUserRole daoIdentityUserRole = _iIdentityUserRoleRepository.SelectOne(userId, roleId);
				_userId = daoIdentityUserRole.UserId;
				_roleId = daoIdentityUserRole.RoleId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOIdentityUserRole
		///</parameters>
		protected internal BOIdentityUserRole(IDAOIdentityUserRole daoIdentityUserRole)
		{
			try
			{
				_userId = daoIdentityUserRole.UserId;
				_roleId = daoIdentityUserRole.RoleId;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new IdentityUserRole record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			IDAOIdentityUserRole daoIdentityUserRole = _iIdentityUserRoleRepository.New();
			RegisterDataObject( _iIdentityUserRoleRepository, _iIdentityUserRoleRepository.BaseData(daoIdentityUserRole));
			BeginTransaction( _iIdentityUserRoleRepository, "savenewBOIdentityUserRole");
			try
			{
				daoIdentityUserRole.UserId = _userId;
				daoIdentityUserRole.RoleId = _roleId;
				_iIdentityUserRoleRepository.Insert(daoIdentityUserRole);
				CommitTransaction( _iIdentityUserRoleRepository);
				
				_userId = daoIdentityUserRole.UserId;
				_roleId = daoIdentityUserRole.RoleId;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction(_iIdentityUserRoleRepository, "savenewBOIdentityUserRole");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one IdentityUserRole record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			IDAOIdentityUserRole daoIdentityUserRole = _iIdentityUserRoleRepository.New();
			RegisterDataObject(_iIdentityUserRoleRepository, _iIdentityUserRoleRepository.BaseData(daoIdentityUserRole));
			BeginTransaction(_iIdentityUserRoleRepository, "deleteBOIdentityUserRole");
			try
			{
				daoIdentityUserRole.UserId = _userId;
				daoIdentityUserRole.RoleId = _roleId;
				_iIdentityUserRoleRepository.Delete(daoIdentityUserRole);
				CommitTransaction(_iIdentityUserRoleRepository);
			}
			catch
			{
				RollbackTransaction(_iIdentityUserRoleRepository, "deleteBOIdentityUserRole");
				throw;
			}
		}
		
		///<Summary>
		///IdentityUserRoleCollection
		///This method returns the collection of BOIdentityUserRole objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityUserRole]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOIdentityUserRole> IdentityUserRoleCollection(IIdentityUserRoleRepository iIdentityUserRoleRepository)
		{
			try
			{
				IList<IBOIdentityUserRole> boIdentityUserRoleCollection = new List<IBOIdentityUserRole>();
				IList<IDAOIdentityUserRole> daoIdentityUserRoleCollection = iIdentityUserRoleRepository.SelectAll();
				
				foreach(IDAOIdentityUserRole daoIdentityUserRole in daoIdentityUserRoleCollection)
					boIdentityUserRoleCollection.Add(new BOIdentityUserRole(daoIdentityUserRole));
				
				return boIdentityUserRoleCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///IdentityUserRoleCollectionCount
		///This method returns the collection count of BOIdentityUserRole objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 IdentityUserRoleCollectionCount(IIdentityUserRoleRepository iIdentityUserRoleRepository)
		{
			try
			{
				Int32 objCount = iIdentityUserRoleRepository.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///IdentityUserRoleCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOIdentityUserRole>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iIdentityUserRoleRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boIdentityUserRoleCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOIdentityUserRole> daoIdentityUserRoleCollection = _iIdentityUserRoleRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOIdentityUserRole resdaoIdentityUserRole in daoIdentityUserRoleCollection)
					boIdentityUserRoleCollection.Add((T)(object)new BOIdentityUserRole(resdaoIdentityUserRole));
				
				return boIdentityUserRoleCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOIdentityUserRole objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOIdentityUserRole> boIdentityUserRoleCollection = new List<IBOIdentityUserRole>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iIdentityUserRoleRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		public virtual IIdentityUserRoleRepository IdentityUserRoleRepository
		{
			set
			{
				_iIdentityUserRoleRepository = value;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RoleId
		{
			get
			{
				 return _roleId;
			}
			set
			{
				_roleId = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return (object) _iIdentityUserRoleRepository;	}
			set {	IdentityUserRoleRepository = (IIdentityUserRoleRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
