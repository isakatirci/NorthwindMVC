/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOEmployeePrivileges.
	///</Summary>
	public partial class BOEmployeePrivileges : zNorthwindConn_BaseBusiness, IBOEmployeePrivileges, IQueryableCollection
	{
		#region member variables
		protected string _employeeİd;
		protected string _privilegeİd;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IEmployeePrivilegesRepository _iEmployeePrivilegesRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOEmployeePrivileges()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string employeeİd, string privilegeİd
		///</parameters>
		public void Init(string employeeİd, string privilegeİd)
		{
			try
			{
				IDAOEmployeePrivileges daoEmployeePrivileges = _iEmployeePrivilegesRepository.SelectOne(employeeİd, privilegeİd);
				_employeeİd = daoEmployeePrivileges.Employeeİd;
				_privilegeİd = daoEmployeePrivileges.Privilegeİd;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOEmployeePrivileges
		///</parameters>
		protected internal BOEmployeePrivileges(IDAOEmployeePrivileges daoEmployeePrivileges)
		{
			try
			{
				_employeeİd = daoEmployeePrivileges.Employeeİd;
				_privilegeİd = daoEmployeePrivileges.Privilegeİd;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new EmployeePrivileges record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOEmployeePrivileges daoEmployeePrivileges = _iEmployeePrivilegesRepository.New();
			RegisterDataObject( _iEmployeePrivilegesRepository, _iEmployeePrivilegesRepository.BaseData(daoEmployeePrivileges));
			BeginTransaction( _iEmployeePrivilegesRepository, "savenewBOEmployeePrivileges");
			try
			{
				daoEmployeePrivileges.Employeeİd = _employeeİd;
				daoEmployeePrivileges.Privilegeİd = _privilegeİd;
				_iEmployeePrivilegesRepository.Insert(daoEmployeePrivileges);
				CommitTransaction( _iEmployeePrivilegesRepository);
				Done(this);
				
				_employeeİd = daoEmployeePrivileges.Employeeİd;
				_privilegeİd = daoEmployeePrivileges.Privilegeİd;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeePrivilegesRepository, "savenewBOEmployeePrivileges");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one EmployeePrivileges record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOEmployeePrivileges daoEmployeePrivileges = _iEmployeePrivilegesRepository.New();
			RegisterDataObject(_iEmployeePrivilegesRepository, _iEmployeePrivilegesRepository.BaseData(daoEmployeePrivileges));
			BeginTransaction(_iEmployeePrivilegesRepository, "deleteBOEmployeePrivileges");
			try
			{
				daoEmployeePrivileges.Employeeİd = _employeeİd;
				daoEmployeePrivileges.Privilegeİd = _privilegeİd;
				_iEmployeePrivilegesRepository.Delete(daoEmployeePrivileges);
				CommitTransaction(_iEmployeePrivilegesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeePrivilegesRepository, "deleteBOEmployeePrivileges");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///EmployeePrivilegesCollection
		///This method returns the collection of BOEmployeePrivileges objects
		///</Summary>
		///<returns>
		///IList[IBOEmployeePrivileges]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOEmployeePrivileges> EmployeePrivilegesCollection(IEmployeePrivilegesRepository iEmployeePrivilegesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOEmployeePrivileges> boEmployeePrivilegesCollection = new List<IBOEmployeePrivileges>();
				IList<IDAOEmployeePrivileges> daoEmployeePrivilegesCollection = iEmployeePrivilegesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOEmployeePrivileges daoEmployeePrivileges in daoEmployeePrivilegesCollection)
					boEmployeePrivilegesCollection.Add(new BOEmployeePrivileges(daoEmployeePrivileges));
				
				return boEmployeePrivilegesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///EmployeePrivilegesCollectionCount
		///This method returns the collection count of BOEmployeePrivileges objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 EmployeePrivilegesCollectionCount(IEmployeePrivilegesRepository iEmployeePrivilegesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iEmployeePrivilegesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///EmployeePrivilegesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOEmployeePrivileges>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iEmployeePrivilegesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boEmployeePrivilegesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOEmployeePrivileges> daoEmployeePrivilegesCollection = _iEmployeePrivilegesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOEmployeePrivileges resdaoEmployeePrivileges in daoEmployeePrivilegesCollection)
					boEmployeePrivilegesCollection.Add((T)(object)new BOEmployeePrivileges(resdaoEmployeePrivileges));
				
				return boEmployeePrivilegesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOEmployeePrivileges objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOEmployeePrivileges> boEmployeePrivilegesCollection = new List<IBOEmployeePrivileges>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iEmployeePrivilegesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeePrivilegesRepository EmployeePrivilegesRepository
		{
			set
			{
				_iEmployeePrivilegesRepository = value;
			}
		}
		
		public virtual string Employeeİd
		{
			get
			{
				 return _employeeİd;
			}
			set
			{
				_employeeİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Privilegeİd
		{
			get
			{
				 return _privilegeİd;
			}
			set
			{
				_privilegeİd = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iEmployeePrivilegesRepository;	}
			set {	EmployeePrivilegesRepository = (IEmployeePrivilegesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
