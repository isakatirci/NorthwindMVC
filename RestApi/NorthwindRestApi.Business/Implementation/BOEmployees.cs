/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOEmployees.
	///It maintains a collection of BOEmployees,BOEmployeeTerritories,BOOrders objects.
	///</Summary>
	public partial class BOEmployees : zNorthwindRestApiConn_BaseBusiness, IBOEmployees, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _employeeID;
		protected string _lastName;
		protected string _firstName;
		protected string _title;
		protected string _titleOfCourtesy;
		protected DateTime? _birthDate;
		protected DateTime? _hireDate;
		protected string _address;
		protected string _city;
		protected string _region;
		protected string _postalCode;
		protected string _country;
		protected string _homePhone;
		protected string _extension;
		protected byte[] _photo;
		protected string _notes;
		protected Int32? _reportsTo;
		protected string _photoPath;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOEmployees> _boReportsToEmployeesCollection;
		List<IBOEmployeeTerritories> _boEmployeeTerritoriesCollection;
		List<IBOOrders> _boOrdersCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IEmployeesRepository _iEmployeesRepository;
		protected IEmployeeTerritoriesRepository _iEmployeeTerritoriesRepository;
		protected IOrdersRepository _iOrdersRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOEmployees()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 employeeID
		///</parameters>
		public void Init(Int32 employeeID)
		{
			try
			{
				IDAOEmployees daoEmployees = _iEmployeesRepository.SelectOne(employeeID);
				_employeeID = daoEmployees.EmployeeID;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_title = daoEmployees.Title;
				_titleOfCourtesy = daoEmployees.TitleOfCourtesy;
				_birthDate = daoEmployees.BirthDate;
				_hireDate = daoEmployees.HireDate;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_region = daoEmployees.Region;
				_postalCode = daoEmployees.PostalCode;
				_country = daoEmployees.Country;
				_homePhone = daoEmployees.HomePhone;
				_extension = daoEmployees.Extension;
				_photo = daoEmployees.Photo;
				_notes = daoEmployees.Notes;
				_reportsTo = daoEmployees.ReportsTo;
				_photoPath = daoEmployees.PhotoPath;
				_ctrVersion = daoEmployees.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOEmployees
		///</parameters>
		protected internal BOEmployees(IDAOEmployees daoEmployees)
		{
			try
			{
				_employeeID = daoEmployees.EmployeeID;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_title = daoEmployees.Title;
				_titleOfCourtesy = daoEmployees.TitleOfCourtesy;
				_birthDate = daoEmployees.BirthDate;
				_hireDate = daoEmployees.HireDate;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_region = daoEmployees.Region;
				_postalCode = daoEmployees.PostalCode;
				_country = daoEmployees.Country;
				_homePhone = daoEmployees.HomePhone;
				_extension = daoEmployees.Extension;
				_photo = daoEmployees.Photo;
				_notes = daoEmployees.Notes;
				_reportsTo = daoEmployees.ReportsTo;
				_photoPath = daoEmployees.PhotoPath;
				_ctrVersion = daoEmployees.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Employees record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject( _iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction( _iEmployeesRepository, "savenewBOEmployees");
			try
			{
				daoEmployees.LastName = _lastName;
				daoEmployees.FirstName = _firstName;
				daoEmployees.Title = _title;
				daoEmployees.TitleOfCourtesy = _titleOfCourtesy;
				daoEmployees.BirthDate = _birthDate;
				daoEmployees.HireDate = _hireDate;
				daoEmployees.Address = _address;
				daoEmployees.City = _city;
				daoEmployees.Region = _region;
				daoEmployees.PostalCode = _postalCode;
				daoEmployees.Country = _country;
				daoEmployees.HomePhone = _homePhone;
				daoEmployees.Extension = _extension;
				daoEmployees.Photo = _photo;
				daoEmployees.Notes = _notes;
				daoEmployees.ReportsTo = _reportsTo;
				daoEmployees.PhotoPath = _photoPath;
				_iEmployeesRepository.Insert(daoEmployees);
				CommitTransaction( _iEmployeesRepository);
				Done(this);
				
				_employeeID = daoEmployees.EmployeeID;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_title = daoEmployees.Title;
				_titleOfCourtesy = daoEmployees.TitleOfCourtesy;
				_birthDate = daoEmployees.BirthDate;
				_hireDate = daoEmployees.HireDate;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_region = daoEmployees.Region;
				_postalCode = daoEmployees.PostalCode;
				_country = daoEmployees.Country;
				_homePhone = daoEmployees.HomePhone;
				_extension = daoEmployees.Extension;
				_photo = daoEmployees.Photo;
				_notes = daoEmployees.Notes;
				_reportsTo = daoEmployees.ReportsTo;
				_photoPath = daoEmployees.PhotoPath;
				_ctrVersion = daoEmployees.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "savenewBOEmployees");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Employees record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject(_iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction(_iEmployeesRepository, "updateBOEmployees");
			try
			{
				daoEmployees.EmployeeID = _employeeID;
				daoEmployees.LastName = _lastName;
				daoEmployees.FirstName = _firstName;
				daoEmployees.Title = _title;
				daoEmployees.TitleOfCourtesy = _titleOfCourtesy;
				daoEmployees.BirthDate = _birthDate;
				daoEmployees.HireDate = _hireDate;
				daoEmployees.Address = _address;
				daoEmployees.City = _city;
				daoEmployees.Region = _region;
				daoEmployees.PostalCode = _postalCode;
				daoEmployees.Country = _country;
				daoEmployees.HomePhone = _homePhone;
				daoEmployees.Extension = _extension;
				daoEmployees.Photo = _photo;
				daoEmployees.Notes = _notes;
				daoEmployees.ReportsTo = _reportsTo;
				daoEmployees.PhotoPath = _photoPath;
				daoEmployees.CtrVersion = _ctrVersion;
				_iEmployeesRepository.Update(daoEmployees);
				CommitTransaction(_iEmployeesRepository);
				Done(this);
				
				_employeeID = daoEmployees.EmployeeID;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_title = daoEmployees.Title;
				_titleOfCourtesy = daoEmployees.TitleOfCourtesy;
				_birthDate = daoEmployees.BirthDate;
				_hireDate = daoEmployees.HireDate;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_region = daoEmployees.Region;
				_postalCode = daoEmployees.PostalCode;
				_country = daoEmployees.Country;
				_homePhone = daoEmployees.HomePhone;
				_extension = daoEmployees.Extension;
				_photo = daoEmployees.Photo;
				_notes = daoEmployees.Notes;
				_reportsTo = daoEmployees.ReportsTo;
				_photoPath = daoEmployees.PhotoPath;
				_ctrVersion = daoEmployees.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "updateBOEmployees");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Employees record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject(_iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction(_iEmployeesRepository, "deleteBOEmployees");
			try
			{
				daoEmployees.EmployeeID = _employeeID;
				_iEmployeesRepository.Delete(daoEmployees);
				CommitTransaction(_iEmployeesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "deleteBOEmployees");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///EmployeesCollection
		///This method returns the collection of BOEmployees objects
		///</Summary>
		///<returns>
		///IList[IBOEmployees]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOEmployees> EmployeesCollection(IEmployeesRepository iEmployeesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOEmployees> boEmployeesCollection = new List<IBOEmployees>();
				IList<IDAOEmployees> daoEmployeesCollection = iEmployeesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOEmployees daoEmployees in daoEmployeesCollection)
					boEmployeesCollection.Add(new BOEmployees(daoEmployees));
				
				return boEmployeesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///EmployeesCollectionCount
		///This method returns the collection count of BOEmployees objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 EmployeesCollectionCount(IEmployeesRepository iEmployeesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iEmployeesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///EmployeesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOEmployees>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iEmployeesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boEmployeesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOEmployees> daoEmployeesCollection = _iEmployeesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOEmployees resdaoEmployees in daoEmployeesCollection)
					boEmployeesCollection.Add((T)(object)new BOEmployees(resdaoEmployees));
				
				return boEmployeesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOEmployees objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOEmployees> boEmployeesCollection = new List<IBOEmployees>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iEmployeesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///ReportsToEmployeesCollection
		///This method returns its collection of BOEmployees objects
		///</Summary>
		///<returns>
		///IList[IBOEmployees]
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual IList<IBOEmployees> ReportsToEmployeesCollection()
		{
			Doing(this);
			try
			{
				if(_boReportsToEmployeesCollection == null)
					LoadReportsToEmployeesCollection();
				return _boReportsToEmployeesCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///EmployeeTerritoriesCollection
		///This method returns its collection of BOEmployeeTerritories objects
		///</Summary>
		///<returns>
		///IList[IBOEmployeeTerritories]
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual IList<IBOEmployeeTerritories> EmployeeTerritoriesCollection()
		{
			Doing(this);
			try
			{
				if(_boEmployeeTerritoriesCollection == null)
					LoadEmployeeTerritoriesCollection();
				return _boEmployeeTerritoriesCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///OrdersCollection
		///This method returns its collection of BOOrders objects
		///</Summary>
		///<returns>
		///IList[IBOOrders]
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual IList<IBOOrders> OrdersCollection()
		{
			Doing(this);
			try
			{
				if(_boOrdersCollection == null)
					LoadOrdersCollection();
				return _boOrdersCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadReportsToEmployeesCollection
		///This method loads the internal collection of BOEmployees objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadReportsToEmployeesCollection()
		{
			Doing(this);
			try
			{
				_boReportsToEmployeesCollection = new List<IBOEmployees>();
				IList<IDAOEmployees> daoEmployeesCollection = _iEmployeesRepository.SelectAllByReportsTo(_employeeID.Value);
				Done(this);
				
				foreach(IDAOEmployees daoEmployees in daoEmployeesCollection)
					_boReportsToEmployeesCollection.Add(new BOEmployees(daoEmployees));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddReportsToEmployees
		///This method persists a BOEmployees object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual void AddReportsToEmployees(IBOEmployees boEmployees)
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject(_iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction(_iEmployeesRepository, "addReportsToEmployees");
			try
			{
				daoEmployees.EmployeeID = boEmployees.EmployeeID;
				daoEmployees.LastName = boEmployees.LastName;
				daoEmployees.FirstName = boEmployees.FirstName;
				daoEmployees.Title = boEmployees.Title;
				daoEmployees.TitleOfCourtesy = boEmployees.TitleOfCourtesy;
				daoEmployees.BirthDate = boEmployees.BirthDate;
				daoEmployees.HireDate = boEmployees.HireDate;
				daoEmployees.Address = boEmployees.Address;
				daoEmployees.City = boEmployees.City;
				daoEmployees.Region = boEmployees.Region;
				daoEmployees.PostalCode = boEmployees.PostalCode;
				daoEmployees.Country = boEmployees.Country;
				daoEmployees.HomePhone = boEmployees.HomePhone;
				daoEmployees.Extension = boEmployees.Extension;
				daoEmployees.Photo = boEmployees.Photo;
				daoEmployees.Notes = boEmployees.Notes;
				daoEmployees.PhotoPath = boEmployees.PhotoPath;
				daoEmployees.ReportsTo = _employeeID.Value;
				_iEmployeesRepository.Insert(daoEmployees);
				CommitTransaction(_iEmployeesRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boEmployees = new BOEmployees(daoEmployees);
				if(_boReportsToEmployeesCollection != null)
					_boReportsToEmployeesCollection.Add(boEmployees);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "addReportsToEmployees");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllReportsToEmployees
		///This method deletes all BOEmployees objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllReportsToEmployees()
		{
			Doing(this);
			RegisterDataObject(_iEmployeesRepository, null);
			BeginTransaction(_iEmployeesRepository, "deleteAllReportsToEmployees");
			try
			{
				_iEmployeesRepository.DeleteAllByReportsTo(_employeeID.Value);
				CommitTransaction(_iEmployeesRepository);
				Done(this);
				if(_boReportsToEmployeesCollection != null)
				{
					_boReportsToEmployeesCollection.Clear();
					_boReportsToEmployeesCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "deleteAllReportsToEmployees");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadEmployeeTerritoriesCollection
		///This method loads the internal collection of BOEmployeeTerritories objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadEmployeeTerritoriesCollection()
		{
			Doing(this);
			try
			{
				_boEmployeeTerritoriesCollection = new List<IBOEmployeeTerritories>();
				IList<IDAOEmployeeTerritories> daoEmployeeTerritoriesCollection = _iEmployeeTerritoriesRepository.SelectAllByEmployeeID(_employeeID.Value);
				Done(this);
				
				foreach(IDAOEmployeeTerritories daoEmployeeTerritories in daoEmployeeTerritoriesCollection)
					_boEmployeeTerritoriesCollection.Add(new BOEmployeeTerritories(daoEmployeeTerritories));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddEmployeeTerritories
		///This method persists a BOEmployeeTerritories object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployeeTerritories
		///</parameters>
		public virtual void AddEmployeeTerritories(IBOEmployeeTerritories boEmployeeTerritories)
		{
			Doing(this);
			IDAOEmployeeTerritories daoEmployeeTerritories = _iEmployeeTerritoriesRepository.New();
			RegisterDataObject(_iEmployeeTerritoriesRepository, _iEmployeeTerritoriesRepository.BaseData(daoEmployeeTerritories));
			BeginTransaction(_iEmployeeTerritoriesRepository, "addEmployeeTerritories");
			try
			{
				daoEmployeeTerritories.TerritoryID = boEmployeeTerritories.TerritoryID;
				daoEmployeeTerritories.EmployeeID = _employeeID.Value;
				_iEmployeeTerritoriesRepository.Insert(daoEmployeeTerritories);
				CommitTransaction(_iEmployeeTerritoriesRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boEmployeeTerritories = new BOEmployeeTerritories(daoEmployeeTerritories);
				if(_boEmployeeTerritoriesCollection != null)
					_boEmployeeTerritoriesCollection.Add(boEmployeeTerritories);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeeTerritoriesRepository, "addEmployeeTerritories");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllEmployeeTerritories
		///This method deletes all BOEmployeeTerritories objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllEmployeeTerritories()
		{
			Doing(this);
			RegisterDataObject(_iEmployeeTerritoriesRepository, null);
			BeginTransaction(_iEmployeeTerritoriesRepository, "deleteAllEmployeeTerritories");
			try
			{
				_iEmployeeTerritoriesRepository.DeleteAllByEmployeeID(_employeeID.Value);
				CommitTransaction(_iEmployeeTerritoriesRepository);
				Done(this);
				if(_boEmployeeTerritoriesCollection != null)
				{
					_boEmployeeTerritoriesCollection.Clear();
					_boEmployeeTerritoriesCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeeTerritoriesRepository, "deleteAllEmployeeTerritories");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadOrdersCollection
		///This method loads the internal collection of BOOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrdersCollection()
		{
			Doing(this);
			try
			{
				_boOrdersCollection = new List<IBOOrders>();
				IList<IDAOOrders> daoOrdersCollection = _iOrdersRepository.SelectAllByEmployeeID(_employeeID.Value);
				Done(this);
				
				foreach(IDAOOrders daoOrders in daoOrdersCollection)
					_boOrdersCollection.Add(new BOOrders(daoOrders));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrders
		///This method persists a BOOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual void AddOrders(IBOOrders boOrders)
		{
			Doing(this);
			IDAOOrders daoOrders = _iOrdersRepository.New();
			RegisterDataObject(_iOrdersRepository, _iOrdersRepository.BaseData(daoOrders));
			BeginTransaction(_iOrdersRepository, "addOrders");
			try
			{
				daoOrders.OrderID = boOrders.OrderID;
				daoOrders.CustomerID = boOrders.CustomerID;
				daoOrders.OrderDate = boOrders.OrderDate;
				daoOrders.RequiredDate = boOrders.RequiredDate;
				daoOrders.ShippedDate = boOrders.ShippedDate;
				daoOrders.ShipVia = boOrders.ShipVia;
				daoOrders.Freight = boOrders.Freight;
				daoOrders.ShipName = boOrders.ShipName;
				daoOrders.ShipAddress = boOrders.ShipAddress;
				daoOrders.ShipCity = boOrders.ShipCity;
				daoOrders.ShipRegion = boOrders.ShipRegion;
				daoOrders.ShipPostalCode = boOrders.ShipPostalCode;
				daoOrders.ShipCountry = boOrders.ShipCountry;
				daoOrders.EmployeeID = _employeeID.Value;
				_iOrdersRepository.Insert(daoOrders);
				CommitTransaction(_iOrdersRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrders = new BOOrders(daoOrders);
				if(_boOrdersCollection != null)
					_boOrdersCollection.Add(boOrders);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "addOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrders
		///This method deletes all BOOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrders()
		{
			Doing(this);
			RegisterDataObject(_iOrdersRepository, null);
			BeginTransaction(_iOrdersRepository, "deleteAllOrders");
			try
			{
				_iOrdersRepository.DeleteAllByEmployeeID(_employeeID.Value);
				CommitTransaction(_iOrdersRepository);
				Done(this);
				if(_boOrdersCollection != null)
				{
					_boOrdersCollection.Clear();
					_boOrdersCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "deleteAllOrders");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeesRepository EmployeesRepository
		{
			set
			{
				_iEmployeesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeeTerritoriesRepository EmployeeTerritoriesRepository
		{
			set
			{
				_iEmployeeTerritoriesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrdersRepository OrdersRepository
		{
			set
			{
				_iOrdersRepository = value;
			}
		}
		
		public virtual Int32? EmployeeID
		{
			get
			{
				 return _employeeID;
			}
			set
			{
				_employeeID = value;
				_isDirty = true;
			}
		}
		
		public virtual string LastName
		{
			get
			{
				 return _lastName;
			}
			set
			{
				_lastName = value;
				_isDirty = true;
			}
		}
		
		public virtual string FirstName
		{
			get
			{
				 return _firstName;
			}
			set
			{
				_firstName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Title
		{
			get
			{
				 return _title;
			}
			set
			{
				_title = value;
				_isDirty = true;
			}
		}
		
		public virtual string TitleOfCourtesy
		{
			get
			{
				 return _titleOfCourtesy;
			}
			set
			{
				_titleOfCourtesy = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? BirthDate
		{
			get
			{
				 return _birthDate;
			}
			set
			{
				_birthDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? HireDate
		{
			get
			{
				 return _hireDate;
			}
			set
			{
				_hireDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string Region
		{
			get
			{
				 return _region;
			}
			set
			{
				_region = value;
				_isDirty = true;
			}
		}
		
		public virtual string PostalCode
		{
			get
			{
				 return _postalCode;
			}
			set
			{
				_postalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Country
		{
			get
			{
				 return _country;
			}
			set
			{
				_country = value;
				_isDirty = true;
			}
		}
		
		public virtual string HomePhone
		{
			get
			{
				 return _homePhone;
			}
			set
			{
				_homePhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string Extension
		{
			get
			{
				 return _extension;
			}
			set
			{
				_extension = value;
				_isDirty = true;
			}
		}
		
		public virtual byte[] Photo
		{
			get
			{
				 return _photo;
			}
			set
			{
				_photo = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ReportsTo
		{
			get
			{
				 return _reportsTo;
			}
			set
			{
				_reportsTo = value;
				_isDirty = true;
			}
		}
		
		public virtual string PhotoPath
		{
			get
			{
				 return _photoPath;
			}
			set
			{
				_photoPath = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iEmployeesRepository;	}
			set {	EmployeesRepository = (IEmployeesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
