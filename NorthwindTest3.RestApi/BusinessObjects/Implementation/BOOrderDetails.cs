/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrderDetails.
	///</Summary>
	public partial class BOOrderDetails : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _orderID;
		protected Int32? _productID;
		protected decimal? _unitPrice;
		protected Int16? _quantity;
		protected float? _discount;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrderDetails()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 orderID, Int32 productID
		///</parameters>
		public BOOrderDetails(Int32 orderID, Int32 productID)
		{
			try
			{
				DAOOrderDetails daoOrderDetails = DAOOrderDetails.SelectOne(orderID, productID);
				_orderID = daoOrderDetails.OrderID;
				_productID = daoOrderDetails.ProductID;
				_unitPrice = daoOrderDetails.UnitPrice;
				_quantity = daoOrderDetails.Quantity;
				_discount = daoOrderDetails.Discount;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrderDetails
		///</parameters>
		protected internal BOOrderDetails(DAOOrderDetails daoOrderDetails)
		{
			try
			{
				_orderID = daoOrderDetails.OrderID;
				_productID = daoOrderDetails.ProductID;
				_unitPrice = daoOrderDetails.UnitPrice;
				_quantity = daoOrderDetails.Quantity;
				_discount = daoOrderDetails.Discount;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OrderDetails record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOOrderDetails daoOrderDetails = new DAOOrderDetails();
			RegisterDataObject(daoOrderDetails);
			BeginTransaction("savenewBOOrderDetails");
			try
			{
				daoOrderDetails.OrderID = _orderID;
				daoOrderDetails.ProductID = _productID;
				daoOrderDetails.UnitPrice = _unitPrice;
				daoOrderDetails.Quantity = _quantity;
				daoOrderDetails.Discount = _discount;
				daoOrderDetails.Insert();
				CommitTransaction();
				
				_orderID = daoOrderDetails.OrderID;
				_productID = daoOrderDetails.ProductID;
				_unitPrice = daoOrderDetails.UnitPrice;
				_quantity = daoOrderDetails.Quantity;
				_discount = daoOrderDetails.Discount;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOOrderDetails");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one OrderDetails record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void Update()
		{
			DAOOrderDetails daoOrderDetails = new DAOOrderDetails();
			RegisterDataObject(daoOrderDetails);
			BeginTransaction("updateBOOrderDetails");
			try
			{
				daoOrderDetails.OrderID = _orderID;
				daoOrderDetails.ProductID = _productID;
				daoOrderDetails.UnitPrice = _unitPrice;
				daoOrderDetails.Quantity = _quantity;
				daoOrderDetails.Discount = _discount;
				daoOrderDetails.Update();
				CommitTransaction();
				
				_orderID = daoOrderDetails.OrderID;
				_productID = daoOrderDetails.ProductID;
				_unitPrice = daoOrderDetails.UnitPrice;
				_quantity = daoOrderDetails.Quantity;
				_discount = daoOrderDetails.Discount;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOOrderDetails");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OrderDetails record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOOrderDetails daoOrderDetails = new DAOOrderDetails();
			RegisterDataObject(daoOrderDetails);
			BeginTransaction("deleteBOOrderDetails");
			try
			{
				daoOrderDetails.OrderID = _orderID;
				daoOrderDetails.ProductID = _productID;
				daoOrderDetails.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOOrderDetails");
				throw;
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns the collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///List[BOOrderDetails]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOOrderDetails> OrderDetailsCollection()
		{
			try
			{
				IList<BOOrderDetails> boOrderDetailsCollection = new List<BOOrderDetails>();
				IList<DAOOrderDetails> daoOrderDetailsCollection = DAOOrderDetails.SelectAll();
			
				foreach(DAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
			
				return boOrderDetailsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OrderDetailsCollectionCount
		///This method returns the collection count of BOOrderDetails objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrderDetailsCollectionCount()
		{
			try
			{
				Int32 objCount = DAOOrderDetails.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOOrderDetails>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOOrderDetails.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OrderDetailsCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOOrderDetails objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrderDetailsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOOrderDetails> daoOrderDetailsCollection = DAOOrderDetails.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOOrderDetails resdaoOrderDetails in daoOrderDetailsCollection)
					boOrderDetailsCollection.Add((T)(object)new BOOrderDetails(resdaoOrderDetails));
			
				return boOrderDetailsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OrderDetailsCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOOrderDetails objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOOrderDetails.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? OrderID
		{
			get
			{
				 return _orderID;
			}
			set
			{
				_orderID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ProductID
		{
			get
			{
				 return _productID;
			}
			set
			{
				_productID = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? UnitPrice
		{
			get
			{
				 return _unitPrice;
			}
			set
			{
				_unitPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual float? Discount
		{
			get
			{
				 return _discount;
			}
			set
			{
				_discount = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
