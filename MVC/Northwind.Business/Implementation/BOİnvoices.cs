/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOİnvoices.
	///</Summary>
	public partial class BOInvoices : zNorthwindConn_BaseBusiness, IBOİnvoices, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _orderİd;
		protected string _invoiceDate;
		protected string _dueDate;
		protected string _tax;
		protected string _shipping;
		protected string _amountDue;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IInvoicesRepository _iİnvoicesRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOInvoices()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOİnvoices daoİnvoices = _iİnvoicesRepository.SelectOne(id);
				_id = daoİnvoices.İd;
				_orderİd = daoİnvoices.Orderİd;
				_invoiceDate = daoİnvoices.İnvoiceDate;
				_dueDate = daoİnvoices.DueDate;
				_tax = daoİnvoices.Tax;
				_shipping = daoİnvoices.Shipping;
				_amountDue = daoİnvoices.AmountDue;
				_ctrVersion = daoİnvoices.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOİnvoices
		///</parameters>
		protected internal BOInvoices(IDAOİnvoices daoİnvoices)
		{
			try
			{
				_id = daoİnvoices.İd;
				_orderİd = daoİnvoices.Orderİd;
				_invoiceDate = daoİnvoices.İnvoiceDate;
				_dueDate = daoİnvoices.DueDate;
				_tax = daoİnvoices.Tax;
				_shipping = daoİnvoices.Shipping;
				_amountDue = daoİnvoices.AmountDue;
				_ctrVersion = daoİnvoices.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new İnvoices record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOİnvoices daoİnvoices = _iİnvoicesRepository.New();
			RegisterDataObject( _iİnvoicesRepository, _iİnvoicesRepository.BaseData(daoİnvoices));
			BeginTransaction( _iİnvoicesRepository, "savenewBOİnvoices");
			try
			{
				daoİnvoices.Orderİd = _orderİd;
				daoİnvoices.İnvoiceDate = _invoiceDate;
				daoİnvoices.DueDate = _dueDate;
				daoİnvoices.Tax = _tax;
				daoİnvoices.Shipping = _shipping;
				daoİnvoices.AmountDue = _amountDue;
				_iİnvoicesRepository.Insert(daoİnvoices);
				CommitTransaction( _iİnvoicesRepository);
				Done(this);
				
				_id = daoİnvoices.İd;
				_orderİd = daoİnvoices.Orderİd;
				_invoiceDate = daoİnvoices.İnvoiceDate;
				_dueDate = daoİnvoices.DueDate;
				_tax = daoİnvoices.Tax;
				_shipping = daoİnvoices.Shipping;
				_amountDue = daoİnvoices.AmountDue;
				_ctrVersion = daoİnvoices.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnvoicesRepository, "savenewBOİnvoices");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one İnvoices record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOİnvoices
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOİnvoices daoİnvoices = _iİnvoicesRepository.New();
			RegisterDataObject(_iİnvoicesRepository, _iİnvoicesRepository.BaseData(daoİnvoices));
			BeginTransaction(_iİnvoicesRepository, "updateBOİnvoices");
			try
			{
				daoİnvoices.İd = _id;
				daoİnvoices.Orderİd = _orderİd;
				daoİnvoices.İnvoiceDate = _invoiceDate;
				daoİnvoices.DueDate = _dueDate;
				daoİnvoices.Tax = _tax;
				daoİnvoices.Shipping = _shipping;
				daoİnvoices.AmountDue = _amountDue;
				daoİnvoices.CtrVersion = _ctrVersion;
				_iİnvoicesRepository.Update(daoİnvoices);
				CommitTransaction(_iİnvoicesRepository);
				Done(this);
				
				_id = daoİnvoices.İd;
				_orderİd = daoİnvoices.Orderİd;
				_invoiceDate = daoİnvoices.İnvoiceDate;
				_dueDate = daoİnvoices.DueDate;
				_tax = daoİnvoices.Tax;
				_shipping = daoİnvoices.Shipping;
				_amountDue = daoİnvoices.AmountDue;
				_ctrVersion = daoİnvoices.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnvoicesRepository, "updateBOİnvoices");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one İnvoices record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOİnvoices daoİnvoices = _iİnvoicesRepository.New();
			RegisterDataObject(_iİnvoicesRepository, _iİnvoicesRepository.BaseData(daoİnvoices));
			BeginTransaction(_iİnvoicesRepository, "deleteBOİnvoices");
			try
			{
				daoİnvoices.İd = _id;
				_iİnvoicesRepository.Delete(daoİnvoices);
				CommitTransaction(_iİnvoicesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnvoicesRepository, "deleteBOİnvoices");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///İnvoicesCollection
		///This method returns the collection of BOİnvoices objects
		///</Summary>
		///<returns>
		///IList[IBOİnvoices]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOİnvoices> İnvoicesCollection(IInvoicesRepository iİnvoicesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOİnvoices> boİnvoicesCollection = new List<IBOİnvoices>();
				IList<IDAOİnvoices> daoİnvoicesCollection = iİnvoicesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOİnvoices daoİnvoices in daoİnvoicesCollection)
					boİnvoicesCollection.Add(new BOInvoices(daoİnvoices));
				
				return boİnvoicesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///İnvoicesCollectionCount
		///This method returns the collection count of BOİnvoices objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 İnvoicesCollectionCount(IInvoicesRepository iİnvoicesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iİnvoicesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///İnvoicesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOİnvoices>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iİnvoicesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boİnvoicesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOİnvoices> daoİnvoicesCollection = _iİnvoicesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOİnvoices resdaoİnvoices in daoİnvoicesCollection)
					boİnvoicesCollection.Add((T)(object)new BOInvoices(resdaoİnvoices));
				
				return boİnvoicesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOİnvoices objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOİnvoices> boİnvoicesCollection = new List<IBOİnvoices>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iİnvoicesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInvoicesRepository İnvoicesRepository
		{
			set
			{
				_iİnvoicesRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Orderİd
		{
			get
			{
				 return _orderİd;
			}
			set
			{
				_orderİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string İnvoiceDate
		{
			get
			{
				 return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string DueDate
		{
			get
			{
				 return _dueDate;
			}
			set
			{
				_dueDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Tax
		{
			get
			{
				 return _tax;
			}
			set
			{
				_tax = value;
				_isDirty = true;
			}
		}
		
		public virtual string Shipping
		{
			get
			{
				 return _shipping;
			}
			set
			{
				_shipping = value;
				_isDirty = true;
			}
		}
		
		public virtual string AmountDue
		{
			get
			{
				 return _amountDue;
			}
			set
			{
				_amountDue = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iİnvoicesRepository;	}
			set {	İnvoicesRepository = (IInvoicesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
