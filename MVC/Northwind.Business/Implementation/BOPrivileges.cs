/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPrivileges.
	///It maintains a collection of BOEmployeePrivileges objects.
	///</Summary>
	public partial class BOPrivileges : zNorthwindConn_BaseBusiness, IBOPrivileges, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _privilegeName;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOEmployeePrivileges> _boEmployeePrivilegesCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IPrivilegesRepository _iPrivilegesRepository;
		protected IEmployeePrivilegesRepository _iEmployeePrivilegesRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPrivileges()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOPrivileges daoPrivileges = _iPrivilegesRepository.SelectOne(id);
				_id = daoPrivileges.İd;
				_privilegeName = daoPrivileges.PrivilegeName;
				_ctrVersion = daoPrivileges.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPrivileges
		///</parameters>
		protected internal BOPrivileges(IDAOPrivileges daoPrivileges)
		{
			try
			{
				_id = daoPrivileges.İd;
				_privilegeName = daoPrivileges.PrivilegeName;
				_ctrVersion = daoPrivileges.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Privileges record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOPrivileges daoPrivileges = _iPrivilegesRepository.New();
			RegisterDataObject( _iPrivilegesRepository, _iPrivilegesRepository.BaseData(daoPrivileges));
			BeginTransaction( _iPrivilegesRepository, "savenewBOPrivileges");
			try
			{
				daoPrivileges.PrivilegeName = _privilegeName;
				_iPrivilegesRepository.Insert(daoPrivileges);
				CommitTransaction( _iPrivilegesRepository);
				Done(this);
				
				_id = daoPrivileges.İd;
				_privilegeName = daoPrivileges.PrivilegeName;
				_ctrVersion = daoPrivileges.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPrivilegesRepository, "savenewBOPrivileges");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Privileges record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPrivileges
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOPrivileges daoPrivileges = _iPrivilegesRepository.New();
			RegisterDataObject(_iPrivilegesRepository, _iPrivilegesRepository.BaseData(daoPrivileges));
			BeginTransaction(_iPrivilegesRepository, "updateBOPrivileges");
			try
			{
				daoPrivileges.İd = _id;
				daoPrivileges.PrivilegeName = _privilegeName;
				daoPrivileges.CtrVersion = _ctrVersion;
				_iPrivilegesRepository.Update(daoPrivileges);
				CommitTransaction(_iPrivilegesRepository);
				Done(this);
				
				_id = daoPrivileges.İd;
				_privilegeName = daoPrivileges.PrivilegeName;
				_ctrVersion = daoPrivileges.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPrivilegesRepository, "updateBOPrivileges");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Privileges record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOPrivileges daoPrivileges = _iPrivilegesRepository.New();
			RegisterDataObject(_iPrivilegesRepository, _iPrivilegesRepository.BaseData(daoPrivileges));
			BeginTransaction(_iPrivilegesRepository, "deleteBOPrivileges");
			try
			{
				daoPrivileges.İd = _id;
				_iPrivilegesRepository.Delete(daoPrivileges);
				CommitTransaction(_iPrivilegesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPrivilegesRepository, "deleteBOPrivileges");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///PrivilegesCollection
		///This method returns the collection of BOPrivileges objects
		///</Summary>
		///<returns>
		///IList[IBOPrivileges]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOPrivileges> PrivilegesCollection(IPrivilegesRepository iPrivilegesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOPrivileges> boPrivilegesCollection = new List<IBOPrivileges>();
				IList<IDAOPrivileges> daoPrivilegesCollection = iPrivilegesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOPrivileges daoPrivileges in daoPrivilegesCollection)
					boPrivilegesCollection.Add(new BOPrivileges(daoPrivileges));
				
				return boPrivilegesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///PrivilegesCollectionCount
		///This method returns the collection count of BOPrivileges objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PrivilegesCollectionCount(IPrivilegesRepository iPrivilegesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iPrivilegesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///PrivilegesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOPrivileges>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iPrivilegesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPrivilegesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOPrivileges> daoPrivilegesCollection = _iPrivilegesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOPrivileges resdaoPrivileges in daoPrivilegesCollection)
					boPrivilegesCollection.Add((T)(object)new BOPrivileges(resdaoPrivileges));
				
				return boPrivilegesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOPrivileges objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOPrivileges> boPrivilegesCollection = new List<IBOPrivileges>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iPrivilegesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///EmployeePrivilegesCollection
		///This method returns its collection of BOEmployeePrivileges objects
		///</Summary>
		///<returns>
		///IList[IBOEmployeePrivileges]
		///</returns>
		///<parameters>
		///BOPrivileges
		///</parameters>
		public virtual IList<IBOEmployeePrivileges> EmployeePrivilegesCollection()
		{
			Doing(this);
			try
			{
				if(_boEmployeePrivilegesCollection == null)
					LoadEmployeePrivilegesCollection();
				return _boEmployeePrivilegesCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadEmployeePrivilegesCollection
		///This method loads the internal collection of BOEmployeePrivileges objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadEmployeePrivilegesCollection()
		{
			Doing(this);
			try
			{
				_boEmployeePrivilegesCollection = new List<IBOEmployeePrivileges>();
				IList<IDAOEmployeePrivileges> daoEmployeePrivilegesCollection = _iEmployeePrivilegesRepository.SelectAllByPrivilegeİd(_id);
				Done(this);
				
				foreach(IDAOEmployeePrivileges daoEmployeePrivileges in daoEmployeePrivilegesCollection)
					_boEmployeePrivilegesCollection.Add(new BOEmployeePrivileges(daoEmployeePrivileges));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddEmployeePrivileges
		///This method persists a BOEmployeePrivileges object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployeePrivileges
		///</parameters>
		public virtual void AddEmployeePrivileges(IBOEmployeePrivileges boEmployeePrivileges)
		{
			Doing(this);
			IDAOEmployeePrivileges daoEmployeePrivileges = _iEmployeePrivilegesRepository.New();
			RegisterDataObject(_iEmployeePrivilegesRepository, _iEmployeePrivilegesRepository.BaseData(daoEmployeePrivileges));
			BeginTransaction(_iEmployeePrivilegesRepository, "addEmployeePrivileges");
			try
			{
				daoEmployeePrivileges.Employeeİd = boEmployeePrivileges.Employeeİd;
				daoEmployeePrivileges.Privilegeİd = _id;
				_iEmployeePrivilegesRepository.Insert(daoEmployeePrivileges);
				CommitTransaction(_iEmployeePrivilegesRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boEmployeePrivileges = new BOEmployeePrivileges(daoEmployeePrivileges);
				if(_boEmployeePrivilegesCollection != null)
					_boEmployeePrivilegesCollection.Add(boEmployeePrivileges);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeePrivilegesRepository, "addEmployeePrivileges");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllEmployeePrivileges
		///This method deletes all BOEmployeePrivileges objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllEmployeePrivileges()
		{
			Doing(this);
			RegisterDataObject(_iEmployeePrivilegesRepository, null);
			BeginTransaction(_iEmployeePrivilegesRepository, "deleteAllEmployeePrivileges");
			try
			{
				_iEmployeePrivilegesRepository.DeleteAllByPrivilegeİd(_id);
				CommitTransaction(_iEmployeePrivilegesRepository);
				Done(this);
				if(_boEmployeePrivilegesCollection != null)
				{
					_boEmployeePrivilegesCollection.Clear();
					_boEmployeePrivilegesCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeePrivilegesRepository, "deleteAllEmployeePrivileges");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPrivilegesRepository PrivilegesRepository
		{
			set
			{
				_iPrivilegesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeePrivilegesRepository EmployeePrivilegesRepository
		{
			set
			{
				_iEmployeePrivilegesRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string PrivilegeName
		{
			get
			{
				 return _privilegeName;
			}
			set
			{
				_privilegeName = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iPrivilegesRepository;	}
			set {	PrivilegesRepository = (IPrivilegesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
