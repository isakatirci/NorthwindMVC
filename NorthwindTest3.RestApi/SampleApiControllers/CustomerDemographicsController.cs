/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using System.Threading.Tasks;
using NorthwindTest3.RestApi.SampleViewModels;
using NorthwindTest3.BusinessObjects;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.RestApi.SampleApiControllers
{
	public partial class CustomerDemographicsController : ApiController
	{

            // GET: api/CustomerDemographics
        public async Task<IHttpActionResult> GetCustomerDemographics(int page = 0, int pageSize = 5)
        {
            int totalCount = 0;

            IList<CustomerDemographicsVm> listVm = new List<CustomerDemographicsVm>();
            var result = Task.Factory.StartNew(() => {

                ICriteria criteria = new Criteria<BOCustomerDemographics>();
                totalCount = criteria.Count();

                IList<BOCustomerDemographics> listBOs = criteria
                    .Add(new OrderBy("CustomerTypeID", OrderBy.OrderDirection.Ascending))
                    .Skip(page * pageSize)
                    .Take(pageSize)
                    .List<BOCustomerDemographics>();

                foreach (var bo in listBOs)
                    listVm.Add(new CustomerDemographicsVm(bo));
                return listVm;
            });
            await result;

            return Ok(new { Data = result.Result, Paging = new { Total = totalCount, Limit = pageSize, CurrentPage = page, PageCount = (int) Math.Ceiling((double)totalCount / pageSize) } });
        }

        // GET: api/CustomerDemographics/5
        [ResponseType(typeof(CustomerDemographicsVm))]
        public async Task<IHttpActionResult> GetCustomerDemographics(string id)
        {
            var result = Task.Factory.StartNew(() => {

                BOCustomerDemographics bo = new Criteria<BOCustomerDemographics>()
                .Add(Expression.Eq("CustomerTypeID", id))
                .SingleOrDefault<BOCustomerDemographics>();
                return bo == null ? null : new CustomerDemographicsVm(bo);

            });
            await result;
            if (result.Result == null)
            {
                return NotFound();
            }

            return Ok(result.Result);
        }

        // PUT: api/CustomerDemographics/5
        [ResponseType(typeof(void))]
        public async Task<IHttpActionResult> PutCustomerDemographics(string id, CustomerDemographicsVm vm)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            if (id != vm.CustomerTypeID)
            {
                return BadRequest();
            }

            var result = Task.Factory.StartNew(() => {

                IUnitOfWork uow = new UnitOfWorkImp(); 
                var bo = vm.BOCustomerDemographics();
                uow.Update(bo);

                string err;
                if (!uow.Commit(out err))
                {
                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
                    throw new HttpResponseException(resp);
                }
                return true;
            });
            await result;
            if (!result.Result)
                return NotFound();

            return StatusCode(HttpStatusCode.NoContent);
        }

        // POST: api/CustomerDemographics
        [ResponseType(typeof(CustomerDemographicsVm))]
        public async Task<IHttpActionResult> PostCustomerDemographics(CustomerDemographicsVm vm)
        {
            if (!ModelState.IsValid)
            {
                return BadRequest(ModelState);
            }

            var result = Task.Factory.StartNew(() =>
            {
                IUnitOfWork uow = new UnitOfWorkImp(); 
                var bo = vm.BOCustomerDemographics();
                uow.Create(bo);

                string err;
                if (!uow.Commit(out err))
                {
                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
                    throw new HttpResponseException(resp);
                }
                vm = new CustomerDemographicsVm(bo);
                return true;
            });
            await result;
            return CreatedAtRoute("DefaultApi", new { id = vm.CustomerTypeID }, vm);
        }

        // DELETE: api/CustomerDemographics/5
        [ResponseType(typeof(CustomerDemographicsVm))]
        public async Task<IHttpActionResult> DeleteCustomerDemographics(string id)
        {
            var result = Task.Factory.StartNew(() =>
            {
                 IUnitOfWork uow = new UnitOfWorkImp(); 
                var bo = new BOCustomerDemographics(id);
                
                
                uow.Delete(bo);

                string err;
                if (!uow.Commit(out err))
                {
                    var resp = new HttpResponseMessage(HttpStatusCode.BadRequest) { Content = new StringContent(err) };
                    throw new HttpResponseException(resp);
                }
                return true;
            });
            await result;
            if (!result.Result)
                return NotFound();

            return Ok(result.Result);
        }

        

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
            }
            base.Dispose(disposing);
        }
	}
}
