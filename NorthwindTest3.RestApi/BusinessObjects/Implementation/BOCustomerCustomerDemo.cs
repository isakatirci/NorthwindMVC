/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCustomerCustomerDemo.
	///</Summary>
	public partial class BOCustomerCustomerDemo : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection
	{
		#region member variables
		protected string _customerID;
		protected string _customerTypeID;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCustomerCustomerDemo()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string customerID, string customerTypeID
		///</parameters>
		public BOCustomerCustomerDemo(string customerID, string customerTypeID)
		{
			try
			{
				DAOCustomerCustomerDemo daoCustomerCustomerDemo = DAOCustomerCustomerDemo.SelectOne(customerID, customerTypeID);
				_customerID = daoCustomerCustomerDemo.CustomerID;
				_customerTypeID = daoCustomerCustomerDemo.CustomerTypeID;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCustomerCustomerDemo
		///</parameters>
		protected internal BOCustomerCustomerDemo(DAOCustomerCustomerDemo daoCustomerCustomerDemo)
		{
			try
			{
				_customerID = daoCustomerCustomerDemo.CustomerID;
				_customerTypeID = daoCustomerCustomerDemo.CustomerTypeID;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new CustomerCustomerDemo record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOCustomerCustomerDemo daoCustomerCustomerDemo = new DAOCustomerCustomerDemo();
			RegisterDataObject(daoCustomerCustomerDemo);
			BeginTransaction("savenewBOCustomerCustomerDemo");
			try
			{
				daoCustomerCustomerDemo.CustomerID = _customerID;
				daoCustomerCustomerDemo.CustomerTypeID = _customerTypeID;
				daoCustomerCustomerDemo.Insert();
				CommitTransaction();
				
				_customerID = daoCustomerCustomerDemo.CustomerID;
				_customerTypeID = daoCustomerCustomerDemo.CustomerTypeID;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOCustomerCustomerDemo");
				throw;
			}
		}
		
		///<Summary>
		///Delete
		///This method deletes one CustomerCustomerDemo record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOCustomerCustomerDemo daoCustomerCustomerDemo = new DAOCustomerCustomerDemo();
			RegisterDataObject(daoCustomerCustomerDemo);
			BeginTransaction("deleteBOCustomerCustomerDemo");
			try
			{
				daoCustomerCustomerDemo.CustomerID = _customerID;
				daoCustomerCustomerDemo.CustomerTypeID = _customerTypeID;
				daoCustomerCustomerDemo.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOCustomerCustomerDemo");
				throw;
			}
		}
		
		///<Summary>
		///CustomerCustomerDemoCollection
		///This method returns the collection of BOCustomerCustomerDemo objects
		///</Summary>
		///<returns>
		///List[BOCustomerCustomerDemo]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOCustomerCustomerDemo> CustomerCustomerDemoCollection()
		{
			try
			{
				IList<BOCustomerCustomerDemo> boCustomerCustomerDemoCollection = new List<BOCustomerCustomerDemo>();
				IList<DAOCustomerCustomerDemo> daoCustomerCustomerDemoCollection = DAOCustomerCustomerDemo.SelectAll();
			
				foreach(DAOCustomerCustomerDemo daoCustomerCustomerDemo in daoCustomerCustomerDemoCollection)
					boCustomerCustomerDemoCollection.Add(new BOCustomerCustomerDemo(daoCustomerCustomerDemo));
			
				return boCustomerCustomerDemoCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomerCustomerDemoCollectionCount
		///This method returns the collection count of BOCustomerCustomerDemo objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CustomerCustomerDemoCollectionCount()
		{
			try
			{
				Int32 objCount = DAOCustomerCustomerDemo.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOCustomerCustomerDemo>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOCustomerCustomerDemo.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomerCustomerDemoCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOCustomerCustomerDemo objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCustomerCustomerDemoCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOCustomerCustomerDemo> daoCustomerCustomerDemoCollection = DAOCustomerCustomerDemo.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOCustomerCustomerDemo resdaoCustomerCustomerDemo in daoCustomerCustomerDemoCollection)
					boCustomerCustomerDemoCollection.Add((T)(object)new BOCustomerCustomerDemo(resdaoCustomerCustomerDemo));
			
				return boCustomerCustomerDemoCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomerCustomerDemoCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOCustomerCustomerDemo objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOCustomerCustomerDemo.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string CustomerID
		{
			get
			{
				 return _customerID;
			}
			set
			{
				_customerID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerTypeID
		{
			get
			{
				 return _customerTypeID;
			}
			set
			{
				_customerTypeID = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
