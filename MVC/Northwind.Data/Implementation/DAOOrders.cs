/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using Northwind.Data.Interfaces;

namespace Northwind.Data
{
	public partial class DAOOrders : zNorthwindConn_BaseData, IDAOOrders
	{
		#region member variables
		protected string _id;
		protected string _employeeİd;
		protected string _customerİd;
		protected string _orderDate;
		protected string _shippedDate;
		protected string _shipperİd;
		protected string _shipName;
		protected string _shipAddress;
		protected string _shipCity;
		protected string _shipStateProvince;
		protected string _shipZipPostalCode;
		protected string _shipCountryRegion;
		protected string _shippingFee;
		protected string _taxes;
		protected string _paymentType;
		protected string _paidDate;
		protected string _notes;
		protected double? _taxRate;
		protected string _taxStatusİd;
		protected string _statusİd;
		protected string _ctrVersion;
		#endregion

		#region class methods
		public DAOOrders()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table orders based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOOrders
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public static IDAOOrders SelectOne(string id)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				DAOOrders retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrders();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? null : (string)dt.Rows[0]["id"];
					retObj._employeeİd					 = Convert.IsDBNull(dt.Rows[0]["employee_id"]) ? null : (string)dt.Rows[0]["employee_id"];
					retObj._customerİd					 = Convert.IsDBNull(dt.Rows[0]["customer_id"]) ? null : (string)dt.Rows[0]["customer_id"];
					retObj._orderDate					 = Convert.IsDBNull(dt.Rows[0]["order_date"]) ? null : (string)dt.Rows[0]["order_date"];
					retObj._shippedDate					 = Convert.IsDBNull(dt.Rows[0]["shipped_date"]) ? null : (string)dt.Rows[0]["shipped_date"];
					retObj._shipperİd					 = Convert.IsDBNull(dt.Rows[0]["shipper_id"]) ? null : (string)dt.Rows[0]["shipper_id"];
					retObj._shipName					 = Convert.IsDBNull(dt.Rows[0]["ship_name"]) ? null : (string)dt.Rows[0]["ship_name"];
					retObj._shipAddress					 = Convert.IsDBNull(dt.Rows[0]["ship_address"]) ? null : (string)dt.Rows[0]["ship_address"];
					retObj._shipCity					 = Convert.IsDBNull(dt.Rows[0]["ship_city"]) ? null : (string)dt.Rows[0]["ship_city"];
					retObj._shipStateProvince					 = Convert.IsDBNull(dt.Rows[0]["ship_state_province"]) ? null : (string)dt.Rows[0]["ship_state_province"];
					retObj._shipZipPostalCode					 = Convert.IsDBNull(dt.Rows[0]["ship_zip_postal_code"]) ? null : (string)dt.Rows[0]["ship_zip_postal_code"];
					retObj._shipCountryRegion					 = Convert.IsDBNull(dt.Rows[0]["ship_country_region"]) ? null : (string)dt.Rows[0]["ship_country_region"];
					retObj._shippingFee					 = Convert.IsDBNull(dt.Rows[0]["shipping_fee"]) ? null : (string)dt.Rows[0]["shipping_fee"];
					retObj._taxes					 = Convert.IsDBNull(dt.Rows[0]["taxes"]) ? null : (string)dt.Rows[0]["taxes"];
					retObj._paymentType					 = Convert.IsDBNull(dt.Rows[0]["payment_type"]) ? null : (string)dt.Rows[0]["payment_type"];
					retObj._paidDate					 = Convert.IsDBNull(dt.Rows[0]["paid_date"]) ? null : (string)dt.Rows[0]["paid_date"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["notes"]) ? null : (string)dt.Rows[0]["notes"];
					retObj._taxRate					 = Convert.IsDBNull(dt.Rows[0]["tax_rate"]) ? (double?)null : (double?)dt.Rows[0]["tax_rate"];
					retObj._taxStatusİd					 = Convert.IsDBNull(dt.Rows[0]["tax_status_id"]) ? null : (string)dt.Rows[0]["tax_status_id"];
					retObj._statusİd					 = Convert.IsDBNull(dt.Rows[0]["status_id"]) ? null : (string)dt.Rows[0]["status_id"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? null : (string)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table orders based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);


			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///string employeeİd
		///</parameters>
		public static List<IDAOOrders> SelectAllByEmployeeİd(string employeeİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbyemployeeid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_EMPLOYEE_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)employeeİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string employeeİd
		///</parameters>
		public static Int32 SelectAllByEmployeeİdCount(string employeeİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbyemployeeidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_EMPLOYEE_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)employeeİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string employeeİd
		///</parameters>
		public static void DeleteAllByEmployeeİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string employeeİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_deletebyemployeeid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_EMPLOYEE_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)employeeİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///string customerİd
		///</parameters>
		public static List<IDAOOrders> SelectAllByCustomerİd(string customerİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbycustomerid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_CUSTOMER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)customerİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string customerİd
		///</parameters>
		public static Int32 SelectAllByCustomerİdCount(string customerİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbycustomeridcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_CUSTOMER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)customerİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string customerİd
		///</parameters>
		public static void DeleteAllByCustomerİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string customerİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_deletebycustomerid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_CUSTOMER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)customerİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///string shipperİd
		///</parameters>
		public static List<IDAOOrders> SelectAllByShipperİd(string shipperİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbyshipperid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SHİPPER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)shipperİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string shipperİd
		///</parameters>
		public static Int32 SelectAllByShipperİdCount(string shipperİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbyshipperidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SHİPPER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)shipperİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string shipperİd
		///</parameters>
		public static void DeleteAllByShipperİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string shipperİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_deletebyshipperid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SHİPPER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)shipperİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///string taxStatusİd
		///</parameters>
		public static List<IDAOOrders> SelectAllByTaxStatusİd(string taxStatusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbytaxstatusid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TAX_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 3, 0, "", DataRowVersion.Proposed, (object)taxStatusİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string taxStatusİd
		///</parameters>
		public static Int32 SelectAllByTaxStatusİdCount(string taxStatusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbytaxstatusidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TAX_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 3, 0, "", DataRowVersion.Proposed, (object)taxStatusİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string taxStatusİd
		///</parameters>
		public static void DeleteAllByTaxStatusİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string taxStatusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_deletebytaxstatusid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_TAX_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 3, 0, "", DataRowVersion.Proposed, (object)taxStatusİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///string statusİd
		///</parameters>
		public static List<IDAOOrders> SelectAllByStatusİd(string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbystatusid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 3, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string statusİd
		///</parameters>
		public static Int32 SelectAllByStatusİdCount(string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbystatusidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 3, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string statusİd
		///</parameters>
		public static void DeleteAllByStatusİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_deletebystatusid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 3, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table orders
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SHİP_ADDRESS", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipAddress?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_NOTES", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_EMPLOYEE_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _employeeİd));
				command.Parameters.Add(new MySqlParameter("?P_CUSTOMER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _customerİd));
				command.Parameters.Add(new MySqlParameter("?P_ORDER_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _orderDate));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shippedDate));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _shipperİd));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_NAME", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipName));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_CİTY", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipCity));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_STATE_PROVİNCE", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipStateProvince));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_ZİP_POSTAL_CODE", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipZipPostalCode));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_COUNTRY_REGİON", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipCountryRegion));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPİNG_FEE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _shippingFee));
				command.Parameters.Add(new MySqlParameter("?P_TAXES", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _taxes));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_TYPE", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paymentType));
				command.Parameters.Add(new MySqlParameter("?P_PAİD_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paidDate));
				command.Parameters.Add(new MySqlParameter("?P_TAX_RATE", MySqlDbType.Double, 0, ParameterDirection.InputOutput, true, 22, 0, "", DataRowVersion.Proposed, _taxRate));
				command.Parameters.Add(new MySqlParameter("?P_TAX_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 3, 0, "", DataRowVersion.Proposed, _taxStatusİd));
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 3, 0, "", DataRowVersion.Proposed, _statusİd));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.Output, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_employeeİd					 = Convert.IsDBNull(command.Parameters["?P_EMPLOYEE_İD"].Value) ? null : (string)command.Parameters["?P_EMPLOYEE_İD"].Value;
				_customerİd					 = Convert.IsDBNull(command.Parameters["?P_CUSTOMER_İD"].Value) ? null : (string)command.Parameters["?P_CUSTOMER_İD"].Value;
				_orderDate					 = Convert.IsDBNull(command.Parameters["?P_ORDER_DATE"].Value) ? null : (string)command.Parameters["?P_ORDER_DATE"].Value;
				_shippedDate					 = Convert.IsDBNull(command.Parameters["?P_SHİPPED_DATE"].Value) ? null : (string)command.Parameters["?P_SHİPPED_DATE"].Value;
				_shipperİd					 = Convert.IsDBNull(command.Parameters["?P_SHİPPER_İD"].Value) ? null : (string)command.Parameters["?P_SHİPPER_İD"].Value;
				_shipName					 = Convert.IsDBNull(command.Parameters["?P_SHİP_NAME"].Value) ? null : (string)command.Parameters["?P_SHİP_NAME"].Value;
				_shipCity					 = Convert.IsDBNull(command.Parameters["?P_SHİP_CİTY"].Value) ? null : (string)command.Parameters["?P_SHİP_CİTY"].Value;
				_shipStateProvince					 = Convert.IsDBNull(command.Parameters["?P_SHİP_STATE_PROVİNCE"].Value) ? null : (string)command.Parameters["?P_SHİP_STATE_PROVİNCE"].Value;
				_shipZipPostalCode					 = Convert.IsDBNull(command.Parameters["?P_SHİP_ZİP_POSTAL_CODE"].Value) ? null : (string)command.Parameters["?P_SHİP_ZİP_POSTAL_CODE"].Value;
				_shipCountryRegion					 = Convert.IsDBNull(command.Parameters["?P_SHİP_COUNTRY_REGİON"].Value) ? null : (string)command.Parameters["?P_SHİP_COUNTRY_REGİON"].Value;
				_shippingFee					 = Convert.IsDBNull(command.Parameters["?P_SHİPPİNG_FEE"].Value) ? null : (string)command.Parameters["?P_SHİPPİNG_FEE"].Value;
				_taxes					 = Convert.IsDBNull(command.Parameters["?P_TAXES"].Value) ? null : (string)command.Parameters["?P_TAXES"].Value;
				_paymentType					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_TYPE"].Value) ? null : (string)command.Parameters["?P_PAYMENT_TYPE"].Value;
				_paidDate					 = Convert.IsDBNull(command.Parameters["?P_PAİD_DATE"].Value) ? null : (string)command.Parameters["?P_PAİD_DATE"].Value;
				_taxRate					 = Convert.IsDBNull(command.Parameters["?P_TAX_RATE"].Value) ? (double?)null : (double?)command.Parameters["?P_TAX_RATE"].Value;
				_taxStatusİd					 = Convert.IsDBNull(command.Parameters["?P_TAX_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_TAX_STATUS_İD"].Value;
				_statusİd					 = Convert.IsDBNull(command.Parameters["?P_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_STATUS_İD"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table orders
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<IDAOOrders> SelectAll()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiorders
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_FİELDSFİELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "id", true) == 0) lst.Add(Convert.IsDBNull(row["id"]) ? null : (string)row["id"]);
						if (string.Compare(projection.Member, "employee_id", true) == 0) lst.Add(Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"]);
						if (string.Compare(projection.Member, "customer_id", true) == 0) lst.Add(Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"]);
						if (string.Compare(projection.Member, "order_date", true) == 0) lst.Add(Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"]);
						if (string.Compare(projection.Member, "shipped_date", true) == 0) lst.Add(Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"]);
						if (string.Compare(projection.Member, "shipper_id", true) == 0) lst.Add(Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"]);
						if (string.Compare(projection.Member, "ship_name", true) == 0) lst.Add(Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"]);
						if (string.Compare(projection.Member, "ship_address", true) == 0) lst.Add(Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"]);
						if (string.Compare(projection.Member, "ship_city", true) == 0) lst.Add(Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"]);
						if (string.Compare(projection.Member, "ship_state_province", true) == 0) lst.Add(Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"]);
						if (string.Compare(projection.Member, "ship_zip_postal_code", true) == 0) lst.Add(Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"]);
						if (string.Compare(projection.Member, "ship_country_region", true) == 0) lst.Add(Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"]);
						if (string.Compare(projection.Member, "shipping_fee", true) == 0) lst.Add(Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"]);
						if (string.Compare(projection.Member, "taxes", true) == 0) lst.Add(Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"]);
						if (string.Compare(projection.Member, "payment_type", true) == 0) lst.Add(Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"]);
						if (string.Compare(projection.Member, "paid_date", true) == 0) lst.Add(Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"]);
						if (string.Compare(projection.Member, "notes", true) == 0) lst.Add(Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"]);
						if (string.Compare(projection.Member, "tax_rate", true) == 0) lst.Add(Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"]);
						if (string.Compare(projection.Member, "tax_status_id", true) == 0) lst.Add(Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"]);
						if (string.Compare(projection.Member, "status_id", true) == 0) lst.Add(Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api orders
		///</Summary>
		///<returns>
		///List-IDAOOrders.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<IDAOOrders> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._employeeİd					 = Convert.IsDBNull(row["employee_id"]) ? null : (string)row["employee_id"];
						retObj._customerİd					 = Convert.IsDBNull(row["customer_id"]) ? null : (string)row["customer_id"];
						retObj._orderDate					 = Convert.IsDBNull(row["order_date"]) ? null : (string)row["order_date"];
						retObj._shippedDate					 = Convert.IsDBNull(row["shipped_date"]) ? null : (string)row["shipped_date"];
						retObj._shipperİd					 = Convert.IsDBNull(row["shipper_id"]) ? null : (string)row["shipper_id"];
						retObj._shipName					 = Convert.IsDBNull(row["ship_name"]) ? null : (string)row["ship_name"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ship_address"]) ? null : (string)row["ship_address"];
						retObj._shipCity					 = Convert.IsDBNull(row["ship_city"]) ? null : (string)row["ship_city"];
						retObj._shipStateProvince					 = Convert.IsDBNull(row["ship_state_province"]) ? null : (string)row["ship_state_province"];
						retObj._shipZipPostalCode					 = Convert.IsDBNull(row["ship_zip_postal_code"]) ? null : (string)row["ship_zip_postal_code"];
						retObj._shipCountryRegion					 = Convert.IsDBNull(row["ship_country_region"]) ? null : (string)row["ship_country_region"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentType					 = Convert.IsDBNull(row["payment_type"]) ? null : (string)row["payment_type"];
						retObj._paidDate					 = Convert.IsDBNull(row["paid_date"]) ? null : (string)row["paid_date"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._taxRate					 = Convert.IsDBNull(row["tax_rate"]) ? (double?)null : (double?)row["tax_rate"];
						retObj._taxStatusİd					 = Convert.IsDBNull(row["tax_status_id"]) ? null : (string)row["tax_status_id"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api orders
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table orders based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_orders_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SHİP_ADDRESS", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipAddress?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_NOTES", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_EMPLOYEE_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _employeeİd));
				command.Parameters.Add(new MySqlParameter("?P_CUSTOMER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _customerİd));
				command.Parameters.Add(new MySqlParameter("?P_ORDER_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _orderDate));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shippedDate));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _shipperİd));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_NAME", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipName));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_CİTY", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipCity));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_STATE_PROVİNCE", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipStateProvince));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_ZİP_POSTAL_CODE", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipZipPostalCode));
				command.Parameters.Add(new MySqlParameter("?P_SHİP_COUNTRY_REGİON", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _shipCountryRegion));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPİNG_FEE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _shippingFee));
				command.Parameters.Add(new MySqlParameter("?P_TAXES", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _taxes));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_TYPE", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paymentType));
				command.Parameters.Add(new MySqlParameter("?P_PAİD_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paidDate));
				command.Parameters.Add(new MySqlParameter("?P_TAX_RATE", MySqlDbType.Double, 0, ParameterDirection.InputOutput, true, 22, 0, "", DataRowVersion.Proposed, _taxRate));
				command.Parameters.Add(new MySqlParameter("?P_TAX_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 3, 0, "", DataRowVersion.Proposed, _taxStatusİd));
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 3, 0, "", DataRowVersion.Proposed, _statusİd));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_employeeİd					 = Convert.IsDBNull(command.Parameters["?P_EMPLOYEE_İD"].Value) ? null : (string)command.Parameters["?P_EMPLOYEE_İD"].Value;
				_customerİd					 = Convert.IsDBNull(command.Parameters["?P_CUSTOMER_İD"].Value) ? null : (string)command.Parameters["?P_CUSTOMER_İD"].Value;
				_orderDate					 = Convert.IsDBNull(command.Parameters["?P_ORDER_DATE"].Value) ? null : (string)command.Parameters["?P_ORDER_DATE"].Value;
				_shippedDate					 = Convert.IsDBNull(command.Parameters["?P_SHİPPED_DATE"].Value) ? null : (string)command.Parameters["?P_SHİPPED_DATE"].Value;
				_shipperİd					 = Convert.IsDBNull(command.Parameters["?P_SHİPPER_İD"].Value) ? null : (string)command.Parameters["?P_SHİPPER_İD"].Value;
				_shipName					 = Convert.IsDBNull(command.Parameters["?P_SHİP_NAME"].Value) ? null : (string)command.Parameters["?P_SHİP_NAME"].Value;
				_shipCity					 = Convert.IsDBNull(command.Parameters["?P_SHİP_CİTY"].Value) ? null : (string)command.Parameters["?P_SHİP_CİTY"].Value;
				_shipStateProvince					 = Convert.IsDBNull(command.Parameters["?P_SHİP_STATE_PROVİNCE"].Value) ? null : (string)command.Parameters["?P_SHİP_STATE_PROVİNCE"].Value;
				_shipZipPostalCode					 = Convert.IsDBNull(command.Parameters["?P_SHİP_ZİP_POSTAL_CODE"].Value) ? null : (string)command.Parameters["?P_SHİP_ZİP_POSTAL_CODE"].Value;
				_shipCountryRegion					 = Convert.IsDBNull(command.Parameters["?P_SHİP_COUNTRY_REGİON"].Value) ? null : (string)command.Parameters["?P_SHİP_COUNTRY_REGİON"].Value;
				_shippingFee					 = Convert.IsDBNull(command.Parameters["?P_SHİPPİNG_FEE"].Value) ? null : (string)command.Parameters["?P_SHİPPİNG_FEE"].Value;
				_taxes					 = Convert.IsDBNull(command.Parameters["?P_TAXES"].Value) ? null : (string)command.Parameters["?P_TAXES"].Value;
				_paymentType					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_TYPE"].Value) ? null : (string)command.Parameters["?P_PAYMENT_TYPE"].Value;
				_paidDate					 = Convert.IsDBNull(command.Parameters["?P_PAİD_DATE"].Value) ? null : (string)command.Parameters["?P_PAİD_DATE"].Value;
				_taxRate					 = Convert.IsDBNull(command.Parameters["?P_TAX_RATE"].Value) ? (double?)null : (double?)command.Parameters["?P_TAX_RATE"].Value;
				_taxStatusİd					 = Convert.IsDBNull(command.Parameters["?P_TAX_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_TAX_STATUS_İD"].Value;
				_statusİd					 = Convert.IsDBNull(command.Parameters["?P_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_STATUS_İD"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public string İd
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}
		public string Employeeİd
		{
			get
			{
				return _employeeİd;
			}
			set
			{
				_employeeİd = value;
			}
		}
		public string Customerİd
		{
			get
			{
				return _customerİd;
			}
			set
			{
				_customerİd = value;
			}
		}
		public string OrderDate
		{
			get
			{
				return _orderDate;
			}
			set
			{
				_orderDate = value;
			}
		}
		public string ShippedDate
		{
			get
			{
				return _shippedDate;
			}
			set
			{
				_shippedDate = value;
			}
		}
		public string Shipperİd
		{
			get
			{
				return _shipperİd;
			}
			set
			{
				_shipperİd = value;
			}
		}
		public string ShipName
		{
			get
			{
				return _shipName;
			}
			set
			{
				_shipName = value;
			}
		}
		public string ShipAddress
		{
			get
			{
				return _shipAddress;
			}
			set
			{
				_shipAddress = value;
			}
		}
		public string ShipCity
		{
			get
			{
				return _shipCity;
			}
			set
			{
				_shipCity = value;
			}
		}
		public string ShipStateProvince
		{
			get
			{
				return _shipStateProvince;
			}
			set
			{
				_shipStateProvince = value;
			}
		}
		public string ShipZipPostalCode
		{
			get
			{
				return _shipZipPostalCode;
			}
			set
			{
				_shipZipPostalCode = value;
			}
		}
		public string ShipCountryRegion
		{
			get
			{
				return _shipCountryRegion;
			}
			set
			{
				_shipCountryRegion = value;
			}
		}
		public string ShippingFee
		{
			get
			{
				return _shippingFee;
			}
			set
			{
				_shippingFee = value;
			}
		}
		public string Taxes
		{
			get
			{
				return _taxes;
			}
			set
			{
				_taxes = value;
			}
		}
		public string PaymentType
		{
			get
			{
				return _paymentType;
			}
			set
			{
				_paymentType = value;
			}
		}
		public string PaidDate
		{
			get
			{
				return _paidDate;
			}
			set
			{
				_paidDate = value;
			}
		}
		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}
		public double? TaxRate
		{
			get
			{
				return _taxRate;
			}
			set
			{
				_taxRate = value;
			}
		}
		public string TaxStatusİd
		{
			get
			{
				return _taxStatusİd;
			}
			set
			{
				_taxStatusİd = value;
			}
		}
		public string Statusİd
		{
			get
			{
				return _statusİd;
			}
			set
			{
				_statusİd = value;
			}
		}
		public string CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}
