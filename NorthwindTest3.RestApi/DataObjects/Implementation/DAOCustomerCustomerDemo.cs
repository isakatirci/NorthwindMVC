/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindTest3.DataObjects.Interfaces;

namespace NorthwindTest3.DataObjects
{
	public partial class DAOCustomerCustomerDemo : zNorthwindTest3Conn_BaseData
	{
		#region member variables
		protected string _customerID;
		protected string _customerTypeID;
		#endregion

		#region class methods
		public DAOCustomerCustomerDemo()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table CustomerCustomerDemo based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOCustomerCustomerDemo
		///</returns>
		///<parameters>
		///string customerID, string customerTypeID
		///</parameters>
		public static DAOCustomerCustomerDemo SelectOne(string customerID, string customerTypeID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CustomerCustomerDemo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomerTypeID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerTypeID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOCustomerCustomerDemo retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOCustomerCustomerDemo();
					retObj._customerID					 = Convert.IsDBNull(dt.Rows[0]["CustomerID"]) ? null : (string)dt.Rows[0]["CustomerID"];
					retObj._customerTypeID					 = Convert.IsDBNull(dt.Rows[0]["CustomerTypeID"]) ? null : (string)dt.Rows[0]["CustomerTypeID"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table CustomerCustomerDemo based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_customerID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomerTypeID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_customerTypeID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table CustomerCustomerDemo based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOCustomerCustomerDemo.
		///</returns>
		///<parameters>
		///string customerID
		///</parameters>
		public static IList<DAOCustomerCustomerDemo> SelectAllByCustomerID(string customerID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectAllByCustomerID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CustomerCustomerDemo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOCustomerCustomerDemo> objList = new List<DAOCustomerCustomerDemo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCustomerCustomerDemo retObj = new DAOCustomerCustomerDemo();
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._customerTypeID					 = Convert.IsDBNull(row["CustomerTypeID"]) ? null : (string)row["CustomerTypeID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string customerID
		///</parameters>
		public static Int32 SelectAllByCustomerIDCount(string customerID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectAllByCustomerIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table CustomerCustomerDemo with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zNorthwindTest3Conn_TxConnectionProvider connectionProvider, string customerID
		///</parameters>
		public static void DeleteAllByCustomerID(zNorthwindTest3Conn_TxConnectionProvider connectionProvider, string customerID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_DeleteAllByCustomerID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table CustomerCustomerDemo based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOCustomerCustomerDemo.
		///</returns>
		///<parameters>
		///string customerTypeID
		///</parameters>
		public static IList<DAOCustomerCustomerDemo> SelectAllByCustomerTypeID(string customerTypeID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectAllByCustomerTypeID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CustomerCustomerDemo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerTypeID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerTypeID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOCustomerCustomerDemo> objList = new List<DAOCustomerCustomerDemo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCustomerCustomerDemo retObj = new DAOCustomerCustomerDemo();
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._customerTypeID					 = Convert.IsDBNull(row["CustomerTypeID"]) ? null : (string)row["CustomerTypeID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string customerTypeID
		///</parameters>
		public static Int32 SelectAllByCustomerTypeIDCount(string customerTypeID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectAllByCustomerTypeIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerTypeID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerTypeID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table CustomerCustomerDemo with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zNorthwindTest3Conn_TxConnectionProvider connectionProvider, string customerTypeID
		///</parameters>
		public static void DeleteAllByCustomerTypeID(zNorthwindTest3Conn_TxConnectionProvider connectionProvider, string customerTypeID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_DeleteAllByCustomerTypeID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerTypeID", SqlDbType.NChar, 10, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)customerTypeID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table CustomerCustomerDemo
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_customerID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomerTypeID", SqlDbType.NChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_customerTypeID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_customerID					 = Convert.IsDBNull(command.Parameters["@CustomerID"].Value) ? null : (string)command.Parameters["@CustomerID"].Value;
				_customerTypeID					 = Convert.IsDBNull(command.Parameters["@CustomerTypeID"].Value) ? null : (string)command.Parameters["@CustomerTypeID"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table CustomerCustomerDemo
		///</Summary>
		///<returns>
		///IList-DAOCustomerCustomerDemo.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOCustomerCustomerDemo> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CustomerCustomerDemo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOCustomerCustomerDemo> objList = new List<DAOCustomerCustomerDemo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCustomerCustomerDemo retObj = new DAOCustomerCustomerDemo();
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._customerTypeID					 = Convert.IsDBNull(row["CustomerTypeID"]) ? null : (string)row["CustomerTypeID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprCustomerCustomerDemo_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiCustomerCustomerDemo
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprCustomerCustomerDemo_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CustomerCustomerDemo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "CustomerID", true) == 0) lst.Add(Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"]);
						if (string.Compare(projection.Member, "CustomerTypeID", true) == 0) lst.Add(Convert.IsDBNull(row["CustomerTypeID"]) ? null : (string)row["CustomerTypeID"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api CustomerCustomerDemo
		///</Summary>
		///<returns>
		///IList-DAOCustomerCustomerDemo.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOCustomerCustomerDemo> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprCustomerCustomerDemo_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("CustomerCustomerDemo");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOCustomerCustomerDemo> objList = new List<DAOCustomerCustomerDemo>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOCustomerCustomerDemo retObj = new DAOCustomerCustomerDemo();
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._customerTypeID					 = Convert.IsDBNull(row["CustomerTypeID"]) ? null : (string)row["CustomerTypeID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api CustomerCustomerDemo
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprCustomerCustomerDemo_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string CustomerID
		{
			get
			{
				return _customerID;
			}
			set
			{
				_customerID = value;
			}
		}

		public string CustomerTypeID
		{
			get
			{
				return _customerTypeID;
			}
			set
			{
				_customerTypeID = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindTest3.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprCustomerCustomerDemo_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[CustomerID]
			,[CustomerTypeID]
			FROM [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerID] = @CustomerID
			AND [CustomerTypeID] = @CustomerTypeID
			";

		internal static string ctprCustomerCustomerDemo_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerID] = @CustomerID
			AND [CustomerTypeID] = @CustomerTypeID
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCustomerID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[CustomerID]
			,[CustomerTypeID]
			FROM [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerID] = @CustomerID OR ([CustomerID] IS NULL AND @CustomerID IS NULL)
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCustomerIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerID] = @CustomerID OR ([CustomerID] IS NULL AND @CustomerID IS NULL)
			";

		internal static string ctprCustomerCustomerDemo_DeleteAllByCustomerID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerID] = @CustomerID OR ([CustomerID] IS NULL AND @CustomerID IS NULL)
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCustomerTypeID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[CustomerID]
			,[CustomerTypeID]
			FROM [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerTypeID] = @CustomerTypeID OR ([CustomerTypeID] IS NULL AND @CustomerTypeID IS NULL)
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCustomerTypeIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerTypeID] = @CustomerTypeID OR ([CustomerTypeID] IS NULL AND @CustomerTypeID IS NULL)
			";

		internal static string ctprCustomerCustomerDemo_DeleteAllByCustomerTypeID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerTypeID] = @CustomerTypeID OR ([CustomerTypeID] IS NULL AND @CustomerTypeID IS NULL)
			";

		internal static string ctprCustomerCustomerDemo_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[CustomerCustomerDemo]
			(
			[CustomerID]
			,[CustomerTypeID]
			)
			VALUES
			(
			@CustomerID
			,@CustomerTypeID
			)
			SELECT 
			@CustomerID = [CustomerID]
			,@CustomerTypeID = [CustomerTypeID]
			FROM [dbo].[CustomerCustomerDemo]
			WHERE 
			[CustomerID] = @CustomerID
			AND [CustomerTypeID] = @CustomerTypeID
			";

		internal static string ctprCustomerCustomerDemo_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[CustomerID]
			,[CustomerTypeID]
			FROM [dbo].[CustomerCustomerDemo]
			";

		internal static string ctprCustomerCustomerDemo_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[CustomerCustomerDemo]
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[CustomerCustomerDemo]
			##CRITERIA##
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[CustomerID]
			,[CustomerTypeID]
			FROM [dbo].[CustomerCustomerDemo]
			##CRITERIA##
			";

		internal static string ctprCustomerCustomerDemo_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[CustomerCustomerDemo]
			##CRITERIA##
			";

	}
}
#endregion
