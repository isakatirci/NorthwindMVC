/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:13
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOIdentityUserProfile.
	///</Summary>
	public partial class BOIdentityUserProfile : zNorthwindRestApiConn_BaseBusiness, IBOIdentityUserProfile, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _userId;
		protected string _firstName;
		protected string _lastName;
		protected string _fullName;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IIdentityUserProfileRepository _iIdentityUserProfileRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOIdentityUserProfile()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 userId
		///</parameters>
		public void Init(Int32 userId)
		{
			try
			{
				IDAOIdentityUserProfile daoIdentityUserProfile = _iIdentityUserProfileRepository.SelectOne(userId);
				_userId = daoIdentityUserProfile.UserId;
				_firstName = daoIdentityUserProfile.FirstName;
				_lastName = daoIdentityUserProfile.LastName;
				_fullName = daoIdentityUserProfile.FullName;
				_ctrVersion = daoIdentityUserProfile.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOIdentityUserProfile
		///</parameters>
		protected internal BOIdentityUserProfile(IDAOIdentityUserProfile daoIdentityUserProfile)
		{
			try
			{
				_userId = daoIdentityUserProfile.UserId;
				_firstName = daoIdentityUserProfile.FirstName;
				_lastName = daoIdentityUserProfile.LastName;
				_fullName = daoIdentityUserProfile.FullName;
				_ctrVersion = daoIdentityUserProfile.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new IdentityUserProfile record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOIdentityUserProfile daoIdentityUserProfile = _iIdentityUserProfileRepository.New();
			RegisterDataObject( _iIdentityUserProfileRepository, _iIdentityUserProfileRepository.BaseData(daoIdentityUserProfile));
			BeginTransaction( _iIdentityUserProfileRepository, "savenewBOIdentityUserProfile");
			try
			{
				daoIdentityUserProfile.UserId = _userId;
				daoIdentityUserProfile.FirstName = _firstName;
				daoIdentityUserProfile.LastName = _lastName;
				daoIdentityUserProfile.FullName = _fullName;
				_iIdentityUserProfileRepository.Insert(daoIdentityUserProfile);
				CommitTransaction( _iIdentityUserProfileRepository);
				Done(this);
				
				_userId = daoIdentityUserProfile.UserId;
				_firstName = daoIdentityUserProfile.FirstName;
				_lastName = daoIdentityUserProfile.LastName;
				_fullName = daoIdentityUserProfile.FullName;
				_ctrVersion = daoIdentityUserProfile.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityUserProfileRepository, "savenewBOIdentityUserProfile");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one IdentityUserProfile record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIdentityUserProfile
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOIdentityUserProfile daoIdentityUserProfile = _iIdentityUserProfileRepository.New();
			RegisterDataObject(_iIdentityUserProfileRepository, _iIdentityUserProfileRepository.BaseData(daoIdentityUserProfile));
			BeginTransaction(_iIdentityUserProfileRepository, "updateBOIdentityUserProfile");
			try
			{
				daoIdentityUserProfile.UserId = _userId;
				daoIdentityUserProfile.FirstName = _firstName;
				daoIdentityUserProfile.LastName = _lastName;
				daoIdentityUserProfile.FullName = _fullName;
				daoIdentityUserProfile.CtrVersion = _ctrVersion;
				_iIdentityUserProfileRepository.Update(daoIdentityUserProfile);
				CommitTransaction(_iIdentityUserProfileRepository);
				Done(this);
				
				_userId = daoIdentityUserProfile.UserId;
				_firstName = daoIdentityUserProfile.FirstName;
				_lastName = daoIdentityUserProfile.LastName;
				_fullName = daoIdentityUserProfile.FullName;
				_ctrVersion = daoIdentityUserProfile.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityUserProfileRepository, "updateBOIdentityUserProfile");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one IdentityUserProfile record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOIdentityUserProfile daoIdentityUserProfile = _iIdentityUserProfileRepository.New();
			RegisterDataObject(_iIdentityUserProfileRepository, _iIdentityUserProfileRepository.BaseData(daoIdentityUserProfile));
			BeginTransaction(_iIdentityUserProfileRepository, "deleteBOIdentityUserProfile");
			try
			{
				daoIdentityUserProfile.UserId = _userId;
				_iIdentityUserProfileRepository.Delete(daoIdentityUserProfile);
				CommitTransaction(_iIdentityUserProfileRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityUserProfileRepository, "deleteBOIdentityUserProfile");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///IdentityUserProfileCollection
		///This method returns the collection of BOIdentityUserProfile objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityUserProfile]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOIdentityUserProfile> IdentityUserProfileCollection(IIdentityUserProfileRepository iIdentityUserProfileRepository)
		{
			Doing(null);
			try
			{
				IList<IBOIdentityUserProfile> boIdentityUserProfileCollection = new List<IBOIdentityUserProfile>();
				IList<IDAOIdentityUserProfile> daoIdentityUserProfileCollection = iIdentityUserProfileRepository.SelectAll();
				Done(null);
				
				foreach(IDAOIdentityUserProfile daoIdentityUserProfile in daoIdentityUserProfileCollection)
					boIdentityUserProfileCollection.Add(new BOIdentityUserProfile(daoIdentityUserProfile));
				
				return boIdentityUserProfileCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///IdentityUserProfileCollectionCount
		///This method returns the collection count of BOIdentityUserProfile objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 IdentityUserProfileCollectionCount(IIdentityUserProfileRepository iIdentityUserProfileRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iIdentityUserProfileRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///IdentityUserProfileCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOIdentityUserProfile>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iIdentityUserProfileRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boIdentityUserProfileCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOIdentityUserProfile> daoIdentityUserProfileCollection = _iIdentityUserProfileRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOIdentityUserProfile resdaoIdentityUserProfile in daoIdentityUserProfileCollection)
					boIdentityUserProfileCollection.Add((T)(object)new BOIdentityUserProfile(resdaoIdentityUserProfile));
				
				return boIdentityUserProfileCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOIdentityUserProfile objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOIdentityUserProfile> boIdentityUserProfileCollection = new List<IBOIdentityUserProfile>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iIdentityUserProfileRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IIdentityUserProfileRepository IdentityUserProfileRepository
		{
			set
			{
				_iIdentityUserProfileRepository = value;
			}
		}
		
		public virtual Int32? UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual string FirstName
		{
			get
			{
				 return _firstName;
			}
			set
			{
				_firstName = value;
				_isDirty = true;
			}
		}
		
		public virtual string LastName
		{
			get
			{
				 return _lastName;
			}
			set
			{
				_lastName = value;
				_isDirty = true;
			}
		}
		
		public virtual string FullName
		{
			get
			{
				 return _fullName;
			}
			set
			{
				_fullName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iIdentityUserProfileRepository;	}
			set {	IdentityUserProfileRepository = (IIdentityUserProfileRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
