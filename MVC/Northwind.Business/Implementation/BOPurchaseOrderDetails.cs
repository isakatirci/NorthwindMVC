/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPurchaseOrderDetails.
	///</Summary>
	public partial class BOPurchaseOrderDetails : zNorthwindConn_BaseBusiness, IBOPurchaseOrderDetails, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _purchaseOrderİd;
		protected string _productİd;
		protected string _quantity;
		protected string _unitCost;
		protected string _dateReceived;
		protected string _postedToİnventory;
		protected string _inventoryİd;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IPurchaseOrderDetailsRepository _iPurchaseOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPurchaseOrderDetails()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.SelectOne(id);
				_id = daoPurchaseOrderDetails.İd;
				_purchaseOrderİd = daoPurchaseOrderDetails.PurchaseOrderİd;
				_productİd = daoPurchaseOrderDetails.Productİd;
				_quantity = daoPurchaseOrderDetails.Quantity;
				_unitCost = daoPurchaseOrderDetails.UnitCost;
				_dateReceived = daoPurchaseOrderDetails.DateReceived;
				_postedToİnventory = daoPurchaseOrderDetails.PostedToİnventory;
				_inventoryİd = daoPurchaseOrderDetails.İnventoryİd;
				_ctrVersion = daoPurchaseOrderDetails.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPurchaseOrderDetails
		///</parameters>
		protected internal BOPurchaseOrderDetails(IDAOPurchaseOrderDetails daoPurchaseOrderDetails)
		{
			try
			{
				_id = daoPurchaseOrderDetails.İd;
				_purchaseOrderİd = daoPurchaseOrderDetails.PurchaseOrderİd;
				_productİd = daoPurchaseOrderDetails.Productİd;
				_quantity = daoPurchaseOrderDetails.Quantity;
				_unitCost = daoPurchaseOrderDetails.UnitCost;
				_dateReceived = daoPurchaseOrderDetails.DateReceived;
				_postedToİnventory = daoPurchaseOrderDetails.PostedToİnventory;
				_inventoryİd = daoPurchaseOrderDetails.İnventoryİd;
				_ctrVersion = daoPurchaseOrderDetails.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PurchaseOrderDetails record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject( _iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction( _iPurchaseOrderDetailsRepository, "savenewBOPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.PurchaseOrderİd = _purchaseOrderİd;
				daoPurchaseOrderDetails.Productİd = _productİd;
				daoPurchaseOrderDetails.Quantity = _quantity;
				daoPurchaseOrderDetails.UnitCost = _unitCost;
				daoPurchaseOrderDetails.DateReceived = _dateReceived;
				daoPurchaseOrderDetails.PostedToİnventory = _postedToİnventory;
				daoPurchaseOrderDetails.İnventoryİd = _inventoryİd;
				_iPurchaseOrderDetailsRepository.Insert(daoPurchaseOrderDetails);
				CommitTransaction( _iPurchaseOrderDetailsRepository);
				Done(this);
				
				_id = daoPurchaseOrderDetails.İd;
				_purchaseOrderİd = daoPurchaseOrderDetails.PurchaseOrderİd;
				_productİd = daoPurchaseOrderDetails.Productİd;
				_quantity = daoPurchaseOrderDetails.Quantity;
				_unitCost = daoPurchaseOrderDetails.UnitCost;
				_dateReceived = daoPurchaseOrderDetails.DateReceived;
				_postedToİnventory = daoPurchaseOrderDetails.PostedToİnventory;
				_inventoryİd = daoPurchaseOrderDetails.İnventoryİd;
				_ctrVersion = daoPurchaseOrderDetails.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "savenewBOPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one PurchaseOrderDetails record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetails
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject(_iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction(_iPurchaseOrderDetailsRepository, "updateBOPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.İd = _id;
				daoPurchaseOrderDetails.PurchaseOrderİd = _purchaseOrderİd;
				daoPurchaseOrderDetails.Productİd = _productİd;
				daoPurchaseOrderDetails.Quantity = _quantity;
				daoPurchaseOrderDetails.UnitCost = _unitCost;
				daoPurchaseOrderDetails.DateReceived = _dateReceived;
				daoPurchaseOrderDetails.PostedToİnventory = _postedToİnventory;
				daoPurchaseOrderDetails.İnventoryİd = _inventoryİd;
				daoPurchaseOrderDetails.CtrVersion = _ctrVersion;
				_iPurchaseOrderDetailsRepository.Update(daoPurchaseOrderDetails);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				
				_id = daoPurchaseOrderDetails.İd;
				_purchaseOrderİd = daoPurchaseOrderDetails.PurchaseOrderİd;
				_productİd = daoPurchaseOrderDetails.Productİd;
				_quantity = daoPurchaseOrderDetails.Quantity;
				_unitCost = daoPurchaseOrderDetails.UnitCost;
				_dateReceived = daoPurchaseOrderDetails.DateReceived;
				_postedToİnventory = daoPurchaseOrderDetails.PostedToİnventory;
				_inventoryİd = daoPurchaseOrderDetails.İnventoryİd;
				_ctrVersion = daoPurchaseOrderDetails.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "updateBOPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PurchaseOrderDetails record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject(_iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction(_iPurchaseOrderDetailsRepository, "deleteBOPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.İd = _id;
				_iPurchaseOrderDetailsRepository.Delete(daoPurchaseOrderDetails);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "deleteBOPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailsCollection
		///This method returns the collection of BOPurchaseOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrderDetails]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOPurchaseOrderDetails> PurchaseOrderDetailsCollection(IPurchaseOrderDetailsRepository iPurchaseOrderDetailsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOPurchaseOrderDetails> boPurchaseOrderDetailsCollection = new List<IBOPurchaseOrderDetails>();
				IList<IDAOPurchaseOrderDetails> daoPurchaseOrderDetailsCollection = iPurchaseOrderDetailsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOPurchaseOrderDetails daoPurchaseOrderDetails in daoPurchaseOrderDetailsCollection)
					boPurchaseOrderDetailsCollection.Add(new BOPurchaseOrderDetails(daoPurchaseOrderDetails));
				
				return boPurchaseOrderDetailsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderDetailsCollectionCount
		///This method returns the collection count of BOPurchaseOrderDetails objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PurchaseOrderDetailsCollectionCount(IPurchaseOrderDetailsRepository iPurchaseOrderDetailsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iPurchaseOrderDetailsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderDetailsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOPurchaseOrderDetails>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iPurchaseOrderDetailsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPurchaseOrderDetailsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOPurchaseOrderDetails> daoPurchaseOrderDetailsCollection = _iPurchaseOrderDetailsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOPurchaseOrderDetails resdaoPurchaseOrderDetails in daoPurchaseOrderDetailsCollection)
					boPurchaseOrderDetailsCollection.Add((T)(object)new BOPurchaseOrderDetails(resdaoPurchaseOrderDetails));
				
				return boPurchaseOrderDetailsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOPurchaseOrderDetails objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOPurchaseOrderDetails> boPurchaseOrderDetailsCollection = new List<IBOPurchaseOrderDetails>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iPurchaseOrderDetailsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrderDetailsRepository PurchaseOrderDetailsRepository
		{
			set
			{
				_iPurchaseOrderDetailsRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string PurchaseOrderİd
		{
			get
			{
				 return _purchaseOrderİd;
			}
			set
			{
				_purchaseOrderİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Productİd
		{
			get
			{
				 return _productİd;
			}
			set
			{
				_productİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual string UnitCost
		{
			get
			{
				 return _unitCost;
			}
			set
			{
				_unitCost = value;
				_isDirty = true;
			}
		}
		
		public virtual string DateReceived
		{
			get
			{
				 return _dateReceived;
			}
			set
			{
				_dateReceived = value;
				_isDirty = true;
			}
		}
		
		public virtual string PostedToİnventory
		{
			get
			{
				 return _postedToİnventory;
			}
			set
			{
				_postedToİnventory = value;
				_isDirty = true;
			}
		}
		
		public virtual string İnventoryİd
		{
			get
			{
				 return _inventoryİd;
			}
			set
			{
				_inventoryİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iPurchaseOrderDetailsRepository;	}
			set {	PurchaseOrderDetailsRepository = (IPurchaseOrderDetailsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
