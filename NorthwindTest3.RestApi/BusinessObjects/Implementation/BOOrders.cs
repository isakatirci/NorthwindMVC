/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrders.
	///It maintains a collection of BOOrderDetails objects.
	///</Summary>
	public partial class BOOrders : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _orderID;
		protected string _customerID;
		protected Int32? _employeeID;
		protected DateTime? _orderDate;
		protected DateTime? _requiredDate;
		protected DateTime? _shippedDate;
		protected Int32? _shipVia;
		protected decimal? _freight;
		protected string _shipName;
		protected string _shipAddress;
		protected string _shipCity;
		protected string _shipRegion;
		protected string _shipPostalCode;
		protected string _shipCountry;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOOrderDetails> _boOrderDetailsCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrders()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 orderID
		///</parameters>
		public BOOrders(Int32 orderID)
		{
			try
			{
				DAOOrders daoOrders = DAOOrders.SelectOne(orderID);
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrders
		///</parameters>
		protected internal BOOrders(DAOOrders daoOrders)
		{
			try
			{
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Orders record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOOrders daoOrders = new DAOOrders();
			RegisterDataObject(daoOrders);
			BeginTransaction("savenewBOOrders");
			try
			{
				daoOrders.CustomerID = _customerID;
				daoOrders.EmployeeID = _employeeID;
				daoOrders.OrderDate = _orderDate;
				daoOrders.RequiredDate = _requiredDate;
				daoOrders.ShippedDate = _shippedDate;
				daoOrders.ShipVia = _shipVia;
				daoOrders.Freight = _freight;
				daoOrders.ShipName = _shipName;
				daoOrders.ShipAddress = _shipAddress;
				daoOrders.ShipCity = _shipCity;
				daoOrders.ShipRegion = _shipRegion;
				daoOrders.ShipPostalCode = _shipPostalCode;
				daoOrders.ShipCountry = _shipCountry;
				daoOrders.Insert();
				CommitTransaction();
				
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOOrders");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Orders record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual void Update()
		{
			DAOOrders daoOrders = new DAOOrders();
			RegisterDataObject(daoOrders);
			BeginTransaction("updateBOOrders");
			try
			{
				daoOrders.OrderID = _orderID;
				daoOrders.CustomerID = _customerID;
				daoOrders.EmployeeID = _employeeID;
				daoOrders.OrderDate = _orderDate;
				daoOrders.RequiredDate = _requiredDate;
				daoOrders.ShippedDate = _shippedDate;
				daoOrders.ShipVia = _shipVia;
				daoOrders.Freight = _freight;
				daoOrders.ShipName = _shipName;
				daoOrders.ShipAddress = _shipAddress;
				daoOrders.ShipCity = _shipCity;
				daoOrders.ShipRegion = _shipRegion;
				daoOrders.ShipPostalCode = _shipPostalCode;
				daoOrders.ShipCountry = _shipCountry;
				daoOrders.Update();
				CommitTransaction();
				
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOOrders");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Orders record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOOrders daoOrders = new DAOOrders();
			RegisterDataObject(daoOrders);
			BeginTransaction("deleteBOOrders");
			try
			{
				daoOrders.OrderID = _orderID;
				daoOrders.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOOrders");
				throw;
			}
		}
		
		///<Summary>
		///OrdersCollection
		///This method returns the collection of BOOrders objects
		///</Summary>
		///<returns>
		///List[BOOrders]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOOrders> OrdersCollection()
		{
			try
			{
				IList<BOOrders> boOrdersCollection = new List<BOOrders>();
				IList<DAOOrders> daoOrdersCollection = DAOOrders.SelectAll();
			
				foreach(DAOOrders daoOrders in daoOrdersCollection)
					boOrdersCollection.Add(new BOOrders(daoOrders));
			
				return boOrdersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OrdersCollectionCount
		///This method returns the collection count of BOOrders objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrdersCollectionCount()
		{
			try
			{
				Int32 objCount = DAOOrders.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns its collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///IList[BOOrderDetails]
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual IList<BOOrderDetails> OrderDetailsCollection()
		{
			try
			{
				if(_boOrderDetailsCollection == null)
					LoadOrderDetailsCollection();
				
				return _boOrderDetailsCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOOrders>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOOrders.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OrdersCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOOrders objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrdersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOOrders> daoOrdersCollection = DAOOrders.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOOrders resdaoOrders in daoOrdersCollection)
					boOrdersCollection.Add((T)(object)new BOOrders(resdaoOrders));
			
				return boOrdersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///OrdersCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOOrders objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOOrders.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadOrderDetailsCollection
		///This method loads the internal collection of BOOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderDetailsCollection()
		{
			try
			{
				_boOrderDetailsCollection = new List<BOOrderDetails>();
				IList<DAOOrderDetails> daoOrderDetailsCollection = DAOOrderDetails.SelectAllByOrderID(_orderID.Value);
				
				foreach(DAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					_boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOrderDetails
		///This method persists a BOOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void AddOrderDetails(BOOrderDetails boOrderDetails)
		{
			DAOOrderDetails daoOrderDetails = new DAOOrderDetails();
			RegisterDataObject(daoOrderDetails);
			BeginTransaction("addOrderDetails");
			try
			{
				daoOrderDetails.ProductID = boOrderDetails.ProductID;
				daoOrderDetails.UnitPrice = boOrderDetails.UnitPrice;
				daoOrderDetails.Quantity = boOrderDetails.Quantity;
				daoOrderDetails.Discount = boOrderDetails.Discount;
				daoOrderDetails.OrderID = _orderID.Value;
				daoOrderDetails.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOrderDetails = new BOOrderDetails(daoOrderDetails);
				if(_boOrderDetailsCollection != null)
					_boOrderDetailsCollection.Add(boOrderDetails);
			}
			catch
			{
				RollbackTransaction("addOrderDetails");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOrderDetails
		///This method deletes all BOOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderDetails()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOrderDetails");
			try
			{
				DAOOrderDetails.DeleteAllByOrderID(ConnectionProvider, _orderID.Value);
				CommitTransaction();
				if(_boOrderDetailsCollection != null)
				{
					_boOrderDetailsCollection.Clear();
					_boOrderDetailsCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOrderDetails");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? OrderID
		{
			get
			{
				 return _orderID;
			}
			set
			{
				_orderID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerID
		{
			get
			{
				 return _customerID;
			}
			set
			{
				_customerID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EmployeeID
		{
			get
			{
				 return _employeeID;
			}
			set
			{
				_employeeID = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? OrderDate
		{
			get
			{
				 return _orderDate;
			}
			set
			{
				_orderDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? RequiredDate
		{
			get
			{
				 return _requiredDate;
			}
			set
			{
				_requiredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ShippedDate
		{
			get
			{
				 return _shippedDate;
			}
			set
			{
				_shippedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ShipVia
		{
			get
			{
				 return _shipVia;
			}
			set
			{
				_shipVia = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Freight
		{
			get
			{
				 return _freight;
			}
			set
			{
				_freight = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipName
		{
			get
			{
				 return _shipName;
			}
			set
			{
				_shipName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipAddress
		{
			get
			{
				 return _shipAddress;
			}
			set
			{
				_shipAddress = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipCity
		{
			get
			{
				 return _shipCity;
			}
			set
			{
				_shipCity = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipRegion
		{
			get
			{
				 return _shipRegion;
			}
			set
			{
				_shipRegion = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipPostalCode
		{
			get
			{
				 return _shipPostalCode;
			}
			set
			{
				_shipPostalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipCountry
		{
			get
			{
				 return _shipCountry;
			}
			set
			{
				_shipCountry = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
