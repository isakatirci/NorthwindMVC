/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrderDetailsStatus.
	///It maintains a collection of BOOrderDetails objects.
	///</Summary>
	public partial class BOOrderDetailsStatus : zNorthwindConn_BaseBusiness, IBOOrderDetailsStatus, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _statusName;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOOrderDetails> _boOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IOrderDetailsStatusRepository _iOrderDetailsStatusRepository;
		protected IOrderDetailsRepository _iOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrderDetailsStatus()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOOrderDetailsStatus daoOrderDetailsStatus = _iOrderDetailsStatusRepository.SelectOne(id);
				_id = daoOrderDetailsStatus.İd;
				_statusName = daoOrderDetailsStatus.StatusName;
				_ctrVersion = daoOrderDetailsStatus.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrderDetailsStatus
		///</parameters>
		protected internal BOOrderDetailsStatus(IDAOOrderDetailsStatus daoOrderDetailsStatus)
		{
			try
			{
				_id = daoOrderDetailsStatus.İd;
				_statusName = daoOrderDetailsStatus.StatusName;
				_ctrVersion = daoOrderDetailsStatus.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new OrderDetailsStatus record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOOrderDetailsStatus daoOrderDetailsStatus = _iOrderDetailsStatusRepository.New();
			RegisterDataObject( _iOrderDetailsStatusRepository, _iOrderDetailsStatusRepository.BaseData(daoOrderDetailsStatus));
			BeginTransaction( _iOrderDetailsStatusRepository, "savenewBOOrderDetailsStatus");
			try
			{
				daoOrderDetailsStatus.İd = _id;
				daoOrderDetailsStatus.StatusName = _statusName;
				_iOrderDetailsStatusRepository.Insert(daoOrderDetailsStatus);
				CommitTransaction( _iOrderDetailsStatusRepository);
				Done(this);
				
				_id = daoOrderDetailsStatus.İd;
				_statusName = daoOrderDetailsStatus.StatusName;
				_ctrVersion = daoOrderDetailsStatus.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsStatusRepository, "savenewBOOrderDetailsStatus");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one OrderDetailsStatus record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetailsStatus
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOOrderDetailsStatus daoOrderDetailsStatus = _iOrderDetailsStatusRepository.New();
			RegisterDataObject(_iOrderDetailsStatusRepository, _iOrderDetailsStatusRepository.BaseData(daoOrderDetailsStatus));
			BeginTransaction(_iOrderDetailsStatusRepository, "updateBOOrderDetailsStatus");
			try
			{
				daoOrderDetailsStatus.İd = _id;
				daoOrderDetailsStatus.StatusName = _statusName;
				daoOrderDetailsStatus.CtrVersion = _ctrVersion;
				_iOrderDetailsStatusRepository.Update(daoOrderDetailsStatus);
				CommitTransaction(_iOrderDetailsStatusRepository);
				Done(this);
				
				_id = daoOrderDetailsStatus.İd;
				_statusName = daoOrderDetailsStatus.StatusName;
				_ctrVersion = daoOrderDetailsStatus.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsStatusRepository, "updateBOOrderDetailsStatus");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one OrderDetailsStatus record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOOrderDetailsStatus daoOrderDetailsStatus = _iOrderDetailsStatusRepository.New();
			RegisterDataObject(_iOrderDetailsStatusRepository, _iOrderDetailsStatusRepository.BaseData(daoOrderDetailsStatus));
			BeginTransaction(_iOrderDetailsStatusRepository, "deleteBOOrderDetailsStatus");
			try
			{
				daoOrderDetailsStatus.İd = _id;
				_iOrderDetailsStatusRepository.Delete(daoOrderDetailsStatus);
				CommitTransaction(_iOrderDetailsStatusRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsStatusRepository, "deleteBOOrderDetailsStatus");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///OrderDetailsStatusCollection
		///This method returns the collection of BOOrderDetailsStatus objects
		///</Summary>
		///<returns>
		///IList[IBOOrderDetailsStatus]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOOrderDetailsStatus> OrderDetailsStatusCollection(IOrderDetailsStatusRepository iOrderDetailsStatusRepository)
		{
			Doing(null);
			try
			{
				IList<IBOOrderDetailsStatus> boOrderDetailsStatusCollection = new List<IBOOrderDetailsStatus>();
				IList<IDAOOrderDetailsStatus> daoOrderDetailsStatusCollection = iOrderDetailsStatusRepository.SelectAll();
				Done(null);
				
				foreach(IDAOOrderDetailsStatus daoOrderDetailsStatus in daoOrderDetailsStatusCollection)
					boOrderDetailsStatusCollection.Add(new BOOrderDetailsStatus(daoOrderDetailsStatus));
				
				return boOrderDetailsStatusCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///OrderDetailsStatusCollectionCount
		///This method returns the collection count of BOOrderDetailsStatus objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrderDetailsStatusCollectionCount(IOrderDetailsStatusRepository iOrderDetailsStatusRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iOrderDetailsStatusRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///OrderDetailsStatusCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOOrderDetailsStatus>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iOrderDetailsStatusRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrderDetailsStatusCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOOrderDetailsStatus> daoOrderDetailsStatusCollection = _iOrderDetailsStatusRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOOrderDetailsStatus resdaoOrderDetailsStatus in daoOrderDetailsStatusCollection)
					boOrderDetailsStatusCollection.Add((T)(object)new BOOrderDetailsStatus(resdaoOrderDetailsStatus));
				
				return boOrderDetailsStatusCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOOrderDetailsStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOOrderDetailsStatus> boOrderDetailsStatusCollection = new List<IBOOrderDetailsStatus>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iOrderDetailsStatusRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns its collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOOrderDetails]
		///</returns>
		///<parameters>
		///BOOrderDetailsStatus
		///</parameters>
		public virtual IList<IBOOrderDetails> OrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderDetailsCollection == null)
					LoadOrderDetailsCollection();
				return _boOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadOrderDetailsCollection
		///This method loads the internal collection of BOOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boOrderDetailsCollection = new List<IBOOrderDetails>();
				IList<IDAOOrderDetails> daoOrderDetailsCollection = _iOrderDetailsRepository.SelectAllByStatusİd(_id);
				Done(this);
				
				foreach(IDAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					_boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrderDetails
		///This method persists a BOOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void AddOrderDetails(IBOOrderDetails boOrderDetails)
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject(_iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction(_iOrderDetailsRepository, "addOrderDetails");
			try
			{
				daoOrderDetails.İd = boOrderDetails.İd;
				daoOrderDetails.Orderİd = boOrderDetails.Orderİd;
				daoOrderDetails.Productİd = boOrderDetails.Productİd;
				daoOrderDetails.Quantity = boOrderDetails.Quantity;
				daoOrderDetails.UnitPrice = boOrderDetails.UnitPrice;
				daoOrderDetails.Discount = boOrderDetails.Discount;
				daoOrderDetails.DateAllocated = boOrderDetails.DateAllocated;
				daoOrderDetails.PurchaseOrderİd = boOrderDetails.PurchaseOrderİd;
				daoOrderDetails.İnventoryİd = boOrderDetails.İnventoryİd;
				daoOrderDetails.Statusİd = _id;
				_iOrderDetailsRepository.Insert(daoOrderDetails);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrderDetails = new BOOrderDetails(daoOrderDetails);
				if(_boOrderDetailsCollection != null)
					_boOrderDetailsCollection.Add(boOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "addOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrderDetails
		///This method deletes all BOOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iOrderDetailsRepository, null);
			BeginTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
			try
			{
				_iOrderDetailsRepository.DeleteAllByStatusİd(_id);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				if(_boOrderDetailsCollection != null)
				{
					_boOrderDetailsCollection.Clear();
					_boOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderDetailsStatusRepository OrderDetailsStatusRepository
		{
			set
			{
				_iOrderDetailsStatusRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderDetailsRepository OrderDetailsRepository
		{
			set
			{
				_iOrderDetailsRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string StatusName
		{
			get
			{
				 return _statusName;
			}
			set
			{
				_statusName = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iOrderDetailsStatusRepository;	}
			set {	OrderDetailsStatusRepository = (IOrderDetailsStatusRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
