/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 12:15:59
**************************************************************/

using System;
using System.Data;
using System.Configuration;
using MySql.Data.MySqlClient;
using NorthwindClassLibrary.DataObjects.Interfaces;

namespace NorthwindClassLibrary.DataObjects
{
	public partial class zNorthwindClassLibrayConn_TxConnectionProvider : IDisposable, IzNorthwindClassLibrayConn_TxConnectionProvider
	{
		protected bool _isDisposed;
		protected MySqlConnection _txConnection;
		protected MySqlTransaction _currTransaction;
		protected Int32 _transactionCount = 0;
		static string _connectionString;

		public zNorthwindClassLibrayConn_TxConnectionProvider()
		{
			Init();
		}

		private void Init()
		{
			_txConnection = new MySqlConnection();
			_txConnection.ConnectionString = ConnectionString;
			_currTransaction = null;
			_isDisposed = false;
		}

		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool isDisposing)
		{
			if(!_isDisposed)
			{
				if(isDisposing)
				{
					if(_currTransaction != null)
					{
						((IDisposable)_currTransaction).Dispose();
						_currTransaction = null;
					}
				}
			}
			_isDisposed = true;
		}

		public virtual void OpenConnection()
		{
			try
			{
				if(_txConnection.State == ConnectionState.Open)
					throw new Exception("Connection is already open");
				
				_txConnection.Open();
				_currTransaction = null;
				_isDisposed = false;
			}
			catch
			{
				throw;
			}
		}

		public virtual void CloseConnection(bool commit)
		{
			if((_txConnection == null) || (_txConnection.State != ConnectionState.Open))
				return;
			try
			{
				if((_currTransaction != null) && commit)
					_currTransaction.Commit();
				
				else if(_currTransaction != null)
					_currTransaction.Rollback();
				
				if(_currTransaction != null)
					_currTransaction.Dispose();
				
				_currTransaction = null;
				_txConnection.Close();
			}
			catch
			{
				throw;
			}
		}

		public virtual void BeginTransaction(string trans)
		{
			if(_currTransaction != null)
				throw new Exception("Transaction nesting not allowed");
			
			if((_txConnection == null) || (_txConnection.State != ConnectionState.Open))
				throw new Exception("Connection not open");
			
			try
			{
				_currTransaction = _txConnection.BeginTransaction(IsolationLevel.ReadCommitted);
			}
			catch
			{
				throw;
			}
		}

		public virtual void CommitTransaction()
		{
			if(_currTransaction == null)
				throw new Exception("No Transaction to commit");
			
			if((_txConnection == null) || (_txConnection.State != ConnectionState.Open))
				throw new Exception("Connection not open");
			
			try
			{
				_currTransaction.Commit();
				_currTransaction.Dispose();
				_currTransaction = null;
			}
			catch
			{
				throw;
			}
		}

		public virtual void RollbackTransaction(string trans)
		{
			if(_currTransaction == null)
				throw new Exception("No Transaction to rollback");
			
			if((_txConnection == null) || (_txConnection.State != ConnectionState.Open))
				throw new Exception("Connection not open");
			
			try
			{
				_currTransaction.Rollback();
				_currTransaction.Dispose();
				_currTransaction = null;
			}
			catch(InvalidOperationException ex2)
			{	//if transaction completed exception, swallow it
				Console.WriteLine("Rollback Exception Type: {0}", ex2.GetType());
				Console.WriteLine("Message: {0}", ex2.Message);
			}
			catch
			{
				throw;
			}
			finally
			{
				if (_currTransaction != null)
				{
					_currTransaction.Dispose();
					_currTransaction = null;
				}
			}
		}

		public virtual MySqlTransaction CurrentTransaction
		{
			get
			{
				return _currTransaction;
			}
		}

		public virtual Int32 TransactionCount
		{
			get { return _transactionCount; }
			set { _transactionCount = value; }
		}

		public virtual MySqlConnection Connection
		{
			get
			{
				return _txConnection;
			}
		}

		public static string ConnectionString
		{
			set { _connectionString = value; }
			get
			{
				if (!string.IsNullOrEmpty(_connectionString))
					return _connectionString;
				
				return zNorthwindClassLibrayConn_ConfigWrapper.GetConnectionString("6fc33974-fa8c-4426-9497-9b40eb90c694");
			}
		}
	}
}
