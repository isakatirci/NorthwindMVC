/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:26:31
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindTest.DataObjects;
using NorthwindTest.DataObjects.Interfaces;
using NorthwindTest.BusinessObjects.Interfaces;
using NorthwindTest.BusinessObjects.Repository.Interfaces;

namespace NorthwindTest.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOOrders.
	///It maintains a collection of BOOrderDetails objects.
	///</Summary>
	public partial class BOOrders : zNorthwindTestConn_BaseBusiness, IBOOrders, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _orderID;
		protected string _customerID;
		protected Int32? _employeeID;
		protected DateTime? _orderDate;
		protected DateTime? _requiredDate;
		protected DateTime? _shippedDate;
		protected Int32? _shipVia;
		protected decimal? _freight;
		protected string _shipName;
		protected string _shipAddress;
		protected string _shipCity;
		protected string _shipRegion;
		protected string _shipPostalCode;
		protected string _shipCountry;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOOrderDetails> _boOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IOrdersRepository _iOrdersRepository;
		protected IOrderDetailsRepository _iOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOOrders()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 orderID
		///</parameters>
		public void Init(Int32 orderID)
		{
			try
			{
				IDAOOrders daoOrders = _iOrdersRepository.SelectOne(orderID);
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
				_ctrVersion = daoOrders.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOOrders
		///</parameters>
		protected internal BOOrders(IDAOOrders daoOrders)
		{
			try
			{
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
				_ctrVersion = daoOrders.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Orders record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOOrders daoOrders = _iOrdersRepository.New();
			RegisterDataObject( _iOrdersRepository, _iOrdersRepository.BaseData(daoOrders));
			BeginTransaction( _iOrdersRepository, "savenewBOOrders");
			try
			{
				daoOrders.CustomerID = _customerID;
				daoOrders.EmployeeID = _employeeID;
				daoOrders.OrderDate = _orderDate;
				daoOrders.RequiredDate = _requiredDate;
				daoOrders.ShippedDate = _shippedDate;
				daoOrders.ShipVia = _shipVia;
				daoOrders.Freight = _freight;
				daoOrders.ShipName = _shipName;
				daoOrders.ShipAddress = _shipAddress;
				daoOrders.ShipCity = _shipCity;
				daoOrders.ShipRegion = _shipRegion;
				daoOrders.ShipPostalCode = _shipPostalCode;
				daoOrders.ShipCountry = _shipCountry;
				_iOrdersRepository.Insert(daoOrders);
				CommitTransaction( _iOrdersRepository);
				Done(this);
				
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
				_ctrVersion = daoOrders.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "savenewBOOrders");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Orders record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOOrders daoOrders = _iOrdersRepository.New();
			RegisterDataObject(_iOrdersRepository, _iOrdersRepository.BaseData(daoOrders));
			BeginTransaction(_iOrdersRepository, "updateBOOrders");
			try
			{
				daoOrders.OrderID = _orderID;
				daoOrders.CustomerID = _customerID;
				daoOrders.EmployeeID = _employeeID;
				daoOrders.OrderDate = _orderDate;
				daoOrders.RequiredDate = _requiredDate;
				daoOrders.ShippedDate = _shippedDate;
				daoOrders.ShipVia = _shipVia;
				daoOrders.Freight = _freight;
				daoOrders.ShipName = _shipName;
				daoOrders.ShipAddress = _shipAddress;
				daoOrders.ShipCity = _shipCity;
				daoOrders.ShipRegion = _shipRegion;
				daoOrders.ShipPostalCode = _shipPostalCode;
				daoOrders.ShipCountry = _shipCountry;
				daoOrders.CtrVersion = _ctrVersion;
				_iOrdersRepository.Update(daoOrders);
				CommitTransaction(_iOrdersRepository);
				Done(this);
				
				_orderID = daoOrders.OrderID;
				_customerID = daoOrders.CustomerID;
				_employeeID = daoOrders.EmployeeID;
				_orderDate = daoOrders.OrderDate;
				_requiredDate = daoOrders.RequiredDate;
				_shippedDate = daoOrders.ShippedDate;
				_shipVia = daoOrders.ShipVia;
				_freight = daoOrders.Freight;
				_shipName = daoOrders.ShipName;
				_shipAddress = daoOrders.ShipAddress;
				_shipCity = daoOrders.ShipCity;
				_shipRegion = daoOrders.ShipRegion;
				_shipPostalCode = daoOrders.ShipPostalCode;
				_shipCountry = daoOrders.ShipCountry;
				_ctrVersion = daoOrders.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "updateBOOrders");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Orders record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOOrders daoOrders = _iOrdersRepository.New();
			RegisterDataObject(_iOrdersRepository, _iOrdersRepository.BaseData(daoOrders));
			BeginTransaction(_iOrdersRepository, "deleteBOOrders");
			try
			{
				daoOrders.OrderID = _orderID;
				_iOrdersRepository.Delete(daoOrders);
				CommitTransaction(_iOrdersRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "deleteBOOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///OrdersCollection
		///This method returns the collection of BOOrders objects
		///</Summary>
		///<returns>
		///IList[IBOOrders]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOOrders> OrdersCollection(IOrdersRepository iOrdersRepository)
		{
			Doing(null);
			try
			{
				IList<IBOOrders> boOrdersCollection = new List<IBOOrders>();
				IList<IDAOOrders> daoOrdersCollection = iOrdersRepository.SelectAll();
				Done(null);
				
				foreach(IDAOOrders daoOrders in daoOrdersCollection)
					boOrdersCollection.Add(new BOOrders(daoOrders));
				
				return boOrdersCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///OrdersCollectionCount
		///This method returns the collection count of BOOrders objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 OrdersCollectionCount(IOrdersRepository iOrdersRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iOrdersRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///OrdersCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOOrders>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iOrdersRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boOrdersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOOrders> daoOrdersCollection = _iOrdersRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOOrders resdaoOrders in daoOrdersCollection)
					boOrdersCollection.Add((T)(object)new BOOrders(resdaoOrders));
				
				return boOrdersCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOOrders objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOOrders> boOrdersCollection = new List<IBOOrders>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iOrdersRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns its collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOOrderDetails]
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual IList<IBOOrderDetails> OrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderDetailsCollection == null)
					LoadOrderDetailsCollection();
				return _boOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadOrderDetailsCollection
		///This method loads the internal collection of BOOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boOrderDetailsCollection = new List<IBOOrderDetails>();
				IList<IDAOOrderDetails> daoOrderDetailsCollection = _iOrderDetailsRepository.SelectAllByOrderID(_orderID.Value);
				Done(this);
				
				foreach(IDAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					_boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrderDetails
		///This method persists a BOOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void AddOrderDetails(IBOOrderDetails boOrderDetails)
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject(_iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction(_iOrderDetailsRepository, "addOrderDetails");
			try
			{
				daoOrderDetails.ProductID = boOrderDetails.ProductID;
				daoOrderDetails.UnitPrice = boOrderDetails.UnitPrice;
				daoOrderDetails.Quantity = boOrderDetails.Quantity;
				daoOrderDetails.Discount = boOrderDetails.Discount;
				daoOrderDetails.OrderID = _orderID.Value;
				_iOrderDetailsRepository.Insert(daoOrderDetails);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrderDetails = new BOOrderDetails(daoOrderDetails);
				if(_boOrderDetailsCollection != null)
					_boOrderDetailsCollection.Add(boOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "addOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrderDetails
		///This method deletes all BOOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iOrderDetailsRepository, null);
			BeginTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
			try
			{
				_iOrderDetailsRepository.DeleteAllByOrderID(_orderID.Value);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				if(_boOrderDetailsCollection != null)
				{
					_boOrderDetailsCollection.Clear();
					_boOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrdersRepository OrdersRepository
		{
			set
			{
				_iOrdersRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderDetailsRepository OrderDetailsRepository
		{
			set
			{
				_iOrderDetailsRepository = value;
			}
		}
		
		public virtual Int32? OrderID
		{
			get
			{
				 return _orderID;
			}
			set
			{
				_orderID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerID
		{
			get
			{
				 return _customerID;
			}
			set
			{
				_customerID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? EmployeeID
		{
			get
			{
				 return _employeeID;
			}
			set
			{
				_employeeID = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? OrderDate
		{
			get
			{
				 return _orderDate;
			}
			set
			{
				_orderDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? RequiredDate
		{
			get
			{
				 return _requiredDate;
			}
			set
			{
				_requiredDate = value;
				_isDirty = true;
			}
		}
		
		public virtual DateTime? ShippedDate
		{
			get
			{
				 return _shippedDate;
			}
			set
			{
				_shippedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? ShipVia
		{
			get
			{
				 return _shipVia;
			}
			set
			{
				_shipVia = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Freight
		{
			get
			{
				 return _freight;
			}
			set
			{
				_freight = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipName
		{
			get
			{
				 return _shipName;
			}
			set
			{
				_shipName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipAddress
		{
			get
			{
				 return _shipAddress;
			}
			set
			{
				_shipAddress = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipCity
		{
			get
			{
				 return _shipCity;
			}
			set
			{
				_shipCity = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipRegion
		{
			get
			{
				 return _shipRegion;
			}
			set
			{
				_shipRegion = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipPostalCode
		{
			get
			{
				 return _shipPostalCode;
			}
			set
			{
				_shipPostalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShipCountry
		{
			get
			{
				 return _shipCountry;
			}
			set
			{
				_shipCountry = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iOrdersRepository;	}
			set {	OrdersRepository = (IOrdersRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
