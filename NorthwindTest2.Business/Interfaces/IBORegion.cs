/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:11:04
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest2.Data.Interfaces;
using NorthwindTest2.Business.Repository.Interfaces;

namespace NorthwindTest2.Business.Interfaces
{
	///<Summary>
	///Interface definition
	///This is the interface definition for the class BORegion.
	///</Summary>
	public partial interface IBORegion 
	{
		#region class methods
		
		///<Summary>
		///SaveNew
		///This method persists a new Region record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		void SaveNew();
		
		///<Summary>
		///Update
		///This method updates one Region record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BORegion
		///</parameters>
		void Update();
		
		///<Summary>
		///Delete
		///This method deletes one Region record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		void Delete();
		
		///<Summary>
		///TerritoriesCollection
		///This method returns its collection of BOTerritories objects
		///</Summary>
		///<returns>
		///IList[IBOTerritories]
		///</returns>
		///<parameters>
		///BORegion
		///</parameters>
		IList<IBOTerritories> TerritoriesCollection();
		
		///<Summary>
		///LoadTerritoriesCollection
		///This method loads the internal collection of BOTerritories objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		void LoadTerritoriesCollection();
		
		///<Summary>
		///AddTerritories
		///This method persists a BOTerritories object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTerritories
		///</parameters>
		void AddTerritories(IBOTerritories boTerritories);
		
		///<Summary>
		///DeleteAllTerritories
		///This method deletes all BOTerritories objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		void DeleteAllTerritories();
		
		#endregion

		#region member properties
		
		IRegionRepository RegionRepository	{	set;}
		
		ITerritoriesRepository TerritoriesRepository	{	set;}
		
		Int32? RegionID	{	get;	set;}
		
		string RegionDescription	{	get;	set;}
		
		Int32? CtrVersion	{	get;	}
		
		bool IsDirty	{	get;	set;}
		
		#endregion
	}
}
