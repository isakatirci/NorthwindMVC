/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOEmployees.
	///It maintains a collection of BOEmployeePrivileges,BOOrders,BOPurchaseOrders objects.
	///</Summary>
	public partial class BOEmployees : zNorthwindConn_BaseBusiness, IBOEmployees, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _company;
		protected string _lastName;
		protected string _firstName;
		protected string _emailAddress;
		protected string _jobTitle;
		protected string _businessPhone;
		protected string _homePhone;
		protected string _mobilePhone;
		protected string _faxNumber;
		protected string _address;
		protected string _city;
		protected string _stateProvince;
		protected string _zipPostalCode;
		protected string _countryRegion;
		protected string _webPage;
		protected string _notes;
		protected byte[] _attachments;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOEmployeePrivileges> _boEmployeePrivilegesCollection;
		List<IBOOrders> _boOrdersCollection;
		List<IBOPurchaseOrders> _boPurchaseOrdersCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IEmployeesRepository _iEmployeesRepository;
		protected IEmployeePrivilegesRepository _iEmployeePrivilegesRepository;
		protected IOrdersRepository _iOrdersRepository;
		protected IPurchaseOrdersRepository _iPurchaseOrdersRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOEmployees()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOEmployees daoEmployees = _iEmployeesRepository.SelectOne(id);
				_id = daoEmployees.İd;
				_company = daoEmployees.Company;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_emailAddress = daoEmployees.EmailAddress;
				_jobTitle = daoEmployees.JobTitle;
				_businessPhone = daoEmployees.BusinessPhone;
				_homePhone = daoEmployees.HomePhone;
				_mobilePhone = daoEmployees.MobilePhone;
				_faxNumber = daoEmployees.FaxNumber;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_stateProvince = daoEmployees.StateProvince;
				_zipPostalCode = daoEmployees.ZipPostalCode;
				_countryRegion = daoEmployees.CountryRegion;
				_webPage = daoEmployees.WebPage;
				_notes = daoEmployees.Notes;
				_attachments = daoEmployees.Attachments;
				_ctrVersion = daoEmployees.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOEmployees
		///</parameters>
		protected internal BOEmployees(IDAOEmployees daoEmployees)
		{
			try
			{
				_id = daoEmployees.İd;
				_company = daoEmployees.Company;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_emailAddress = daoEmployees.EmailAddress;
				_jobTitle = daoEmployees.JobTitle;
				_businessPhone = daoEmployees.BusinessPhone;
				_homePhone = daoEmployees.HomePhone;
				_mobilePhone = daoEmployees.MobilePhone;
				_faxNumber = daoEmployees.FaxNumber;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_stateProvince = daoEmployees.StateProvince;
				_zipPostalCode = daoEmployees.ZipPostalCode;
				_countryRegion = daoEmployees.CountryRegion;
				_webPage = daoEmployees.WebPage;
				_notes = daoEmployees.Notes;
				_attachments = daoEmployees.Attachments;
				_ctrVersion = daoEmployees.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Employees record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject( _iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction( _iEmployeesRepository, "savenewBOEmployees");
			try
			{
				daoEmployees.Company = _company;
				daoEmployees.LastName = _lastName;
				daoEmployees.FirstName = _firstName;
				daoEmployees.EmailAddress = _emailAddress;
				daoEmployees.JobTitle = _jobTitle;
				daoEmployees.BusinessPhone = _businessPhone;
				daoEmployees.HomePhone = _homePhone;
				daoEmployees.MobilePhone = _mobilePhone;
				daoEmployees.FaxNumber = _faxNumber;
				daoEmployees.Address = _address;
				daoEmployees.City = _city;
				daoEmployees.StateProvince = _stateProvince;
				daoEmployees.ZipPostalCode = _zipPostalCode;
				daoEmployees.CountryRegion = _countryRegion;
				daoEmployees.WebPage = _webPage;
				daoEmployees.Notes = _notes;
				daoEmployees.Attachments = _attachments;
				_iEmployeesRepository.Insert(daoEmployees);
				CommitTransaction( _iEmployeesRepository);
				Done(this);
				
				_id = daoEmployees.İd;
				_company = daoEmployees.Company;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_emailAddress = daoEmployees.EmailAddress;
				_jobTitle = daoEmployees.JobTitle;
				_businessPhone = daoEmployees.BusinessPhone;
				_homePhone = daoEmployees.HomePhone;
				_mobilePhone = daoEmployees.MobilePhone;
				_faxNumber = daoEmployees.FaxNumber;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_stateProvince = daoEmployees.StateProvince;
				_zipPostalCode = daoEmployees.ZipPostalCode;
				_countryRegion = daoEmployees.CountryRegion;
				_webPage = daoEmployees.WebPage;
				_notes = daoEmployees.Notes;
				_attachments = daoEmployees.Attachments;
				_ctrVersion = daoEmployees.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "savenewBOEmployees");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Employees record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject(_iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction(_iEmployeesRepository, "updateBOEmployees");
			try
			{
				daoEmployees.İd = _id;
				daoEmployees.Company = _company;
				daoEmployees.LastName = _lastName;
				daoEmployees.FirstName = _firstName;
				daoEmployees.EmailAddress = _emailAddress;
				daoEmployees.JobTitle = _jobTitle;
				daoEmployees.BusinessPhone = _businessPhone;
				daoEmployees.HomePhone = _homePhone;
				daoEmployees.MobilePhone = _mobilePhone;
				daoEmployees.FaxNumber = _faxNumber;
				daoEmployees.Address = _address;
				daoEmployees.City = _city;
				daoEmployees.StateProvince = _stateProvince;
				daoEmployees.ZipPostalCode = _zipPostalCode;
				daoEmployees.CountryRegion = _countryRegion;
				daoEmployees.WebPage = _webPage;
				daoEmployees.Notes = _notes;
				daoEmployees.Attachments = _attachments;
				daoEmployees.CtrVersion = _ctrVersion;
				_iEmployeesRepository.Update(daoEmployees);
				CommitTransaction(_iEmployeesRepository);
				Done(this);
				
				_id = daoEmployees.İd;
				_company = daoEmployees.Company;
				_lastName = daoEmployees.LastName;
				_firstName = daoEmployees.FirstName;
				_emailAddress = daoEmployees.EmailAddress;
				_jobTitle = daoEmployees.JobTitle;
				_businessPhone = daoEmployees.BusinessPhone;
				_homePhone = daoEmployees.HomePhone;
				_mobilePhone = daoEmployees.MobilePhone;
				_faxNumber = daoEmployees.FaxNumber;
				_address = daoEmployees.Address;
				_city = daoEmployees.City;
				_stateProvince = daoEmployees.StateProvince;
				_zipPostalCode = daoEmployees.ZipPostalCode;
				_countryRegion = daoEmployees.CountryRegion;
				_webPage = daoEmployees.WebPage;
				_notes = daoEmployees.Notes;
				_attachments = daoEmployees.Attachments;
				_ctrVersion = daoEmployees.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "updateBOEmployees");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Employees record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOEmployees daoEmployees = _iEmployeesRepository.New();
			RegisterDataObject(_iEmployeesRepository, _iEmployeesRepository.BaseData(daoEmployees));
			BeginTransaction(_iEmployeesRepository, "deleteBOEmployees");
			try
			{
				daoEmployees.İd = _id;
				_iEmployeesRepository.Delete(daoEmployees);
				CommitTransaction(_iEmployeesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeesRepository, "deleteBOEmployees");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///EmployeesCollection
		///This method returns the collection of BOEmployees objects
		///</Summary>
		///<returns>
		///IList[IBOEmployees]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOEmployees> EmployeesCollection(IEmployeesRepository iEmployeesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOEmployees> boEmployeesCollection = new List<IBOEmployees>();
				IList<IDAOEmployees> daoEmployeesCollection = iEmployeesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOEmployees daoEmployees in daoEmployeesCollection)
					boEmployeesCollection.Add(new BOEmployees(daoEmployees));
				
				return boEmployeesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///EmployeesCollectionCount
		///This method returns the collection count of BOEmployees objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 EmployeesCollectionCount(IEmployeesRepository iEmployeesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iEmployeesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///EmployeesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOEmployees>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iEmployeesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boEmployeesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOEmployees> daoEmployeesCollection = _iEmployeesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOEmployees resdaoEmployees in daoEmployeesCollection)
					boEmployeesCollection.Add((T)(object)new BOEmployees(resdaoEmployees));
				
				return boEmployeesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOEmployees objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOEmployees> boEmployeesCollection = new List<IBOEmployees>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iEmployeesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///EmployeePrivilegesCollection
		///This method returns its collection of BOEmployeePrivileges objects
		///</Summary>
		///<returns>
		///IList[IBOEmployeePrivileges]
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual IList<IBOEmployeePrivileges> EmployeePrivilegesCollection()
		{
			Doing(this);
			try
			{
				if(_boEmployeePrivilegesCollection == null)
					LoadEmployeePrivilegesCollection();
				return _boEmployeePrivilegesCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///OrdersCollection
		///This method returns its collection of BOOrders objects
		///</Summary>
		///<returns>
		///IList[IBOOrders]
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual IList<IBOOrders> OrdersCollection()
		{
			Doing(this);
			try
			{
				if(_boOrdersCollection == null)
					LoadOrdersCollection();
				return _boOrdersCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///PurchaseOrdersCollection
		///This method returns its collection of BOPurchaseOrders objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrders]
		///</returns>
		///<parameters>
		///BOEmployees
		///</parameters>
		public virtual IList<IBOPurchaseOrders> PurchaseOrdersCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrdersCollection == null)
					LoadPurchaseOrdersCollection();
				return _boPurchaseOrdersCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadEmployeePrivilegesCollection
		///This method loads the internal collection of BOEmployeePrivileges objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadEmployeePrivilegesCollection()
		{
			Doing(this);
			try
			{
				_boEmployeePrivilegesCollection = new List<IBOEmployeePrivileges>();
				IList<IDAOEmployeePrivileges> daoEmployeePrivilegesCollection = _iEmployeePrivilegesRepository.SelectAllByEmployeeİd(_id);
				Done(this);
				
				foreach(IDAOEmployeePrivileges daoEmployeePrivileges in daoEmployeePrivilegesCollection)
					_boEmployeePrivilegesCollection.Add(new BOEmployeePrivileges(daoEmployeePrivileges));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddEmployeePrivileges
		///This method persists a BOEmployeePrivileges object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployeePrivileges
		///</parameters>
		public virtual void AddEmployeePrivileges(IBOEmployeePrivileges boEmployeePrivileges)
		{
			Doing(this);
			IDAOEmployeePrivileges daoEmployeePrivileges = _iEmployeePrivilegesRepository.New();
			RegisterDataObject(_iEmployeePrivilegesRepository, _iEmployeePrivilegesRepository.BaseData(daoEmployeePrivileges));
			BeginTransaction(_iEmployeePrivilegesRepository, "addEmployeePrivileges");
			try
			{
				daoEmployeePrivileges.Privilegeİd = boEmployeePrivileges.Privilegeİd;
				daoEmployeePrivileges.Employeeİd = _id;
				_iEmployeePrivilegesRepository.Insert(daoEmployeePrivileges);
				CommitTransaction(_iEmployeePrivilegesRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boEmployeePrivileges = new BOEmployeePrivileges(daoEmployeePrivileges);
				if(_boEmployeePrivilegesCollection != null)
					_boEmployeePrivilegesCollection.Add(boEmployeePrivileges);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeePrivilegesRepository, "addEmployeePrivileges");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllEmployeePrivileges
		///This method deletes all BOEmployeePrivileges objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllEmployeePrivileges()
		{
			Doing(this);
			RegisterDataObject(_iEmployeePrivilegesRepository, null);
			BeginTransaction(_iEmployeePrivilegesRepository, "deleteAllEmployeePrivileges");
			try
			{
				_iEmployeePrivilegesRepository.DeleteAllByEmployeeİd(_id);
				CommitTransaction(_iEmployeePrivilegesRepository);
				Done(this);
				if(_boEmployeePrivilegesCollection != null)
				{
					_boEmployeePrivilegesCollection.Clear();
					_boEmployeePrivilegesCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeePrivilegesRepository, "deleteAllEmployeePrivileges");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadOrdersCollection
		///This method loads the internal collection of BOOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrdersCollection()
		{
			Doing(this);
			try
			{
				_boOrdersCollection = new List<IBOOrders>();
				IList<IDAOOrders> daoOrdersCollection = _iOrdersRepository.SelectAllByEmployeeİd(_id);
				Done(this);
				
				foreach(IDAOOrders daoOrders in daoOrdersCollection)
					_boOrdersCollection.Add(new BOOrders(daoOrders));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrders
		///This method persists a BOOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual void AddOrders(IBOOrders boOrders)
		{
			Doing(this);
			IDAOOrders daoOrders = _iOrdersRepository.New();
			RegisterDataObject(_iOrdersRepository, _iOrdersRepository.BaseData(daoOrders));
			BeginTransaction(_iOrdersRepository, "addOrders");
			try
			{
				daoOrders.İd = boOrders.İd;
				daoOrders.Customerİd = boOrders.Customerİd;
				daoOrders.OrderDate = boOrders.OrderDate;
				daoOrders.ShippedDate = boOrders.ShippedDate;
				daoOrders.Shipperİd = boOrders.Shipperİd;
				daoOrders.ShipName = boOrders.ShipName;
				daoOrders.ShipAddress = boOrders.ShipAddress;
				daoOrders.ShipCity = boOrders.ShipCity;
				daoOrders.ShipStateProvince = boOrders.ShipStateProvince;
				daoOrders.ShipZipPostalCode = boOrders.ShipZipPostalCode;
				daoOrders.ShipCountryRegion = boOrders.ShipCountryRegion;
				daoOrders.ShippingFee = boOrders.ShippingFee;
				daoOrders.Taxes = boOrders.Taxes;
				daoOrders.PaymentType = boOrders.PaymentType;
				daoOrders.PaidDate = boOrders.PaidDate;
				daoOrders.Notes = boOrders.Notes;
				daoOrders.TaxRate = boOrders.TaxRate;
				daoOrders.TaxStatusİd = boOrders.TaxStatusİd;
				daoOrders.Statusİd = boOrders.Statusİd;
				daoOrders.Employeeİd = _id;
				_iOrdersRepository.Insert(daoOrders);
				CommitTransaction(_iOrdersRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrders = new BOOrders(daoOrders);
				if(_boOrdersCollection != null)
					_boOrdersCollection.Add(boOrders);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "addOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrders
		///This method deletes all BOOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrders()
		{
			Doing(this);
			RegisterDataObject(_iOrdersRepository, null);
			BeginTransaction(_iOrdersRepository, "deleteAllOrders");
			try
			{
				_iOrdersRepository.DeleteAllByEmployeeİd(_id);
				CommitTransaction(_iOrdersRepository);
				Done(this);
				if(_boOrdersCollection != null)
				{
					_boOrdersCollection.Clear();
					_boOrdersCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrdersRepository, "deleteAllOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadPurchaseOrdersCollection
		///This method loads the internal collection of BOPurchaseOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrdersCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrdersCollection = new List<IBOPurchaseOrders>();
				IList<IDAOPurchaseOrders> daoPurchaseOrdersCollection = _iPurchaseOrdersRepository.SelectAllByCreatedBy(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrders daoPurchaseOrders in daoPurchaseOrdersCollection)
					_boPurchaseOrdersCollection.Add(new BOPurchaseOrders(daoPurchaseOrders));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrders
		///This method persists a BOPurchaseOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrders
		///</parameters>
		public virtual void AddPurchaseOrders(IBOPurchaseOrders boPurchaseOrders)
		{
			Doing(this);
			IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.New();
			RegisterDataObject(_iPurchaseOrdersRepository, _iPurchaseOrdersRepository.BaseData(daoPurchaseOrders));
			BeginTransaction(_iPurchaseOrdersRepository, "addPurchaseOrders");
			try
			{
				daoPurchaseOrders.İd = boPurchaseOrders.İd;
				daoPurchaseOrders.Supplierİd = boPurchaseOrders.Supplierİd;
				daoPurchaseOrders.SubmittedDate = boPurchaseOrders.SubmittedDate;
				daoPurchaseOrders.CreationDate = boPurchaseOrders.CreationDate;
				daoPurchaseOrders.Statusİd = boPurchaseOrders.Statusİd;
				daoPurchaseOrders.ExpectedDate = boPurchaseOrders.ExpectedDate;
				daoPurchaseOrders.ShippingFee = boPurchaseOrders.ShippingFee;
				daoPurchaseOrders.Taxes = boPurchaseOrders.Taxes;
				daoPurchaseOrders.PaymentDate = boPurchaseOrders.PaymentDate;
				daoPurchaseOrders.PaymentAmount = boPurchaseOrders.PaymentAmount;
				daoPurchaseOrders.PaymentMethod = boPurchaseOrders.PaymentMethod;
				daoPurchaseOrders.Notes = boPurchaseOrders.Notes;
				daoPurchaseOrders.ApprovedBy = boPurchaseOrders.ApprovedBy;
				daoPurchaseOrders.ApprovedDate = boPurchaseOrders.ApprovedDate;
				daoPurchaseOrders.SubmittedBy = boPurchaseOrders.SubmittedBy;
				daoPurchaseOrders.CreatedBy = _id;
				_iPurchaseOrdersRepository.Insert(daoPurchaseOrders);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrders = new BOPurchaseOrders(daoPurchaseOrders);
				if(_boPurchaseOrdersCollection != null)
					_boPurchaseOrdersCollection.Add(boPurchaseOrders);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "addPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrders
		///This method deletes all BOPurchaseOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrders()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrdersRepository, null);
			BeginTransaction(_iPurchaseOrdersRepository, "deleteAllPurchaseOrders");
			try
			{
				_iPurchaseOrdersRepository.DeleteAllByCreatedBy(_id);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				if(_boPurchaseOrdersCollection != null)
				{
					_boPurchaseOrdersCollection.Clear();
					_boPurchaseOrdersCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "deleteAllPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeesRepository EmployeesRepository
		{
			set
			{
				_iEmployeesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeePrivilegesRepository EmployeePrivilegesRepository
		{
			set
			{
				_iEmployeePrivilegesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrdersRepository OrdersRepository
		{
			set
			{
				_iOrdersRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrdersRepository PurchaseOrdersRepository
		{
			set
			{
				_iPurchaseOrdersRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Company
		{
			get
			{
				 return _company;
			}
			set
			{
				_company = value;
				_isDirty = true;
			}
		}
		
		public virtual string LastName
		{
			get
			{
				 return _lastName;
			}
			set
			{
				_lastName = value;
				_isDirty = true;
			}
		}
		
		public virtual string FirstName
		{
			get
			{
				 return _firstName;
			}
			set
			{
				_firstName = value;
				_isDirty = true;
			}
		}
		
		public virtual string EmailAddress
		{
			get
			{
				 return _emailAddress;
			}
			set
			{
				_emailAddress = value;
				_isDirty = true;
			}
		}
		
		public virtual string JobTitle
		{
			get
			{
				 return _jobTitle;
			}
			set
			{
				_jobTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessPhone
		{
			get
			{
				 return _businessPhone;
			}
			set
			{
				_businessPhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string HomePhone
		{
			get
			{
				 return _homePhone;
			}
			set
			{
				_homePhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string MobilePhone
		{
			get
			{
				 return _mobilePhone;
			}
			set
			{
				_mobilePhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string FaxNumber
		{
			get
			{
				 return _faxNumber;
			}
			set
			{
				_faxNumber = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string StateProvince
		{
			get
			{
				 return _stateProvince;
			}
			set
			{
				_stateProvince = value;
				_isDirty = true;
			}
		}
		
		public virtual string ZipPostalCode
		{
			get
			{
				 return _zipPostalCode;
			}
			set
			{
				_zipPostalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string CountryRegion
		{
			get
			{
				 return _countryRegion;
			}
			set
			{
				_countryRegion = value;
				_isDirty = true;
			}
		}
		
		public virtual string WebPage
		{
			get
			{
				 return _webPage;
			}
			set
			{
				_webPage = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual byte[] Attachments
		{
			get
			{
				 return _attachments;
			}
			set
			{
				_attachments = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iEmployeesRepository;	}
			set {	EmployeesRepository = (IEmployeesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
