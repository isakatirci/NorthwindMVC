USE `northwind`;
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
DROP PROCEDURE IF EXISTS `northwind`.`ctpr__versioning_schema`;
DELIMITER $$

CREATE PROCEDURE `northwind`.`ctpr__versioning_schema`
(
P_TABLE_SCHEMA varchar(45)
,P_TABLE_NAME varchar(45)
)

BEGIN
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS cs
WHERE cs.TABLE_SCHEMA = P_TABLE_SCHEMA AND cs.TABLE_NAME = P_TABLE_NAME
AND cs.COLUMN_NAME = 'ctr_version') then

SET @schemaChangeSql = CONCAT('ALTER TABLE ', P_TABLE_NAME, ' ADD COLUMN ctr_version smallint(5) NOT NULL DEFAULT 0'); 
PREPARE sqlCommand FROM @schemaChangeSql;
EXECUTE sqlCommand;
END IF;
END $$
DELIMITER ;

-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'customers');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`customers`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`customers`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_insertone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, OUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`customers`
(
`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
)
VALUES
(
P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_ADDRESS
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_WEB_PAGE
,P_NOTES
,P_ATTACHMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`customers`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`customers`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`customers`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`customers`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`company`,
`last_name`,
`first_name`,
`email_address`,
`job_title`,
`business_phone`,
`home_phone`,
`mobile_phone`,
`fax_number`,
`address`,
`city`,
`state_province`,
`zip_postal_code`,
`country_region`,
`web_page`,
`notes`,
`attachments`,
`ctr_version`
FROM `northwind`.`customers`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`customers`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_customers_updateone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, INOUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`customers`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`customers` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`customers` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`customers`
SET
`company` = P_COMPANY
,`last_name` = P_LAST_NAME
,`first_name` = P_FİRST_NAME
,`email_address` = P_EMAİL_ADDRESS
,`job_title` = P_JOB_TİTLE
,`business_phone` = P_BUSİNESS_PHONE
,`home_phone` = P_HOME_PHONE
,`mobile_phone` = P_MOBİLE_PHONE
,`fax_number` = P_FAX_NUMBER
,`address` = P_ADDRESS
,`city` = P_CİTY
,`state_province` = P_STATE_PROVİNCE
,`zip_postal_code` = P_ZİP_POSTAL_CODE
,`country_region` = P_COUNTRY_REGİON
,`web_page` = P_WEB_PAGE
,`notes` = P_NOTES
,`attachments` = P_ATTACHMENTS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`customers`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getone`
(
IN P_EMPLOYEE_İD int(11)
, IN P_PRİVİLEGE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`employee_id`
,`privilege_id`
FROM `northwind`.`employee_privileges`
WHERE 
`employee_id` = P_EMPLOYEE_İD
 AND `privilege_id` = P_PRİVİLEGE_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_deleteone`
(
IN P_EMPLOYEE_İD int(11)
, IN P_PRİVİLEGE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`employee_privileges`
WHERE 
`employee_id` = P_EMPLOYEE_İD
 AND `privilege_id` = P_PRİVİLEGE_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbyemployeeid`
(
IN P_EMPLOYEE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`employee_id`
,`privilege_id`
FROM `northwind`.`employee_privileges`
WHERE 
`employee_id` = P_EMPLOYEE_İD OR (`employee_id` IS NULL AND P_EMPLOYEE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbyemployeeidcount`
(
IN P_EMPLOYEE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`employee_privileges`
WHERE 
`employee_id` = P_EMPLOYEE_İD OR (`employee_id` IS NULL AND P_EMPLOYEE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_deletebyemployeeid`
(
IN P_EMPLOYEE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`employee_privileges`
WHERE 
`employee_id` = P_EMPLOYEE_İD OR (`employee_id` IS NULL AND P_EMPLOYEE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbyprivilegeid`
(
IN P_PRİVİLEGE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`employee_id`
,`privilege_id`
FROM `northwind`.`employee_privileges`
WHERE 
`privilege_id` = P_PRİVİLEGE_İD OR (`privilege_id` IS NULL AND P_PRİVİLEGE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbyprivilegeidcount`
(
IN P_PRİVİLEGE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`employee_privileges`
WHERE 
`privilege_id` = P_PRİVİLEGE_İD OR (`privilege_id` IS NULL AND P_PRİVİLEGE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_deletebyprivilegeid`
(
IN P_PRİVİLEGE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`employee_privileges`
WHERE 
`privilege_id` = P_PRİVİLEGE_İD OR (`privilege_id` IS NULL AND P_PRİVİLEGE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_insertone`
(
INOUT P_EMPLOYEE_İD int(11)
, INOUT P_PRİVİLEGE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`employee_privileges`
(
`employee_id`
,`privilege_id`
)
VALUES
(
P_EMPLOYEE_İD
,P_PRİVİLEGE_İD
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
employee_id
,privilege_id
INTO 
P_EMPLOYEE_İD
,P_PRİVİLEGE_İD
FROM `northwind`.`employee_privileges`
WHERE employee_id = P_EMPLOYEE_İD AND privilege_id = P_PRİVİLEGE_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`employee_id`
,`privilege_id`
FROM `northwind`.`employee_privileges`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`employee_privileges`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`employee_privileges`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`employee_id`,
`privilege_id`
FROM `northwind`.`employee_privileges`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employee_privileges_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`employee_privileges`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'employees');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`employees`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`employees`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_insertone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, OUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`employees`
(
`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
)
VALUES
(
P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_ADDRESS
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_WEB_PAGE
,P_NOTES
,P_ATTACHMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`employees`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`employees`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`employees`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`employees`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`company`,
`last_name`,
`first_name`,
`email_address`,
`job_title`,
`business_phone`,
`home_phone`,
`mobile_phone`,
`fax_number`,
`address`,
`city`,
`state_province`,
`zip_postal_code`,
`country_region`,
`web_page`,
`notes`,
`attachments`,
`ctr_version`
FROM `northwind`.`employees`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`employees`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_employees_updateone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, INOUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`employees`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`employees` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`employees` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`employees`
SET
`company` = P_COMPANY
,`last_name` = P_LAST_NAME
,`first_name` = P_FİRST_NAME
,`email_address` = P_EMAİL_ADDRESS
,`job_title` = P_JOB_TİTLE
,`business_phone` = P_BUSİNESS_PHONE
,`home_phone` = P_HOME_PHONE
,`mobile_phone` = P_MOBİLE_PHONE
,`fax_number` = P_FAX_NUMBER
,`address` = P_ADDRESS
,`city` = P_CİTY
,`state_province` = P_STATE_PROVİNCE
,`zip_postal_code` = P_ZİP_POSTAL_CODE
,`country_region` = P_COUNTRY_REGİON
,`web_page` = P_WEB_PAGE
,`notes` = P_NOTES
,`attachments` = P_ATTACHMENTS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`employees`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'identityrole');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_getone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`Id`
,`Name`
,`ctr_version`
FROM `northwind`.`identityrole`
WHERE 
`Id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_deleteone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityrole`
WHERE 
`Id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_insertone`
(
OUT P_ID int(11)
, INOUT P_NAME varchar(256)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`identityrole`
(
`Name`
)
VALUES
(
P_NAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
Id
,Name
,ctr_version
INTO 
P_ID
,P_NAME
,P_CTR_VERSİON
FROM `northwind`.`identityrole`
WHERE Id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`Id`
,`Name`
,`ctr_version`
FROM `northwind`.`identityrole`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityrole`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`identityrole`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`Id`,
`Name`,
`ctr_version`
FROM `northwind`.`identityrole`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`identityrole`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityrole_updateone`
(
INOUT P_ID int(11)
, INOUT P_NAME varchar(256)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`identityrole`
WHERE `Id` = P_ID
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`identityrole` WHERE WHERE `Id` = P_ID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`identityrole` WHERE WHERE `Id` = P_ID');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`identityrole`
SET
`Name` = P_NAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
Id = P_ID
;

-- return field values (some may have been modified by a trigger)
SELECT 
Id
,Name
,ctr_version
INTO 
P_ID
,P_NAME
,P_CTR_VERSİON
FROM `northwind`.`identityrole`
WHERE Id = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'identityuser');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_getone`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`Email`
,`EmailConfirmed`
,`PasswordHash`
,`SecurityStamp`
,`PhoneNumber`
,`PhoneNumberConfirmed`
,`TwoFactorEnabled`
,`LockoutEndDateUtc`
,`LockoutEnabled`
,`AccessFailedCount`
,`Username`
,`ctr_version`
FROM `northwind`.`identityuser`
WHERE 
`UserId` = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_deleteone`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuser`
WHERE 
`UserId` = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_insertone`
(
IN P_PASSWORDHASH longtext
, IN P_SECURİTYSTAMP longtext
, IN P_PHONENUMBER longtext
, OUT P_USERID int(11)
, INOUT P_EMAİL varchar(256)
, INOUT P_EMAİLCONFİRMED bit(1)
, INOUT P_PHONENUMBERCONFİRMED bit(1)
, INOUT P_TWOFACTORENABLED bit(1)
, INOUT P_LOCKOUTENDDATEUTC datetime
, INOUT P_LOCKOUTENABLED bit(1)
, INOUT P_ACCESSFAİLEDCOUNT int(11)
, INOUT P_USERNAME varchar(256)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`identityuser`
(
`Email`
,`EmailConfirmed`
,`PasswordHash`
,`SecurityStamp`
,`PhoneNumber`
,`PhoneNumberConfirmed`
,`TwoFactorEnabled`
,`LockoutEndDateUtc`
,`LockoutEnabled`
,`AccessFailedCount`
,`Username`
)
VALUES
(
P_EMAİL
,P_EMAİLCONFİRMED
,P_PASSWORDHASH
,P_SECURİTYSTAMP
,P_PHONENUMBER
,P_PHONENUMBERCONFİRMED
,P_TWOFACTORENABLED
,P_LOCKOUTENDDATEUTC
,P_LOCKOUTENABLED
,P_ACCESSFAİLEDCOUNT
,P_USERNAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
UserId
,Email
,EmailConfirmed
,PhoneNumberConfirmed
,TwoFactorEnabled
,LockoutEndDateUtc
,LockoutEnabled
,AccessFailedCount
,Username
,ctr_version
INTO 
P_USERID
,P_EMAİL
,P_EMAİLCONFİRMED
,P_PHONENUMBERCONFİRMED
,P_TWOFACTORENABLED
,P_LOCKOUTENDDATEUTC
,P_LOCKOUTENABLED
,P_ACCESSFAİLEDCOUNT
,P_USERNAME
,P_CTR_VERSİON
FROM `northwind`.`identityuser`
WHERE UserId = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`Email`
,`EmailConfirmed`
,`PasswordHash`
,`SecurityStamp`
,`PhoneNumber`
,`PhoneNumberConfirmed`
,`TwoFactorEnabled`
,`LockoutEndDateUtc`
,`LockoutEnabled`
,`AccessFailedCount`
,`Username`
,`ctr_version`
FROM `northwind`.`identityuser`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuser`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`identityuser`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`UserId`,
`Email`,
`EmailConfirmed`,
`PasswordHash`,
`SecurityStamp`,
`PhoneNumber`,
`PhoneNumberConfirmed`,
`TwoFactorEnabled`,
`LockoutEndDateUtc`,
`LockoutEnabled`,
`AccessFailedCount`,
`Username`,
`ctr_version`
FROM `northwind`.`identityuser`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`identityuser`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuser_updateone`
(
IN P_PASSWORDHASH longtext
, IN P_SECURİTYSTAMP longtext
, IN P_PHONENUMBER longtext
, INOUT P_USERID int(11)
, INOUT P_EMAİL varchar(256)
, INOUT P_EMAİLCONFİRMED bit(1)
, INOUT P_PHONENUMBERCONFİRMED bit(1)
, INOUT P_TWOFACTORENABLED bit(1)
, INOUT P_LOCKOUTENDDATEUTC datetime
, INOUT P_LOCKOUTENABLED bit(1)
, INOUT P_ACCESSFAİLEDCOUNT int(11)
, INOUT P_USERNAME varchar(256)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`identityuser`
WHERE `UserId` = P_USERID
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`identityuser` WHERE WHERE `UserId` = P_USERID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`identityuser` WHERE WHERE `UserId` = P_USERID');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`identityuser`
SET
`Email` = P_EMAİL
,`EmailConfirmed` = P_EMAİLCONFİRMED
,`PasswordHash` = P_PASSWORDHASH
,`SecurityStamp` = P_SECURİTYSTAMP
,`PhoneNumber` = P_PHONENUMBER
,`PhoneNumberConfirmed` = P_PHONENUMBERCONFİRMED
,`TwoFactorEnabled` = P_TWOFACTORENABLED
,`LockoutEndDateUtc` = P_LOCKOUTENDDATEUTC
,`LockoutEnabled` = P_LOCKOUTENABLED
,`AccessFailedCount` = P_ACCESSFAİLEDCOUNT
,`Username` = P_USERNAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
UserId = P_USERID
;

-- return field values (some may have been modified by a trigger)
SELECT 
UserId
,Email
,EmailConfirmed
,PhoneNumberConfirmed
,TwoFactorEnabled
,LockoutEndDateUtc
,LockoutEnabled
,AccessFailedCount
,Username
,ctr_version
INTO 
P_USERID
,P_EMAİL
,P_EMAİLCONFİRMED
,P_PHONENUMBERCONFİRMED
,P_TWOFACTORENABLED
,P_LOCKOUTENDDATEUTC
,P_LOCKOUTENABLED
,P_ACCESSFAİLEDCOUNT
,P_USERNAME
,P_CTR_VERSİON
FROM `northwind`.`identityuser`
WHERE UserId = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'identityuserclaim');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`Id`
,`UserId`
,`ClaimType`
,`ClaimValue`
,`ctr_version`
FROM `northwind`.`identityuserclaim`
WHERE 
`Id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_deleteone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserclaim`
WHERE 
`Id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getbyuserıd`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`Id`
,`UserId`
,`ClaimType`
,`ClaimValue`
,`ctr_version`
FROM `northwind`.`identityuserclaim`
WHERE 
`UserId` = P_USERID OR (`UserId` IS NULL AND P_USERID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getbyuserıdcount`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserclaim`
WHERE 
`UserId` = P_USERID OR (`UserId` IS NULL AND P_USERID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_deletebyuserıd`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserclaim`
WHERE 
`UserId` = P_USERID OR (`UserId` IS NULL AND P_USERID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_insertone`
(
IN P_CLAİMTYPE longtext
, IN P_CLAİMVALUE longtext
, OUT P_ID int(11)
, INOUT P_USERID int(11)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`identityuserclaim`
(
`UserId`
,`ClaimType`
,`ClaimValue`
)
VALUES
(
P_USERID
,P_CLAİMTYPE
,P_CLAİMVALUE
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
Id
,UserId
,ctr_version
INTO 
P_ID
,P_USERID
,P_CTR_VERSİON
FROM `northwind`.`identityuserclaim`
WHERE Id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`Id`
,`UserId`
,`ClaimType`
,`ClaimValue`
,`ctr_version`
FROM `northwind`.`identityuserclaim`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserclaim`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`identityuserclaim`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`Id`,
`UserId`,
`ClaimType`,
`ClaimValue`,
`ctr_version`
FROM `northwind`.`identityuserclaim`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`identityuserclaim`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserclaim_updateone`
(
IN P_CLAİMTYPE longtext
, IN P_CLAİMVALUE longtext
, INOUT P_ID int(11)
, INOUT P_USERID int(11)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`identityuserclaim`
WHERE `Id` = P_ID
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`identityuserclaim` WHERE WHERE `Id` = P_ID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`identityuserclaim` WHERE WHERE `Id` = P_ID');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`identityuserclaim`
SET
`UserId` = P_USERID
,`ClaimType` = P_CLAİMTYPE
,`ClaimValue` = P_CLAİMVALUE
,`ctr_version` = P_CTR_VERSİON
WHERE 
Id = P_ID
;

-- return field values (some may have been modified by a trigger)
SELECT 
Id
,UserId
,ctr_version
INTO 
P_ID
,P_USERID
,P_CTR_VERSİON
FROM `northwind`.`identityuserclaim`
WHERE Id = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_getone`
(
IN P_LOGİNPROVİDER varchar(128)
, IN P_PROVİDERKEY varchar(128)
, IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`LoginProvider`
,`ProviderKey`
,`UserId`
FROM `northwind`.`identityuserlogin`
WHERE 
`LoginProvider` = P_LOGİNPROVİDER
 AND `ProviderKey` = P_PROVİDERKEY
 AND `UserId` = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_deleteone`
(
IN P_LOGİNPROVİDER varchar(128)
, IN P_PROVİDERKEY varchar(128)
, IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserlogin`
WHERE 
`LoginProvider` = P_LOGİNPROVİDER
 AND `ProviderKey` = P_PROVİDERKEY
 AND `UserId` = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_insertone`
(
INOUT P_LOGİNPROVİDER varchar(128)
, INOUT P_PROVİDERKEY varchar(128)
, INOUT P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`identityuserlogin`
(
`LoginProvider`
,`ProviderKey`
,`UserId`
)
VALUES
(
P_LOGİNPROVİDER
,P_PROVİDERKEY
,P_USERID
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
LoginProvider
,ProviderKey
,UserId
INTO 
P_LOGİNPROVİDER
,P_PROVİDERKEY
,P_USERID
FROM `northwind`.`identityuserlogin`
WHERE LoginProvider = P_LOGİNPROVİDER AND ProviderKey = P_PROVİDERKEY AND UserId = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`LoginProvider`
,`ProviderKey`
,`UserId`
FROM `northwind`.`identityuserlogin`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserlogin`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`identityuserlogin`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`LoginProvider`,
`ProviderKey`,
`UserId`
FROM `northwind`.`identityuserlogin`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserlogin_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`identityuserlogin`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'identityuserprofile');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_getone`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`FirstName`
,`LastName`
,`FullName`
,`ctr_version`
FROM `northwind`.`identityuserprofile`
WHERE 
`UserId` = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_deleteone`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserprofile`
WHERE 
`UserId` = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_insertone`
(
INOUT P_USERID int(11)
, INOUT P_FİRSTNAME varchar(50)
, INOUT P_LASTNAME varchar(50)
, INOUT P_FULLNAME varchar(100)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`identityuserprofile`
(
`UserId`
,`FirstName`
,`LastName`
,`FullName`
)
VALUES
(
P_USERID
,P_FİRSTNAME
,P_LASTNAME
,P_FULLNAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
UserId
,FirstName
,LastName
,FullName
,ctr_version
INTO 
P_USERID
,P_FİRSTNAME
,P_LASTNAME
,P_FULLNAME
,P_CTR_VERSİON
FROM `northwind`.`identityuserprofile`
WHERE UserId = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`FirstName`
,`LastName`
,`FullName`
,`ctr_version`
FROM `northwind`.`identityuserprofile`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserprofile`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`identityuserprofile`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`UserId`,
`FirstName`,
`LastName`,
`FullName`,
`ctr_version`
FROM `northwind`.`identityuserprofile`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`identityuserprofile`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserprofile_updateone`
(
INOUT P_USERID int(11)
, INOUT P_FİRSTNAME varchar(50)
, INOUT P_LASTNAME varchar(50)
, INOUT P_FULLNAME varchar(100)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`identityuserprofile`
WHERE `UserId` = P_USERID
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`identityuserprofile` WHERE WHERE `UserId` = P_USERID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`identityuserprofile` WHERE WHERE `UserId` = P_USERID');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`identityuserprofile`
SET
`FirstName` = P_FİRSTNAME
,`LastName` = P_LASTNAME
,`FullName` = P_FULLNAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
UserId = P_USERID
;

-- return field values (some may have been modified by a trigger)
SELECT 
UserId
,FirstName
,LastName
,FullName
,ctr_version
INTO 
P_USERID
,P_FİRSTNAME
,P_LASTNAME
,P_FULLNAME
,P_CTR_VERSİON
FROM `northwind`.`identityuserprofile`
WHERE UserId = P_USERID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getone`
(
IN P_USERID int(11)
, IN P_ROLEID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`RoleId`
FROM `northwind`.`identityuserrole`
WHERE 
`UserId` = P_USERID
 AND `RoleId` = P_ROLEID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_deleteone`
(
IN P_USERID int(11)
, IN P_ROLEID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserrole`
WHERE 
`UserId` = P_USERID
 AND `RoleId` = P_ROLEID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbyuserıd`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`RoleId`
FROM `northwind`.`identityuserrole`
WHERE 
`UserId` = P_USERID OR (`UserId` IS NULL AND P_USERID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbyuserıdcount`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserrole`
WHERE 
`UserId` = P_USERID OR (`UserId` IS NULL AND P_USERID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_deletebyuserıd`
(
IN P_USERID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserrole`
WHERE 
`UserId` = P_USERID OR (`UserId` IS NULL AND P_USERID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbyroleıd`
(
IN P_ROLEID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`RoleId`
FROM `northwind`.`identityuserrole`
WHERE 
`RoleId` = P_ROLEID OR (`RoleId` IS NULL AND P_ROLEID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbyroleıdcount`
(
IN P_ROLEID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserrole`
WHERE 
`RoleId` = P_ROLEID OR (`RoleId` IS NULL AND P_ROLEID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_deletebyroleıd`
(
IN P_ROLEID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`identityuserrole`
WHERE 
`RoleId` = P_ROLEID OR (`RoleId` IS NULL AND P_ROLEID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_insertone`
(
INOUT P_USERID int(11)
, INOUT P_ROLEID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`identityuserrole`
(
`UserId`
,`RoleId`
)
VALUES
(
P_USERID
,P_ROLEID
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
UserId
,RoleId
INTO 
P_USERID
,P_ROLEID
FROM `northwind`.`identityuserrole`
WHERE UserId = P_USERID AND RoleId = P_ROLEID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`UserId`
,`RoleId`
FROM `northwind`.`identityuserrole`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`identityuserrole`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`identityuserrole`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`UserId`,
`RoleId`
FROM `northwind`.`identityuserrole`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_identityuserrole_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`identityuserrole`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'inventory_transaction_types');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_getone`
(
IN P_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`type_name`
,`ctr_version`
FROM `northwind`.`inventory_transaction_types`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_deleteone`
(
IN P_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transaction_types`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_insertone`
(
INOUT P_İD tinyint(4)
, INOUT P_TYPE_NAME varchar(50)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`inventory_transaction_types`
(
`id`
,`type_name`
)
VALUES
(
P_İD
,P_TYPE_NAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,type_name
,ctr_version
INTO 
P_İD
,P_TYPE_NAME
,P_CTR_VERSİON
FROM `northwind`.`inventory_transaction_types`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`type_name`
,`ctr_version`
FROM `northwind`.`inventory_transaction_types`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transaction_types`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`inventory_transaction_types`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`type_name`,
`ctr_version`
FROM `northwind`.`inventory_transaction_types`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`inventory_transaction_types`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transaction_types_updateone`
(
INOUT P_İD tinyint(4)
, INOUT P_TYPE_NAME varchar(50)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`inventory_transaction_types`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`inventory_transaction_types` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`inventory_transaction_types` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`inventory_transaction_types`
SET
`type_name` = P_TYPE_NAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,type_name
,ctr_version
INTO 
P_İD
,P_TYPE_NAME
,P_CTR_VERSİON
FROM `northwind`.`inventory_transaction_types`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'inventory_transactions');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbytransactiontype`
(
IN P_TRANSACTİON_TYPE tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`transaction_type` = P_TRANSACTİON_TYPE OR (`transaction_type` IS NULL AND P_TRANSACTİON_TYPE IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbytransactiontypecount`
(
IN P_TRANSACTİON_TYPE tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`transaction_type` = P_TRANSACTİON_TYPE OR (`transaction_type` IS NULL AND P_TRANSACTİON_TYPE IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebytransactiontype`
(
IN P_TRANSACTİON_TYPE tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`transaction_type` = P_TRANSACTİON_TYPE OR (`transaction_type` IS NULL AND P_TRANSACTİON_TYPE IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbyproductid`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbyproductidcount`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebyproductid`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbypurchaseorderid`
(
IN P_PURCHASE_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_İD OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbypurchaseorderidcount`
(
IN P_PURCHASE_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_İD OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebypurchaseorderid`
(
IN P_PURCHASE_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_İD OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycustomerorderid`
(
IN P_CUSTOMER_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`customer_order_id` = P_CUSTOMER_ORDER_İD OR (`customer_order_id` IS NULL AND P_CUSTOMER_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycustomerorderidcount`
(
IN P_CUSTOMER_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`customer_order_id` = P_CUSTOMER_ORDER_İD OR (`customer_order_id` IS NULL AND P_CUSTOMER_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebycustomerorderid`
(
IN P_CUSTOMER_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`customer_order_id` = P_CUSTOMER_ORDER_İD OR (`customer_order_id` IS NULL AND P_CUSTOMER_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_insertone`
(
OUT P_İD int(11)
, INOUT P_TRANSACTİON_TYPE tinyint(4)
, INOUT P_TRANSACTİON_CREATED_DATE datetime
, INOUT P_TRANSACTİON_MODİFİED_DATE datetime
, INOUT P_PRODUCT_İD int(11)
, INOUT P_QUANTİTY int(11)
, INOUT P_PURCHASE_ORDER_İD int(11)
, INOUT P_CUSTOMER_ORDER_İD int(11)
, INOUT P_COMMENTS varchar(255)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`inventory_transactions`
(
`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
)
VALUES
(
P_TRANSACTİON_TYPE
,P_TRANSACTİON_CREATED_DATE
,P_TRANSACTİON_MODİFİED_DATE
,P_PRODUCT_İD
,P_QUANTİTY
,P_PURCHASE_ORDER_İD
,P_CUSTOMER_ORDER_İD
,P_COMMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,transaction_type
,transaction_created_date
,transaction_modified_date
,product_id
,quantity
,purchase_order_id
,customer_order_id
,comments
,ctr_version
INTO 
P_İD
,P_TRANSACTİON_TYPE
,P_TRANSACTİON_CREATED_DATE
,P_TRANSACTİON_MODİFİED_DATE
,P_PRODUCT_İD
,P_QUANTİTY
,P_PURCHASE_ORDER_İD
,P_CUSTOMER_ORDER_İD
,P_COMMENTS
,P_CTR_VERSİON
FROM `northwind`.`inventory_transactions`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`inventory_transactions`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`transaction_type`,
`transaction_created_date`,
`transaction_modified_date`,
`product_id`,
`quantity`,
`purchase_order_id`,
`customer_order_id`,
`comments`,
`ctr_version`
FROM `northwind`.`inventory_transactions`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_updateone`
(
INOUT P_İD int(11)
, INOUT P_TRANSACTİON_TYPE tinyint(4)
, INOUT P_TRANSACTİON_CREATED_DATE datetime
, INOUT P_TRANSACTİON_MODİFİED_DATE datetime
, INOUT P_PRODUCT_İD int(11)
, INOUT P_QUANTİTY int(11)
, INOUT P_PURCHASE_ORDER_İD int(11)
, INOUT P_CUSTOMER_ORDER_İD int(11)
, INOUT P_COMMENTS varchar(255)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`inventory_transactions`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`inventory_transactions` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`inventory_transactions` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`inventory_transactions`
SET
`transaction_type` = P_TRANSACTİON_TYPE
,`transaction_created_date` = P_TRANSACTİON_CREATED_DATE
,`transaction_modified_date` = P_TRANSACTİON_MODİFİED_DATE
,`product_id` = P_PRODUCT_İD
,`quantity` = P_QUANTİTY
,`purchase_order_id` = P_PURCHASE_ORDER_İD
,`customer_order_id` = P_CUSTOMER_ORDER_İD
,`comments` = P_COMMENTS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,transaction_type
,transaction_created_date
,transaction_modified_date
,product_id
,quantity
,purchase_order_id
,customer_order_id
,comments
,ctr_version
INTO 
P_İD
,P_TRANSACTİON_TYPE
,P_TRANSACTİON_CREATED_DATE
,P_TRANSACTİON_MODİFİED_DATE
,P_PRODUCT_İD
,P_QUANTİTY
,P_PURCHASE_ORDER_İD
,P_CUSTOMER_ORDER_İD
,P_COMMENTS
,P_CTR_VERSİON
FROM `northwind`.`inventory_transactions`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'invoices');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`invoice_date`
,`due_date`
,`tax`
,`shipping`
,`amount_due`
,`ctr_version`
FROM `northwind`.`invoices`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`invoices`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getbyorderid`
(
IN P_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`invoice_date`
,`due_date`
,`tax`
,`shipping`
,`amount_due`
,`ctr_version`
FROM `northwind`.`invoices`
WHERE 
`order_id` = P_ORDER_İD OR (`order_id` IS NULL AND P_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getbyorderidcount`
(
IN P_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`invoices`
WHERE 
`order_id` = P_ORDER_İD OR (`order_id` IS NULL AND P_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_deletebyorderid`
(
IN P_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`invoices`
WHERE 
`order_id` = P_ORDER_İD OR (`order_id` IS NULL AND P_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_insertone`
(
OUT P_İD int(11)
, INOUT P_ORDER_İD int(11)
, INOUT P_İNVOİCE_DATE datetime
, INOUT P_DUE_DATE datetime
, INOUT P_TAX decimal(19,4)
, INOUT P_SHİPPİNG decimal(19,4)
, INOUT P_AMOUNT_DUE decimal(19,4)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`invoices`
(
`order_id`
,`invoice_date`
,`due_date`
,`tax`
,`shipping`
,`amount_due`
)
VALUES
(
P_ORDER_İD
,P_İNVOİCE_DATE
,P_DUE_DATE
,P_TAX
,P_SHİPPİNG
,P_AMOUNT_DUE
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,order_id
,invoice_date
,due_date
,tax
,shipping
,amount_due
,ctr_version
INTO 
P_İD
,P_ORDER_İD
,P_İNVOİCE_DATE
,P_DUE_DATE
,P_TAX
,P_SHİPPİNG
,P_AMOUNT_DUE
,P_CTR_VERSİON
FROM `northwind`.`invoices`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`invoice_date`
,`due_date`
,`tax`
,`shipping`
,`amount_due`
,`ctr_version`
FROM `northwind`.`invoices`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`invoices`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`invoices`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`order_id`,
`invoice_date`,
`due_date`,
`tax`,
`shipping`,
`amount_due`,
`ctr_version`
FROM `northwind`.`invoices`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`invoices`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_invoices_updateone`
(
INOUT P_İD int(11)
, INOUT P_ORDER_İD int(11)
, INOUT P_İNVOİCE_DATE datetime
, INOUT P_DUE_DATE datetime
, INOUT P_TAX decimal(19,4)
, INOUT P_SHİPPİNG decimal(19,4)
, INOUT P_AMOUNT_DUE decimal(19,4)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`invoices`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`invoices` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`invoices` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`invoices`
SET
`order_id` = P_ORDER_İD
,`invoice_date` = P_İNVOİCE_DATE
,`due_date` = P_DUE_DATE
,`tax` = P_TAX
,`shipping` = P_SHİPPİNG
,`amount_due` = P_AMOUNT_DUE
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,order_id
,invoice_date
,due_date
,tax
,shipping
,amount_due
,ctr_version
INTO 
P_İD
,P_ORDER_İD
,P_İNVOİCE_DATE
,P_DUE_DATE
,P_TAX
,P_SHİPPİNG
,P_AMOUNT_DUE
,P_CTR_VERSİON
FROM `northwind`.`invoices`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'order_details');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyorderid`
(
IN P_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`order_id` = P_ORDER_İD OR (`order_id` IS NULL AND P_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyorderidcount`
(
IN P_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
WHERE 
`order_id` = P_ORDER_İD OR (`order_id` IS NULL AND P_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deletebyorderid`
(
IN P_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`order_id` = P_ORDER_İD OR (`order_id` IS NULL AND P_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyproductid`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyproductidcount`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deletebyproductid`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbystatusid`
(
IN P_STATUS_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbystatusidcount`
(
IN P_STATUS_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deletebystatusid`
(
IN P_STATUS_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_insertone`
(
OUT P_İD int(11)
, INOUT P_ORDER_İD int(11)
, INOUT P_PRODUCT_İD int(11)
, INOUT P_QUANTİTY decimal(18,4)
, INOUT P_UNİT_PRİCE decimal(19,4)
, INOUT P_DİSCOUNT double
, INOUT P_STATUS_İD int(11)
, INOUT P_DATE_ALLOCATED datetime
, INOUT P_PURCHASE_ORDER_İD int(11)
, INOUT P_İNVENTORY_İD int(11)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`order_details`
(
`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
)
VALUES
(
P_ORDER_İD
,P_PRODUCT_İD
,P_QUANTİTY
,P_UNİT_PRİCE
,P_DİSCOUNT
,P_STATUS_İD
,P_DATE_ALLOCATED
,P_PURCHASE_ORDER_İD
,P_İNVENTORY_İD
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,order_id
,product_id
,quantity
,unit_price
,discount
,status_id
,date_allocated
,purchase_order_id
,inventory_id
,ctr_version
INTO 
P_İD
,P_ORDER_İD
,P_PRODUCT_İD
,P_QUANTİTY
,P_UNİT_PRİCE
,P_DİSCOUNT
,P_STATUS_İD
,P_DATE_ALLOCATED
,P_PURCHASE_ORDER_İD
,P_İNVENTORY_İD
,P_CTR_VERSİON
FROM `northwind`.`order_details`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`order_details`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`order_id`,
`product_id`,
`quantity`,
`unit_price`,
`discount`,
`status_id`,
`date_allocated`,
`purchase_order_id`,
`inventory_id`,
`ctr_version`
FROM `northwind`.`order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_updateone`
(
INOUT P_İD int(11)
, INOUT P_ORDER_İD int(11)
, INOUT P_PRODUCT_İD int(11)
, INOUT P_QUANTİTY decimal(18,4)
, INOUT P_UNİT_PRİCE decimal(19,4)
, INOUT P_DİSCOUNT double
, INOUT P_STATUS_İD int(11)
, INOUT P_DATE_ALLOCATED datetime
, INOUT P_PURCHASE_ORDER_İD int(11)
, INOUT P_İNVENTORY_İD int(11)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`order_details`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`order_details` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`order_details` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`order_details`
SET
`order_id` = P_ORDER_İD
,`product_id` = P_PRODUCT_İD
,`quantity` = P_QUANTİTY
,`unit_price` = P_UNİT_PRİCE
,`discount` = P_DİSCOUNT
,`status_id` = P_STATUS_İD
,`date_allocated` = P_DATE_ALLOCATED
,`purchase_order_id` = P_PURCHASE_ORDER_İD
,`inventory_id` = P_İNVENTORY_İD
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,order_id
,product_id
,quantity
,unit_price
,discount
,status_id
,date_allocated
,purchase_order_id
,inventory_id
,ctr_version
INTO 
P_İD
,P_ORDER_İD
,P_PRODUCT_İD
,P_QUANTİTY
,P_UNİT_PRİCE
,P_DİSCOUNT
,P_STATUS_İD
,P_DATE_ALLOCATED
,P_PURCHASE_ORDER_İD
,P_İNVENTORY_İD
,P_CTR_VERSİON
FROM `northwind`.`order_details`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'order_details_status');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`status_name`
,`ctr_version`
FROM `northwind`.`order_details_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`order_details_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_insertone`
(
INOUT P_İD int(11)
, INOUT P_STATUS_NAME varchar(50)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`order_details_status`
(
`id`
,`status_name`
)
VALUES
(
P_İD
,P_STATUS_NAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,status_name
,ctr_version
INTO 
P_İD
,P_STATUS_NAME
,P_CTR_VERSİON
FROM `northwind`.`order_details_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`status_name`
,`ctr_version`
FROM `northwind`.`order_details_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`order_details_status`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`status_name`,
`ctr_version`
FROM `northwind`.`order_details_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`order_details_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_status_updateone`
(
INOUT P_İD int(11)
, INOUT P_STATUS_NAME varchar(50)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`order_details_status`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`order_details_status` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`order_details_status` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`order_details_status`
SET
`status_name` = P_STATUS_NAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,status_name
,ctr_version
INTO 
P_İD
,P_STATUS_NAME
,P_CTR_VERSİON
FROM `northwind`.`order_details_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'orders');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbyemployeeid`
(
IN P_EMPLOYEE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
WHERE 
`employee_id` = P_EMPLOYEE_İD OR (`employee_id` IS NULL AND P_EMPLOYEE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbyemployeeidcount`
(
IN P_EMPLOYEE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders`
WHERE 
`employee_id` = P_EMPLOYEE_İD OR (`employee_id` IS NULL AND P_EMPLOYEE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_deletebyemployeeid`
(
IN P_EMPLOYEE_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders`
WHERE 
`employee_id` = P_EMPLOYEE_İD OR (`employee_id` IS NULL AND P_EMPLOYEE_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbycustomerid`
(
IN P_CUSTOMER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
WHERE 
`customer_id` = P_CUSTOMER_İD OR (`customer_id` IS NULL AND P_CUSTOMER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbycustomeridcount`
(
IN P_CUSTOMER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders`
WHERE 
`customer_id` = P_CUSTOMER_İD OR (`customer_id` IS NULL AND P_CUSTOMER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_deletebycustomerid`
(
IN P_CUSTOMER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders`
WHERE 
`customer_id` = P_CUSTOMER_İD OR (`customer_id` IS NULL AND P_CUSTOMER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbyshipperid`
(
IN P_SHİPPER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
WHERE 
`shipper_id` = P_SHİPPER_İD OR (`shipper_id` IS NULL AND P_SHİPPER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbyshipperidcount`
(
IN P_SHİPPER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders`
WHERE 
`shipper_id` = P_SHİPPER_İD OR (`shipper_id` IS NULL AND P_SHİPPER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_deletebyshipperid`
(
IN P_SHİPPER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders`
WHERE 
`shipper_id` = P_SHİPPER_İD OR (`shipper_id` IS NULL AND P_SHİPPER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbytaxstatusid`
(
IN P_TAX_STATUS_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
WHERE 
`tax_status_id` = P_TAX_STATUS_İD OR (`tax_status_id` IS NULL AND P_TAX_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbytaxstatusidcount`
(
IN P_TAX_STATUS_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders`
WHERE 
`tax_status_id` = P_TAX_STATUS_İD OR (`tax_status_id` IS NULL AND P_TAX_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_deletebytaxstatusid`
(
IN P_TAX_STATUS_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders`
WHERE 
`tax_status_id` = P_TAX_STATUS_İD OR (`tax_status_id` IS NULL AND P_TAX_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbystatusid`
(
IN P_STATUS_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbystatusidcount`
(
IN P_STATUS_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_deletebystatusid`
(
IN P_STATUS_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_insertone`
(
IN P_SHİP_ADDRESS longtext
, IN P_NOTES longtext
, OUT P_İD int(11)
, INOUT P_EMPLOYEE_İD int(11)
, INOUT P_CUSTOMER_İD int(11)
, INOUT P_ORDER_DATE datetime
, INOUT P_SHİPPED_DATE datetime
, INOUT P_SHİPPER_İD int(11)
, INOUT P_SHİP_NAME varchar(50)
, INOUT P_SHİP_CİTY varchar(50)
, INOUT P_SHİP_STATE_PROVİNCE varchar(50)
, INOUT P_SHİP_ZİP_POSTAL_CODE varchar(50)
, INOUT P_SHİP_COUNTRY_REGİON varchar(50)
, INOUT P_SHİPPİNG_FEE decimal(19,4)
, INOUT P_TAXES decimal(19,4)
, INOUT P_PAYMENT_TYPE varchar(50)
, INOUT P_PAİD_DATE datetime
, INOUT P_TAX_RATE double
, INOUT P_TAX_STATUS_İD tinyint(4)
, INOUT P_STATUS_İD tinyint(4)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`orders`
(
`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
)
VALUES
(
P_EMPLOYEE_İD
,P_CUSTOMER_İD
,P_ORDER_DATE
,P_SHİPPED_DATE
,P_SHİPPER_İD
,P_SHİP_NAME
,P_SHİP_ADDRESS
,P_SHİP_CİTY
,P_SHİP_STATE_PROVİNCE
,P_SHİP_ZİP_POSTAL_CODE
,P_SHİP_COUNTRY_REGİON
,P_SHİPPİNG_FEE
,P_TAXES
,P_PAYMENT_TYPE
,P_PAİD_DATE
,P_NOTES
,P_TAX_RATE
,P_TAX_STATUS_İD
,P_STATUS_İD
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,employee_id
,customer_id
,order_date
,shipped_date
,shipper_id
,ship_name
,ship_city
,ship_state_province
,ship_zip_postal_code
,ship_country_region
,shipping_fee
,taxes
,payment_type
,paid_date
,tax_rate
,tax_status_id
,status_id
,ctr_version
INTO 
P_İD
,P_EMPLOYEE_İD
,P_CUSTOMER_İD
,P_ORDER_DATE
,P_SHİPPED_DATE
,P_SHİPPER_İD
,P_SHİP_NAME
,P_SHİP_CİTY
,P_SHİP_STATE_PROVİNCE
,P_SHİP_ZİP_POSTAL_CODE
,P_SHİP_COUNTRY_REGİON
,P_SHİPPİNG_FEE
,P_TAXES
,P_PAYMENT_TYPE
,P_PAİD_DATE
,P_TAX_RATE
,P_TAX_STATUS_İD
,P_STATUS_İD
,P_CTR_VERSİON
FROM `northwind`.`orders`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`employee_id`
,`customer_id`
,`order_date`
,`shipped_date`
,`shipper_id`
,`ship_name`
,`ship_address`
,`ship_city`
,`ship_state_province`
,`ship_zip_postal_code`
,`ship_country_region`
,`shipping_fee`
,`taxes`
,`payment_type`
,`paid_date`
,`notes`
,`tax_rate`
,`tax_status_id`
,`status_id`
,`ctr_version`
FROM `northwind`.`orders`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`orders`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`employee_id`,
`customer_id`,
`order_date`,
`shipped_date`,
`shipper_id`,
`ship_name`,
`ship_address`,
`ship_city`,
`ship_state_province`,
`ship_zip_postal_code`,
`ship_country_region`,
`shipping_fee`,
`taxes`,
`payment_type`,
`paid_date`,
`notes`,
`tax_rate`,
`tax_status_id`,
`status_id`,
`ctr_version`
FROM `northwind`.`orders`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`orders`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_updateone`
(
IN P_SHİP_ADDRESS longtext
, IN P_NOTES longtext
, INOUT P_İD int(11)
, INOUT P_EMPLOYEE_İD int(11)
, INOUT P_CUSTOMER_İD int(11)
, INOUT P_ORDER_DATE datetime
, INOUT P_SHİPPED_DATE datetime
, INOUT P_SHİPPER_İD int(11)
, INOUT P_SHİP_NAME varchar(50)
, INOUT P_SHİP_CİTY varchar(50)
, INOUT P_SHİP_STATE_PROVİNCE varchar(50)
, INOUT P_SHİP_ZİP_POSTAL_CODE varchar(50)
, INOUT P_SHİP_COUNTRY_REGİON varchar(50)
, INOUT P_SHİPPİNG_FEE decimal(19,4)
, INOUT P_TAXES decimal(19,4)
, INOUT P_PAYMENT_TYPE varchar(50)
, INOUT P_PAİD_DATE datetime
, INOUT P_TAX_RATE double
, INOUT P_TAX_STATUS_İD tinyint(4)
, INOUT P_STATUS_İD tinyint(4)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`orders`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`orders` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`orders` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`orders`
SET
`employee_id` = P_EMPLOYEE_İD
,`customer_id` = P_CUSTOMER_İD
,`order_date` = P_ORDER_DATE
,`shipped_date` = P_SHİPPED_DATE
,`shipper_id` = P_SHİPPER_İD
,`ship_name` = P_SHİP_NAME
,`ship_address` = P_SHİP_ADDRESS
,`ship_city` = P_SHİP_CİTY
,`ship_state_province` = P_SHİP_STATE_PROVİNCE
,`ship_zip_postal_code` = P_SHİP_ZİP_POSTAL_CODE
,`ship_country_region` = P_SHİP_COUNTRY_REGİON
,`shipping_fee` = P_SHİPPİNG_FEE
,`taxes` = P_TAXES
,`payment_type` = P_PAYMENT_TYPE
,`paid_date` = P_PAİD_DATE
,`notes` = P_NOTES
,`tax_rate` = P_TAX_RATE
,`tax_status_id` = P_TAX_STATUS_İD
,`status_id` = P_STATUS_İD
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,employee_id
,customer_id
,order_date
,shipped_date
,shipper_id
,ship_name
,ship_city
,ship_state_province
,ship_zip_postal_code
,ship_country_region
,shipping_fee
,taxes
,payment_type
,paid_date
,tax_rate
,tax_status_id
,status_id
,ctr_version
INTO 
P_İD
,P_EMPLOYEE_İD
,P_CUSTOMER_İD
,P_ORDER_DATE
,P_SHİPPED_DATE
,P_SHİPPER_İD
,P_SHİP_NAME
,P_SHİP_CİTY
,P_SHİP_STATE_PROVİNCE
,P_SHİP_ZİP_POSTAL_CODE
,P_SHİP_COUNTRY_REGİON
,P_SHİPPİNG_FEE
,P_TAXES
,P_PAYMENT_TYPE
,P_PAİD_DATE
,P_TAX_RATE
,P_TAX_STATUS_İD
,P_STATUS_İD
,P_CTR_VERSİON
FROM `northwind`.`orders`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'orders_status');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_getone`
(
IN P_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`status_name`
,`ctr_version`
FROM `northwind`.`orders_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_deleteone`
(
IN P_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_insertone`
(
INOUT P_İD tinyint(4)
, INOUT P_STATUS_NAME varchar(50)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`orders_status`
(
`id`
,`status_name`
)
VALUES
(
P_İD
,P_STATUS_NAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,status_name
,ctr_version
INTO 
P_İD
,P_STATUS_NAME
,P_CTR_VERSİON
FROM `northwind`.`orders_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`status_name`
,`ctr_version`
FROM `northwind`.`orders_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`orders_status`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`status_name`,
`ctr_version`
FROM `northwind`.`orders_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`orders_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_status_updateone`
(
INOUT P_İD tinyint(4)
, INOUT P_STATUS_NAME varchar(50)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`orders_status`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`orders_status` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`orders_status` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`orders_status`
SET
`status_name` = P_STATUS_NAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,status_name
,ctr_version
INTO 
P_İD
,P_STATUS_NAME
,P_CTR_VERSİON
FROM `northwind`.`orders_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'orders_tax_status');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_getone`
(
IN P_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`tax_status_name`
,`ctr_version`
FROM `northwind`.`orders_tax_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_deleteone`
(
IN P_İD tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`orders_tax_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_insertone`
(
INOUT P_İD tinyint(4)
, INOUT P_TAX_STATUS_NAME varchar(50)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`orders_tax_status`
(
`id`
,`tax_status_name`
)
VALUES
(
P_İD
,P_TAX_STATUS_NAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,tax_status_name
,ctr_version
INTO 
P_İD
,P_TAX_STATUS_NAME
,P_CTR_VERSİON
FROM `northwind`.`orders_tax_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`tax_status_name`
,`ctr_version`
FROM `northwind`.`orders_tax_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`orders_tax_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`orders_tax_status`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`tax_status_name`,
`ctr_version`
FROM `northwind`.`orders_tax_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`orders_tax_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_orders_tax_status_updateone`
(
INOUT P_İD tinyint(4)
, INOUT P_TAX_STATUS_NAME varchar(50)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`orders_tax_status`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`orders_tax_status` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`orders_tax_status` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`orders_tax_status`
SET
`tax_status_name` = P_TAX_STATUS_NAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,tax_status_name
,ctr_version
INTO 
P_İD
,P_TAX_STATUS_NAME
,P_CTR_VERSİON
FROM `northwind`.`orders_tax_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'privileges');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`privilege_name`
,`ctr_version`
FROM `northwind`.`privileges`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`privileges`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_insertone`
(
OUT P_İD int(11)
, INOUT P_PRİVİLEGE_NAME varchar(50)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`privileges`
(
`privilege_name`
)
VALUES
(
P_PRİVİLEGE_NAME
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,privilege_name
,ctr_version
INTO 
P_İD
,P_PRİVİLEGE_NAME
,P_CTR_VERSİON
FROM `northwind`.`privileges`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`privilege_name`
,`ctr_version`
FROM `northwind`.`privileges`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`privileges`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`privileges`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`privilege_name`,
`ctr_version`
FROM `northwind`.`privileges`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`privileges`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_privileges_updateone`
(
INOUT P_İD int(11)
, INOUT P_PRİVİLEGE_NAME varchar(50)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`privileges`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`privileges` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`privileges` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`privileges`
SET
`privilege_name` = P_PRİVİLEGE_NAME
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,privilege_name
,ctr_version
INTO 
P_İD
,P_PRİVİLEGE_NAME
,P_CTR_VERSİON
FROM `northwind`.`privileges`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'products');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`supplier_ids`
,`id`
,`product_code`
,`product_name`
,`description`
,`standard_cost`
,`list_price`
,`reorder_level`
,`target_level`
,`quantity_per_unit`
,`discontinued`
,`minimum_reorder_quantity`
,`category`
,`attachments`
,`ctr_version`
FROM `northwind`.`products`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`products`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_insertone`
(
IN P_SUPPLİER_İDS longtext
, IN P_DESCRİPTİON longtext
, OUT P_İD int(11)
, INOUT P_PRODUCT_CODE varchar(25)
, INOUT P_PRODUCT_NAME varchar(50)
, INOUT P_STANDARD_COST decimal(19,4)
, INOUT P_LİST_PRİCE decimal(19,4)
, INOUT P_REORDER_LEVEL int(11)
, INOUT P_TARGET_LEVEL int(11)
, INOUT P_QUANTİTY_PER_UNİT varchar(50)
, INOUT P_DİSCONTİNUED tinyint(1)
, INOUT P_MİNİMUM_REORDER_QUANTİTY int(11)
, INOUT P_CATEGORY varchar(50)
, INOUT P_ATTACHMENTS longblob
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`products`
(
`supplier_ids`
,`product_code`
,`product_name`
,`description`
,`standard_cost`
,`list_price`
,`reorder_level`
,`target_level`
,`quantity_per_unit`
,`discontinued`
,`minimum_reorder_quantity`
,`category`
,`attachments`
)
VALUES
(
P_SUPPLİER_İDS
,P_PRODUCT_CODE
,P_PRODUCT_NAME
,P_DESCRİPTİON
,P_STANDARD_COST
,P_LİST_PRİCE
,P_REORDER_LEVEL
,P_TARGET_LEVEL
,P_QUANTİTY_PER_UNİT
,P_DİSCONTİNUED
,P_MİNİMUM_REORDER_QUANTİTY
,P_CATEGORY
,P_ATTACHMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,product_code
,product_name
,standard_cost
,list_price
,reorder_level
,target_level
,quantity_per_unit
,discontinued
,minimum_reorder_quantity
,category
,attachments
,ctr_version
INTO 
P_İD
,P_PRODUCT_CODE
,P_PRODUCT_NAME
,P_STANDARD_COST
,P_LİST_PRİCE
,P_REORDER_LEVEL
,P_TARGET_LEVEL
,P_QUANTİTY_PER_UNİT
,P_DİSCONTİNUED
,P_MİNİMUM_REORDER_QUANTİTY
,P_CATEGORY
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`products`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`supplier_ids`
,`id`
,`product_code`
,`product_name`
,`description`
,`standard_cost`
,`list_price`
,`reorder_level`
,`target_level`
,`quantity_per_unit`
,`discontinued`
,`minimum_reorder_quantity`
,`category`
,`attachments`
,`ctr_version`
FROM `northwind`.`products`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`products`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`products`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`supplier_ids`,
`id`,
`product_code`,
`product_name`,
`description`,
`standard_cost`,
`list_price`,
`reorder_level`,
`target_level`,
`quantity_per_unit`,
`discontinued`,
`minimum_reorder_quantity`,
`category`,
`attachments`,
`ctr_version`
FROM `northwind`.`products`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`products`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_updateone`
(
IN P_SUPPLİER_İDS longtext
, IN P_DESCRİPTİON longtext
, INOUT P_İD int(11)
, INOUT P_PRODUCT_CODE varchar(25)
, INOUT P_PRODUCT_NAME varchar(50)
, INOUT P_STANDARD_COST decimal(19,4)
, INOUT P_LİST_PRİCE decimal(19,4)
, INOUT P_REORDER_LEVEL int(11)
, INOUT P_TARGET_LEVEL int(11)
, INOUT P_QUANTİTY_PER_UNİT varchar(50)
, INOUT P_DİSCONTİNUED tinyint(1)
, INOUT P_MİNİMUM_REORDER_QUANTİTY int(11)
, INOUT P_CATEGORY varchar(50)
, INOUT P_ATTACHMENTS longblob
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`products`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`products` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`products` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`products`
SET
`supplier_ids` = P_SUPPLİER_İDS
,`product_code` = P_PRODUCT_CODE
,`product_name` = P_PRODUCT_NAME
,`description` = P_DESCRİPTİON
,`standard_cost` = P_STANDARD_COST
,`list_price` = P_LİST_PRİCE
,`reorder_level` = P_REORDER_LEVEL
,`target_level` = P_TARGET_LEVEL
,`quantity_per_unit` = P_QUANTİTY_PER_UNİT
,`discontinued` = P_DİSCONTİNUED
,`minimum_reorder_quantity` = P_MİNİMUM_REORDER_QUANTİTY
,`category` = P_CATEGORY
,`attachments` = P_ATTACHMENTS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,product_code
,product_name
,standard_cost
,list_price
,reorder_level
,target_level
,quantity_per_unit
,discontinued
,minimum_reorder_quantity
,category
,attachments
,ctr_version
INTO 
P_İD
,P_PRODUCT_CODE
,P_PRODUCT_NAME
,P_STANDARD_COST
,P_LİST_PRİCE
,P_REORDER_LEVEL
,P_TARGET_LEVEL
,P_QUANTİTY_PER_UNİT
,P_DİSCONTİNUED
,P_MİNİMUM_REORDER_QUANTİTY
,P_CATEGORY
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`products`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'purchase_order_details');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbypurchaseorderid`
(
IN P_PURCHASE_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_İD OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbypurchaseorderidcount`
(
IN P_PURCHASE_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_İD OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deletebypurchaseorderid`
(
IN P_PURCHASE_ORDER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_İD OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyproductid`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyproductidcount`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deletebyproductid`
(
IN P_PRODUCT_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`product_id` = P_PRODUCT_İD OR (`product_id` IS NULL AND P_PRODUCT_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyinventoryid`
(
IN P_İNVENTORY_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`inventory_id` = P_İNVENTORY_İD OR (`inventory_id` IS NULL AND P_İNVENTORY_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyinventoryidcount`
(
IN P_İNVENTORY_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
WHERE 
`inventory_id` = P_İNVENTORY_İD OR (`inventory_id` IS NULL AND P_İNVENTORY_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deletebyinventoryid`
(
IN P_İNVENTORY_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`inventory_id` = P_İNVENTORY_İD OR (`inventory_id` IS NULL AND P_İNVENTORY_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_insertone`
(
OUT P_İD int(11)
, INOUT P_PURCHASE_ORDER_İD int(11)
, INOUT P_PRODUCT_İD int(11)
, INOUT P_QUANTİTY decimal(18,4)
, INOUT P_UNİT_COST decimal(19,4)
, INOUT P_DATE_RECEİVED datetime
, INOUT P_POSTED_TO_İNVENTORY tinyint(1)
, INOUT P_İNVENTORY_İD int(11)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`purchase_order_details`
(
`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
)
VALUES
(
P_PURCHASE_ORDER_İD
,P_PRODUCT_İD
,P_QUANTİTY
,P_UNİT_COST
,P_DATE_RECEİVED
,P_POSTED_TO_İNVENTORY
,P_İNVENTORY_İD
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,purchase_order_id
,product_id
,quantity
,unit_cost
,date_received
,posted_to_inventory
,inventory_id
,ctr_version
INTO 
P_İD
,P_PURCHASE_ORDER_İD
,P_PRODUCT_İD
,P_QUANTİTY
,P_UNİT_COST
,P_DATE_RECEİVED
,P_POSTED_TO_İNVENTORY
,P_İNVENTORY_İD
,P_CTR_VERSİON
FROM `northwind`.`purchase_order_details`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`purchase_order_details`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`purchase_order_id`,
`product_id`,
`quantity`,
`unit_cost`,
`date_received`,
`posted_to_inventory`,
`inventory_id`,
`ctr_version`
FROM `northwind`.`purchase_order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_updateone`
(
INOUT P_İD int(11)
, INOUT P_PURCHASE_ORDER_İD int(11)
, INOUT P_PRODUCT_İD int(11)
, INOUT P_QUANTİTY decimal(18,4)
, INOUT P_UNİT_COST decimal(19,4)
, INOUT P_DATE_RECEİVED datetime
, INOUT P_POSTED_TO_İNVENTORY tinyint(1)
, INOUT P_İNVENTORY_İD int(11)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`purchase_order_details`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`purchase_order_details` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`purchase_order_details` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`purchase_order_details`
SET
`purchase_order_id` = P_PURCHASE_ORDER_İD
,`product_id` = P_PRODUCT_İD
,`quantity` = P_QUANTİTY
,`unit_cost` = P_UNİT_COST
,`date_received` = P_DATE_RECEİVED
,`posted_to_inventory` = P_POSTED_TO_İNVENTORY
,`inventory_id` = P_İNVENTORY_İD
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,purchase_order_id
,product_id
,quantity
,unit_cost
,date_received
,posted_to_inventory
,inventory_id
,ctr_version
INTO 
P_İD
,P_PURCHASE_ORDER_İD
,P_PRODUCT_İD
,P_QUANTİTY
,P_UNİT_COST
,P_DATE_RECEİVED
,P_POSTED_TO_İNVENTORY
,P_İNVENTORY_İD
,P_CTR_VERSİON
FROM `northwind`.`purchase_order_details`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'purchase_order_status');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`status`
,`ctr_version`
FROM `northwind`.`purchase_order_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_status`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_insertone`
(
INOUT P_İD int(11)
, INOUT P_STATUS varchar(50)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`purchase_order_status`
(
`id`
,`status`
)
VALUES
(
P_İD
,P_STATUS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,status
,ctr_version
INTO 
P_İD
,P_STATUS
,P_CTR_VERSİON
FROM `northwind`.`purchase_order_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`status`
,`ctr_version`
FROM `northwind`.`purchase_order_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_status`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`purchase_order_status`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`status`,
`ctr_version`
FROM `northwind`.`purchase_order_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`purchase_order_status`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_status_updateone`
(
INOUT P_İD int(11)
, INOUT P_STATUS varchar(50)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`purchase_order_status`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`purchase_order_status` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`purchase_order_status` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`purchase_order_status`
SET
`status` = P_STATUS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,status
,ctr_version
INTO 
P_İD
,P_STATUS
,P_CTR_VERSİON
FROM `northwind`.`purchase_order_status`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'purchase_orders');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`supplier_id`
,`created_by`
,`submitted_date`
,`creation_date`
,`status_id`
,`expected_date`
,`shipping_fee`
,`taxes`
,`payment_date`
,`payment_amount`
,`payment_method`
,`notes`
,`approved_by`
,`approved_date`
,`submitted_by`
,`ctr_version`
FROM `northwind`.`purchase_orders`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_orders`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbysupplierid`
(
IN P_SUPPLİER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`supplier_id`
,`created_by`
,`submitted_date`
,`creation_date`
,`status_id`
,`expected_date`
,`shipping_fee`
,`taxes`
,`payment_date`
,`payment_amount`
,`payment_method`
,`notes`
,`approved_by`
,`approved_date`
,`submitted_by`
,`ctr_version`
FROM `northwind`.`purchase_orders`
WHERE 
`supplier_id` = P_SUPPLİER_İD OR (`supplier_id` IS NULL AND P_SUPPLİER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbysupplieridcount`
(
IN P_SUPPLİER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_orders`
WHERE 
`supplier_id` = P_SUPPLİER_İD OR (`supplier_id` IS NULL AND P_SUPPLİER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_deletebysupplierid`
(
IN P_SUPPLİER_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_orders`
WHERE 
`supplier_id` = P_SUPPLİER_İD OR (`supplier_id` IS NULL AND P_SUPPLİER_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbycreatedby`
(
IN P_CREATED_BY int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`supplier_id`
,`created_by`
,`submitted_date`
,`creation_date`
,`status_id`
,`expected_date`
,`shipping_fee`
,`taxes`
,`payment_date`
,`payment_amount`
,`payment_method`
,`notes`
,`approved_by`
,`approved_date`
,`submitted_by`
,`ctr_version`
FROM `northwind`.`purchase_orders`
WHERE 
`created_by` = P_CREATED_BY OR (`created_by` IS NULL AND P_CREATED_BY IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbycreatedbycount`
(
IN P_CREATED_BY int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_orders`
WHERE 
`created_by` = P_CREATED_BY OR (`created_by` IS NULL AND P_CREATED_BY IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_deletebycreatedby`
(
IN P_CREATED_BY int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_orders`
WHERE 
`created_by` = P_CREATED_BY OR (`created_by` IS NULL AND P_CREATED_BY IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbystatusid`
(
IN P_STATUS_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`supplier_id`
,`created_by`
,`submitted_date`
,`creation_date`
,`status_id`
,`expected_date`
,`shipping_fee`
,`taxes`
,`payment_date`
,`payment_amount`
,`payment_method`
,`notes`
,`approved_by`
,`approved_date`
,`submitted_by`
,`ctr_version`
FROM `northwind`.`purchase_orders`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbystatusidcount`
(
IN P_STATUS_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_orders`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_deletebystatusid`
(
IN P_STATUS_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_orders`
WHERE 
`status_id` = P_STATUS_İD OR (`status_id` IS NULL AND P_STATUS_İD IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_insertone`
(
IN P_NOTES longtext
, OUT P_İD int(11)
, INOUT P_SUPPLİER_İD int(11)
, INOUT P_CREATED_BY int(11)
, INOUT P_SUBMİTTED_DATE datetime
, INOUT P_CREATİON_DATE datetime
, INOUT P_STATUS_İD int(11)
, INOUT P_EXPECTED_DATE datetime
, INOUT P_SHİPPİNG_FEE decimal(19,4)
, INOUT P_TAXES decimal(19,4)
, INOUT P_PAYMENT_DATE datetime
, INOUT P_PAYMENT_AMOUNT decimal(19,4)
, INOUT P_PAYMENT_METHOD varchar(50)
, INOUT P_APPROVED_BY int(11)
, INOUT P_APPROVED_DATE datetime
, INOUT P_SUBMİTTED_BY int(11)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`purchase_orders`
(
`supplier_id`
,`created_by`
,`submitted_date`
,`creation_date`
,`status_id`
,`expected_date`
,`shipping_fee`
,`taxes`
,`payment_date`
,`payment_amount`
,`payment_method`
,`notes`
,`approved_by`
,`approved_date`
,`submitted_by`
)
VALUES
(
P_SUPPLİER_İD
,P_CREATED_BY
,P_SUBMİTTED_DATE
,P_CREATİON_DATE
,P_STATUS_İD
,P_EXPECTED_DATE
,P_SHİPPİNG_FEE
,P_TAXES
,P_PAYMENT_DATE
,P_PAYMENT_AMOUNT
,P_PAYMENT_METHOD
,P_NOTES
,P_APPROVED_BY
,P_APPROVED_DATE
,P_SUBMİTTED_BY
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,supplier_id
,created_by
,submitted_date
,creation_date
,status_id
,expected_date
,shipping_fee
,taxes
,payment_date
,payment_amount
,payment_method
,approved_by
,approved_date
,submitted_by
,ctr_version
INTO 
P_İD
,P_SUPPLİER_İD
,P_CREATED_BY
,P_SUBMİTTED_DATE
,P_CREATİON_DATE
,P_STATUS_İD
,P_EXPECTED_DATE
,P_SHİPPİNG_FEE
,P_TAXES
,P_PAYMENT_DATE
,P_PAYMENT_AMOUNT
,P_PAYMENT_METHOD
,P_APPROVED_BY
,P_APPROVED_DATE
,P_SUBMİTTED_BY
,P_CTR_VERSİON
FROM `northwind`.`purchase_orders`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`supplier_id`
,`created_by`
,`submitted_date`
,`creation_date`
,`status_id`
,`expected_date`
,`shipping_fee`
,`taxes`
,`payment_date`
,`payment_amount`
,`payment_method`
,`notes`
,`approved_by`
,`approved_date`
,`submitted_by`
,`ctr_version`
FROM `northwind`.`purchase_orders`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_orders`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`purchase_orders`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`supplier_id`,
`created_by`,
`submitted_date`,
`creation_date`,
`status_id`,
`expected_date`,
`shipping_fee`,
`taxes`,
`payment_date`,
`payment_amount`,
`payment_method`,
`notes`,
`approved_by`,
`approved_date`,
`submitted_by`,
`ctr_version`
FROM `northwind`.`purchase_orders`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`purchase_orders`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_orders_updateone`
(
IN P_NOTES longtext
, INOUT P_İD int(11)
, INOUT P_SUPPLİER_İD int(11)
, INOUT P_CREATED_BY int(11)
, INOUT P_SUBMİTTED_DATE datetime
, INOUT P_CREATİON_DATE datetime
, INOUT P_STATUS_İD int(11)
, INOUT P_EXPECTED_DATE datetime
, INOUT P_SHİPPİNG_FEE decimal(19,4)
, INOUT P_TAXES decimal(19,4)
, INOUT P_PAYMENT_DATE datetime
, INOUT P_PAYMENT_AMOUNT decimal(19,4)
, INOUT P_PAYMENT_METHOD varchar(50)
, INOUT P_APPROVED_BY int(11)
, INOUT P_APPROVED_DATE datetime
, INOUT P_SUBMİTTED_BY int(11)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`purchase_orders`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`purchase_orders` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`purchase_orders` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`purchase_orders`
SET
`supplier_id` = P_SUPPLİER_İD
,`created_by` = P_CREATED_BY
,`submitted_date` = P_SUBMİTTED_DATE
,`creation_date` = P_CREATİON_DATE
,`status_id` = P_STATUS_İD
,`expected_date` = P_EXPECTED_DATE
,`shipping_fee` = P_SHİPPİNG_FEE
,`taxes` = P_TAXES
,`payment_date` = P_PAYMENT_DATE
,`payment_amount` = P_PAYMENT_AMOUNT
,`payment_method` = P_PAYMENT_METHOD
,`notes` = P_NOTES
,`approved_by` = P_APPROVED_BY
,`approved_date` = P_APPROVED_DATE
,`submitted_by` = P_SUBMİTTED_BY
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,supplier_id
,created_by
,submitted_date
,creation_date
,status_id
,expected_date
,shipping_fee
,taxes
,payment_date
,payment_amount
,payment_method
,approved_by
,approved_date
,submitted_by
,ctr_version
INTO 
P_İD
,P_SUPPLİER_İD
,P_CREATED_BY
,P_SUBMİTTED_DATE
,P_CREATİON_DATE
,P_STATUS_İD
,P_EXPECTED_DATE
,P_SHİPPİNG_FEE
,P_TAXES
,P_PAYMENT_DATE
,P_PAYMENT_AMOUNT
,P_PAYMENT_METHOD
,P_APPROVED_BY
,P_APPROVED_DATE
,P_SUBMİTTED_BY
,P_CTR_VERSİON
FROM `northwind`.`purchase_orders`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'sales_reports');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_getone`
(
IN P_GROUP_BY varchar(50)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`group_by`
,`display`
,`title`
,`filter_row_source`
,`default`
,`ctr_version`
FROM `northwind`.`sales_reports`
WHERE 
`group_by` = P_GROUP_BY
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_deleteone`
(
IN P_GROUP_BY varchar(50)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`sales_reports`
WHERE 
`group_by` = P_GROUP_BY
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_insertone`
(
IN P_FİLTER_ROW_SOURCE longtext
, INOUT P_GROUP_BY varchar(50)
, INOUT P_DİSPLAY varchar(50)
, INOUT P_TİTLE varchar(50)
, INOUT P_DEFAULT tinyint(1)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`sales_reports`
(
`group_by`
,`display`
,`title`
,`filter_row_source`
,`default`
)
VALUES
(
P_GROUP_BY
,P_DİSPLAY
,P_TİTLE
,P_FİLTER_ROW_SOURCE
,P_DEFAULT
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
group_by
,display
,title
,default
,ctr_version
INTO 
P_GROUP_BY
,P_DİSPLAY
,P_TİTLE
,P_DEFAULT
,P_CTR_VERSİON
FROM `northwind`.`sales_reports`
WHERE group_by = P_GROUP_BY
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`group_by`
,`display`
,`title`
,`filter_row_source`
,`default`
,`ctr_version`
FROM `northwind`.`sales_reports`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`sales_reports`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`sales_reports`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`group_by`,
`display`,
`title`,
`filter_row_source`,
`default`,
`ctr_version`
FROM `northwind`.`sales_reports`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`sales_reports`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_sales_reports_updateone`
(
IN P_FİLTER_ROW_SOURCE longtext
, INOUT P_GROUP_BY varchar(50)
, INOUT P_DİSPLAY varchar(50)
, INOUT P_TİTLE varchar(50)
, INOUT P_DEFAULT tinyint(1)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`sales_reports`
WHERE `group_by` = P_GROUP_BY
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`sales_reports` WHERE WHERE `group_by` = P_GROUP_BY');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`sales_reports` WHERE WHERE `group_by` = P_GROUP_BY');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`sales_reports`
SET
`display` = P_DİSPLAY
,`title` = P_TİTLE
,`filter_row_source` = P_FİLTER_ROW_SOURCE
,`default` = P_DEFAULT
,`ctr_version` = P_CTR_VERSİON
WHERE 
group_by = P_GROUP_BY
;

-- return field values (some may have been modified by a trigger)
SELECT 
group_by
,display
,title
,default
,ctr_version
INTO 
P_GROUP_BY
,P_DİSPLAY
,P_TİTLE
,P_DEFAULT
,P_CTR_VERSİON
FROM `northwind`.`sales_reports`
WHERE group_by = P_GROUP_BY
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'shippers');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`shippers`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`shippers`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_insertone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, OUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`shippers`
(
`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
)
VALUES
(
P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_ADDRESS
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_WEB_PAGE
,P_NOTES
,P_ATTACHMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`shippers`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`shippers`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`shippers`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`shippers`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`company`,
`last_name`,
`first_name`,
`email_address`,
`job_title`,
`business_phone`,
`home_phone`,
`mobile_phone`,
`fax_number`,
`address`,
`city`,
`state_province`,
`zip_postal_code`,
`country_region`,
`web_page`,
`notes`,
`attachments`,
`ctr_version`
FROM `northwind`.`shippers`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`shippers`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_shippers_updateone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, INOUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`shippers`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`shippers` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`shippers` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`shippers`
SET
`company` = P_COMPANY
,`last_name` = P_LAST_NAME
,`first_name` = P_FİRST_NAME
,`email_address` = P_EMAİL_ADDRESS
,`job_title` = P_JOB_TİTLE
,`business_phone` = P_BUSİNESS_PHONE
,`home_phone` = P_HOME_PHONE
,`mobile_phone` = P_MOBİLE_PHONE
,`fax_number` = P_FAX_NUMBER
,`address` = P_ADDRESS
,`city` = P_CİTY
,`state_province` = P_STATE_PROVİNCE
,`zip_postal_code` = P_ZİP_POSTAL_CODE
,`country_region` = P_COUNTRY_REGİON
,`web_page` = P_WEB_PAGE
,`notes` = P_NOTES
,`attachments` = P_ATTACHMENTS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`shippers`
WHERE id = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'strings');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_getone`
(
IN P_STRİNG_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`string_id`
,`string_data`
,`ctr_version`
FROM `northwind`.`strings`
WHERE 
`string_id` = P_STRİNG_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_deleteone`
(
IN P_STRİNG_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`strings`
WHERE 
`string_id` = P_STRİNG_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_insertone`
(
OUT P_STRİNG_İD int(11)
, INOUT P_STRİNG_DATA varchar(255)
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`strings`
(
`string_data`
)
VALUES
(
P_STRİNG_DATA
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
string_id
,string_data
,ctr_version
INTO 
P_STRİNG_İD
,P_STRİNG_DATA
,P_CTR_VERSİON
FROM `northwind`.`strings`
WHERE string_id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`string_id`
,`string_data`
,`ctr_version`
FROM `northwind`.`strings`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`strings`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`strings`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`string_id`,
`string_data`,
`ctr_version`
FROM `northwind`.`strings`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`strings`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_strings_updateone`
(
INOUT P_STRİNG_İD int(11)
, INOUT P_STRİNG_DATA varchar(255)
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`strings`
WHERE `string_id` = P_STRİNG_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`strings` WHERE WHERE `string_id` = P_STRİNG_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`strings` WHERE WHERE `string_id` = P_STRİNG_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`strings`
SET
`string_data` = P_STRİNG_DATA
,`ctr_version` = P_CTR_VERSİON
WHERE 
string_id = P_STRİNG_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
string_id
,string_data
,ctr_version
INTO 
P_STRİNG_İD
,P_STRİNG_DATA
,P_CTR_VERSİON
FROM `northwind`.`strings`
WHERE string_id = P_STRİNG_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'suppliers');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_getone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`suppliers`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_deleteone`
(
IN P_İD int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- delete all matching from the table
DELETE FROM `northwind`.`suppliers`
WHERE 
`id` = P_İD
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_insertone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, OUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, OUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- inserts a new row into the table
INSERT `northwind`.`suppliers`
(
`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
)
VALUES
(
P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_ADDRESS
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_WEB_PAGE
,P_NOTES
,P_ATTACHMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`suppliers`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table
SELECT 
`id`
,`company`
,`last_name`
,`first_name`
,`email_address`
,`job_title`
,`business_phone`
,`home_phone`
,`mobile_phone`
,`fax_number`
,`address`
,`city`
,`state_province`
,`zip_postal_code`
,`country_region`
,`web_page`
,`notes`
,`attachments`
,`ctr_version`
FROM `northwind`.`suppliers`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`suppliers`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_getbyprojection`
(
IN P_FİELDSFİELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FİELDSFİELD, ' FROM `northwind`.`suppliers`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKİPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`company`,
`last_name`,
`first_name`,
`email_address`,
`job_title`,
`business_phone`,
`home_phone`,
`mobile_phone`,
`fax_number`,
`address`,
`city`,
`state_province`,
`zip_postal_code`,
`country_region`,
`web_page`,
`notes`,
`attachments`,
`ctr_version`
FROM `northwind`.`suppliers`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKİPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKİPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`suppliers`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_suppliers_updateone`
(
IN P_ADDRESS longtext
, IN P_WEB_PAGE longtext
, IN P_NOTES longtext
, INOUT P_İD int(11)
, INOUT P_COMPANY varchar(50)
, INOUT P_LAST_NAME varchar(50)
, INOUT P_FİRST_NAME varchar(50)
, INOUT P_EMAİL_ADDRESS varchar(50)
, INOUT P_JOB_TİTLE varchar(50)
, INOUT P_BUSİNESS_PHONE varchar(25)
, INOUT P_HOME_PHONE varchar(25)
, INOUT P_MOBİLE_PHONE varchar(25)
, INOUT P_FAX_NUMBER varchar(25)
, INOUT P_CİTY varchar(50)
, INOUT P_STATE_PROVİNCE varchar(50)
, INOUT P_ZİP_POSTAL_CODE varchar(15)
, INOUT P_COUNTRY_REGİON varchar(50)
, INOUT P_ATTACHMENTS longblob
, INOUT P_CTR_VERSİON smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 01:22:23
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`suppliers`
WHERE `id` = P_İD
;

IF _currVersion > P_CTR_VERSİON THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`suppliers` WHERE WHERE `id` = P_İD');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`suppliers` WHERE WHERE `id` = P_İD');

END IF;
SET P_CTR_VERSİON := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`suppliers`
SET
`company` = P_COMPANY
,`last_name` = P_LAST_NAME
,`first_name` = P_FİRST_NAME
,`email_address` = P_EMAİL_ADDRESS
,`job_title` = P_JOB_TİTLE
,`business_phone` = P_BUSİNESS_PHONE
,`home_phone` = P_HOME_PHONE
,`mobile_phone` = P_MOBİLE_PHONE
,`fax_number` = P_FAX_NUMBER
,`address` = P_ADDRESS
,`city` = P_CİTY
,`state_province` = P_STATE_PROVİNCE
,`zip_postal_code` = P_ZİP_POSTAL_CODE
,`country_region` = P_COUNTRY_REGİON
,`web_page` = P_WEB_PAGE
,`notes` = P_NOTES
,`attachments` = P_ATTACHMENTS
,`ctr_version` = P_CTR_VERSİON
WHERE 
id = P_İD
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,company
,last_name
,first_name
,email_address
,job_title
,business_phone
,home_phone
,mobile_phone
,fax_number
,city
,state_province
,zip_postal_code
,country_region
,attachments
,ctr_version
INTO 
P_İD
,P_COMPANY
,P_LAST_NAME
,P_FİRST_NAME
,P_EMAİL_ADDRESS
,P_JOB_TİTLE
,P_BUSİNESS_PHONE
,P_HOME_PHONE
,P_MOBİLE_PHONE
,P_FAX_NUMBER
,P_CİTY
,P_STATE_PROVİNCE
,P_ZİP_POSTAL_CODE
,P_COUNTRY_REGİON
,P_ATTACHMENTS
,P_CTR_VERSİON
FROM `northwind`.`suppliers`
WHERE id = P_İD
;
END
$$
DELIMITER ;


