/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOShippers.
	///It maintains a collection of BOOrders objects.
	///</Summary>
	public partial class BOShippers : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _shipperID;
		protected string _companyName;
		protected string _phone;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOOrders> _boOrdersCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOShippers()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 shipperID
		///</parameters>
		public BOShippers(Int32 shipperID)
		{
			try
			{
				DAOShippers daoShippers = DAOShippers.SelectOne(shipperID);
				_shipperID = daoShippers.ShipperID;
				_companyName = daoShippers.CompanyName;
				_phone = daoShippers.Phone;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOShippers
		///</parameters>
		protected internal BOShippers(DAOShippers daoShippers)
		{
			try
			{
				_shipperID = daoShippers.ShipperID;
				_companyName = daoShippers.CompanyName;
				_phone = daoShippers.Phone;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Shippers record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOShippers daoShippers = new DAOShippers();
			RegisterDataObject(daoShippers);
			BeginTransaction("savenewBOShippers");
			try
			{
				daoShippers.CompanyName = _companyName;
				daoShippers.Phone = _phone;
				daoShippers.Insert();
				CommitTransaction();
				
				_shipperID = daoShippers.ShipperID;
				_companyName = daoShippers.CompanyName;
				_phone = daoShippers.Phone;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOShippers");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Shippers record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOShippers
		///</parameters>
		public virtual void Update()
		{
			DAOShippers daoShippers = new DAOShippers();
			RegisterDataObject(daoShippers);
			BeginTransaction("updateBOShippers");
			try
			{
				daoShippers.ShipperID = _shipperID;
				daoShippers.CompanyName = _companyName;
				daoShippers.Phone = _phone;
				daoShippers.Update();
				CommitTransaction();
				
				_shipperID = daoShippers.ShipperID;
				_companyName = daoShippers.CompanyName;
				_phone = daoShippers.Phone;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOShippers");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Shippers record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOShippers daoShippers = new DAOShippers();
			RegisterDataObject(daoShippers);
			BeginTransaction("deleteBOShippers");
			try
			{
				daoShippers.ShipperID = _shipperID;
				daoShippers.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOShippers");
				throw;
			}
		}
		
		///<Summary>
		///ShippersCollection
		///This method returns the collection of BOShippers objects
		///</Summary>
		///<returns>
		///List[BOShippers]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOShippers> ShippersCollection()
		{
			try
			{
				IList<BOShippers> boShippersCollection = new List<BOShippers>();
				IList<DAOShippers> daoShippersCollection = DAOShippers.SelectAll();
			
				foreach(DAOShippers daoShippers in daoShippersCollection)
					boShippersCollection.Add(new BOShippers(daoShippers));
			
				return boShippersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ShippersCollectionCount
		///This method returns the collection count of BOShippers objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ShippersCollectionCount()
		{
			try
			{
				Int32 objCount = DAOShippers.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///OrdersCollection
		///This method returns its collection of BOOrders objects
		///</Summary>
		///<returns>
		///IList[BOOrders]
		///</returns>
		///<parameters>
		///BOShippers
		///</parameters>
		public virtual IList<BOOrders> OrdersCollection()
		{
			try
			{
				if(_boOrdersCollection == null)
					LoadOrdersCollection();
				
				return _boOrdersCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOShippers>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOShippers.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ShippersCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOShippers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boShippersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOShippers> daoShippersCollection = DAOShippers.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOShippers resdaoShippers in daoShippersCollection)
					boShippersCollection.Add((T)(object)new BOShippers(resdaoShippers));
			
				return boShippersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///ShippersCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOShippers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOShippers.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadOrdersCollection
		///This method loads the internal collection of BOOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrdersCollection()
		{
			try
			{
				_boOrdersCollection = new List<BOOrders>();
				IList<DAOOrders> daoOrdersCollection = DAOOrders.SelectAllByShipVia(_shipperID.Value);
				
				foreach(DAOOrders daoOrders in daoOrdersCollection)
					_boOrdersCollection.Add(new BOOrders(daoOrders));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddOrders
		///This method persists a BOOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrders
		///</parameters>
		public virtual void AddOrders(BOOrders boOrders)
		{
			DAOOrders daoOrders = new DAOOrders();
			RegisterDataObject(daoOrders);
			BeginTransaction("addOrders");
			try
			{
				daoOrders.OrderID = boOrders.OrderID;
				daoOrders.CustomerID = boOrders.CustomerID;
				daoOrders.EmployeeID = boOrders.EmployeeID;
				daoOrders.OrderDate = boOrders.OrderDate;
				daoOrders.RequiredDate = boOrders.RequiredDate;
				daoOrders.ShippedDate = boOrders.ShippedDate;
				daoOrders.Freight = boOrders.Freight;
				daoOrders.ShipName = boOrders.ShipName;
				daoOrders.ShipAddress = boOrders.ShipAddress;
				daoOrders.ShipCity = boOrders.ShipCity;
				daoOrders.ShipRegion = boOrders.ShipRegion;
				daoOrders.ShipPostalCode = boOrders.ShipPostalCode;
				daoOrders.ShipCountry = boOrders.ShipCountry;
				daoOrders.ShipVia = _shipperID.Value;
				daoOrders.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boOrders = new BOOrders(daoOrders);
				if(_boOrdersCollection != null)
					_boOrdersCollection.Add(boOrders);
			}
			catch
			{
				RollbackTransaction("addOrders");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllOrders
		///This method deletes all BOOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrders()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllOrders");
			try
			{
				DAOOrders.DeleteAllByShipVia(ConnectionProvider, _shipperID.Value);
				CommitTransaction();
				if(_boOrdersCollection != null)
				{
					_boOrdersCollection.Clear();
					_boOrdersCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllOrders");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? ShipperID
		{
			get
			{
				 return _shipperID;
			}
			set
			{
				_shipperID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyName
		{
			get
			{
				 return _companyName;
			}
			set
			{
				_companyName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
