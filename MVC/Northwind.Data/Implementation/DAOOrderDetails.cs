/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using Northwind.Data.Interfaces;

namespace Northwind.Data
{
	public partial class DAOOrderDetails : zNorthwindConn_BaseData, IDAOOrderDetails
	{
		#region member variables
		protected string _id;
		protected string _orderİd;
		protected string _productİd;
		protected string _quantity;
		protected string _unitPrice;
		protected double? _discount;
		protected string _statusİd;
		protected string _dateAllocated;
		protected string _purchaseOrderİd;
		protected string _inventoryİd;
		protected string _ctrVersion;
		#endregion

		#region class methods
		public DAOOrderDetails()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table order_details based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOOrderDetails
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public static IDAOOrderDetails SelectOne(string id)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				DAOOrderDetails retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrderDetails();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? null : (string)dt.Rows[0]["id"];
					retObj._orderİd					 = Convert.IsDBNull(dt.Rows[0]["order_id"]) ? null : (string)dt.Rows[0]["order_id"];
					retObj._productİd					 = Convert.IsDBNull(dt.Rows[0]["product_id"]) ? null : (string)dt.Rows[0]["product_id"];
					retObj._quantity					 = Convert.IsDBNull(dt.Rows[0]["quantity"]) ? null : (string)dt.Rows[0]["quantity"];
					retObj._unitPrice					 = Convert.IsDBNull(dt.Rows[0]["unit_price"]) ? null : (string)dt.Rows[0]["unit_price"];
					retObj._discount					 = Convert.IsDBNull(dt.Rows[0]["discount"]) ? (double?)null : (double?)dt.Rows[0]["discount"];
					retObj._statusİd					 = Convert.IsDBNull(dt.Rows[0]["status_id"]) ? null : (string)dt.Rows[0]["status_id"];
					retObj._dateAllocated					 = Convert.IsDBNull(dt.Rows[0]["date_allocated"]) ? null : (string)dt.Rows[0]["date_allocated"];
					retObj._purchaseOrderİd					 = Convert.IsDBNull(dt.Rows[0]["purchase_order_id"]) ? null : (string)dt.Rows[0]["purchase_order_id"];
					retObj._inventoryİd					 = Convert.IsDBNull(dt.Rows[0]["inventory_id"]) ? null : (string)dt.Rows[0]["inventory_id"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? null : (string)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table order_details based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);


			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table order_details based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrderDetails.
		///</returns>
		///<parameters>
		///string orderİd
		///</parameters>
		public static List<IDAOOrderDetails> SelectAllByOrderİd(string orderİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbyorderid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrderDetails> objList = new List<IDAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._productİd					 = Convert.IsDBNull(row["product_id"]) ? null : (string)row["product_id"];
						retObj._quantity					 = Convert.IsDBNull(row["quantity"]) ? null : (string)row["quantity"];
						retObj._unitPrice					 = Convert.IsDBNull(row["unit_price"]) ? null : (string)row["unit_price"];
						retObj._discount					 = Convert.IsDBNull(row["discount"]) ? (double?)null : (double?)row["discount"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._dateAllocated					 = Convert.IsDBNull(row["date_allocated"]) ? null : (string)row["date_allocated"];
						retObj._purchaseOrderİd					 = Convert.IsDBNull(row["purchase_order_id"]) ? null : (string)row["purchase_order_id"];
						retObj._inventoryİd					 = Convert.IsDBNull(row["inventory_id"]) ? null : (string)row["inventory_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string orderİd
		///</parameters>
		public static Int32 SelectAllByOrderİdCount(string orderİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbyorderidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table order_details with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string orderİd
		///</parameters>
		public static void DeleteAllByOrderİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string orderİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_deletebyorderid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table order_details based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrderDetails.
		///</returns>
		///<parameters>
		///string productİd
		///</parameters>
		public static List<IDAOOrderDetails> SelectAllByProductİd(string productİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbyproductid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)productİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrderDetails> objList = new List<IDAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._productİd					 = Convert.IsDBNull(row["product_id"]) ? null : (string)row["product_id"];
						retObj._quantity					 = Convert.IsDBNull(row["quantity"]) ? null : (string)row["quantity"];
						retObj._unitPrice					 = Convert.IsDBNull(row["unit_price"]) ? null : (string)row["unit_price"];
						retObj._discount					 = Convert.IsDBNull(row["discount"]) ? (double?)null : (double?)row["discount"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._dateAllocated					 = Convert.IsDBNull(row["date_allocated"]) ? null : (string)row["date_allocated"];
						retObj._purchaseOrderİd					 = Convert.IsDBNull(row["purchase_order_id"]) ? null : (string)row["purchase_order_id"];
						retObj._inventoryİd					 = Convert.IsDBNull(row["inventory_id"]) ? null : (string)row["inventory_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string productİd
		///</parameters>
		public static Int32 SelectAllByProductİdCount(string productİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbyproductidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)productİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table order_details with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string productİd
		///</parameters>
		public static void DeleteAllByProductİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string productİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_deletebyproductid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)productİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table order_details based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOOrderDetails.
		///</returns>
		///<parameters>
		///string statusİd
		///</parameters>
		public static List<IDAOOrderDetails> SelectAllByStatusİd(string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbystatusid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrderDetails> objList = new List<IDAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._productİd					 = Convert.IsDBNull(row["product_id"]) ? null : (string)row["product_id"];
						retObj._quantity					 = Convert.IsDBNull(row["quantity"]) ? null : (string)row["quantity"];
						retObj._unitPrice					 = Convert.IsDBNull(row["unit_price"]) ? null : (string)row["unit_price"];
						retObj._discount					 = Convert.IsDBNull(row["discount"]) ? (double?)null : (double?)row["discount"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._dateAllocated					 = Convert.IsDBNull(row["date_allocated"]) ? null : (string)row["date_allocated"];
						retObj._purchaseOrderİd					 = Convert.IsDBNull(row["purchase_order_id"]) ? null : (string)row["purchase_order_id"];
						retObj._inventoryİd					 = Convert.IsDBNull(row["inventory_id"]) ? null : (string)row["inventory_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string statusİd
		///</parameters>
		public static Int32 SelectAllByStatusİdCount(string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbystatusidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table order_details with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string statusİd
		///</parameters>
		public static void DeleteAllByStatusİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_deletebystatusid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table order_details
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _orderİd));
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _productİd));
				command.Parameters.Add(new MySqlParameter("?P_QUANTİTY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 18, 4, "", DataRowVersion.Proposed, _quantity));
				command.Parameters.Add(new MySqlParameter("?P_UNİT_PRİCE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _unitPrice));
				command.Parameters.Add(new MySqlParameter("?P_DİSCOUNT", MySqlDbType.Double, 0, ParameterDirection.InputOutput, true, 22, 0, "", DataRowVersion.Proposed, _discount));
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _statusİd));
				command.Parameters.Add(new MySqlParameter("?P_DATE_ALLOCATED", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dateAllocated));
				command.Parameters.Add(new MySqlParameter("?P_PURCHASE_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _purchaseOrderİd));
				command.Parameters.Add(new MySqlParameter("?P_İNVENTORY_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inventoryİd));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.Output, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_orderİd					 = Convert.IsDBNull(command.Parameters["?P_ORDER_İD"].Value) ? null : (string)command.Parameters["?P_ORDER_İD"].Value;
				_productİd					 = Convert.IsDBNull(command.Parameters["?P_PRODUCT_İD"].Value) ? null : (string)command.Parameters["?P_PRODUCT_İD"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["?P_QUANTİTY"].Value) ? null : (string)command.Parameters["?P_QUANTİTY"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["?P_UNİT_PRİCE"].Value) ? null : (string)command.Parameters["?P_UNİT_PRİCE"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["?P_DİSCOUNT"].Value) ? (double?)null : (double?)command.Parameters["?P_DİSCOUNT"].Value;
				_statusİd					 = Convert.IsDBNull(command.Parameters["?P_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_STATUS_İD"].Value;
				_dateAllocated					 = Convert.IsDBNull(command.Parameters["?P_DATE_ALLOCATED"].Value) ? null : (string)command.Parameters["?P_DATE_ALLOCATED"].Value;
				_purchaseOrderİd					 = Convert.IsDBNull(command.Parameters["?P_PURCHASE_ORDER_İD"].Value) ? null : (string)command.Parameters["?P_PURCHASE_ORDER_İD"].Value;
				_inventoryİd					 = Convert.IsDBNull(command.Parameters["?P_İNVENTORY_İD"].Value) ? null : (string)command.Parameters["?P_İNVENTORY_İD"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table order_details
		///</Summary>
		///<returns>
		///List-IDAOOrderDetails.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<IDAOOrderDetails> SelectAll()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrderDetails> objList = new List<IDAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._productİd					 = Convert.IsDBNull(row["product_id"]) ? null : (string)row["product_id"];
						retObj._quantity					 = Convert.IsDBNull(row["quantity"]) ? null : (string)row["quantity"];
						retObj._unitPrice					 = Convert.IsDBNull(row["unit_price"]) ? null : (string)row["unit_price"];
						retObj._discount					 = Convert.IsDBNull(row["discount"]) ? (double?)null : (double?)row["discount"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._dateAllocated					 = Convert.IsDBNull(row["date_allocated"]) ? null : (string)row["date_allocated"];
						retObj._purchaseOrderİd					 = Convert.IsDBNull(row["purchase_order_id"]) ? null : (string)row["purchase_order_id"];
						retObj._inventoryİd					 = Convert.IsDBNull(row["inventory_id"]) ? null : (string)row["inventory_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiorder_details
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_FİELDSFİELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "id", true) == 0) lst.Add(Convert.IsDBNull(row["id"]) ? null : (string)row["id"]);
						if (string.Compare(projection.Member, "order_id", true) == 0) lst.Add(Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"]);
						if (string.Compare(projection.Member, "product_id", true) == 0) lst.Add(Convert.IsDBNull(row["product_id"]) ? null : (string)row["product_id"]);
						if (string.Compare(projection.Member, "quantity", true) == 0) lst.Add(Convert.IsDBNull(row["quantity"]) ? null : (string)row["quantity"]);
						if (string.Compare(projection.Member, "unit_price", true) == 0) lst.Add(Convert.IsDBNull(row["unit_price"]) ? null : (string)row["unit_price"]);
						if (string.Compare(projection.Member, "discount", true) == 0) lst.Add(Convert.IsDBNull(row["discount"]) ? (double?)null : (double?)row["discount"]);
						if (string.Compare(projection.Member, "status_id", true) == 0) lst.Add(Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"]);
						if (string.Compare(projection.Member, "date_allocated", true) == 0) lst.Add(Convert.IsDBNull(row["date_allocated"]) ? null : (string)row["date_allocated"]);
						if (string.Compare(projection.Member, "purchase_order_id", true) == 0) lst.Add(Convert.IsDBNull(row["purchase_order_id"]) ? null : (string)row["purchase_order_id"]);
						if (string.Compare(projection.Member, "inventory_id", true) == 0) lst.Add(Convert.IsDBNull(row["inventory_id"]) ? null : (string)row["inventory_id"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api order_details
		///</Summary>
		///<returns>
		///List-IDAOOrderDetails.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<IDAOOrderDetails> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("order_details");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOOrderDetails> objList = new List<IDAOOrderDetails>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrderDetails retObj = new DAOOrderDetails();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._productİd					 = Convert.IsDBNull(row["product_id"]) ? null : (string)row["product_id"];
						retObj._quantity					 = Convert.IsDBNull(row["quantity"]) ? null : (string)row["quantity"];
						retObj._unitPrice					 = Convert.IsDBNull(row["unit_price"]) ? null : (string)row["unit_price"];
						retObj._discount					 = Convert.IsDBNull(row["discount"]) ? (double?)null : (double?)row["discount"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._dateAllocated					 = Convert.IsDBNull(row["date_allocated"]) ? null : (string)row["date_allocated"];
						retObj._purchaseOrderİd					 = Convert.IsDBNull(row["purchase_order_id"]) ? null : (string)row["purchase_order_id"];
						retObj._inventoryİd					 = Convert.IsDBNull(row["inventory_id"]) ? null : (string)row["inventory_id"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api order_details
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table order_details based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_order_details_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _orderİd));
				command.Parameters.Add(new MySqlParameter("?P_PRODUCT_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _productİd));
				command.Parameters.Add(new MySqlParameter("?P_QUANTİTY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 18, 4, "", DataRowVersion.Proposed, _quantity));
				command.Parameters.Add(new MySqlParameter("?P_UNİT_PRİCE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _unitPrice));
				command.Parameters.Add(new MySqlParameter("?P_DİSCOUNT", MySqlDbType.Double, 0, ParameterDirection.InputOutput, true, 22, 0, "", DataRowVersion.Proposed, _discount));
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _statusİd));
				command.Parameters.Add(new MySqlParameter("?P_DATE_ALLOCATED", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dateAllocated));
				command.Parameters.Add(new MySqlParameter("?P_PURCHASE_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _purchaseOrderİd));
				command.Parameters.Add(new MySqlParameter("?P_İNVENTORY_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _inventoryİd));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_orderİd					 = Convert.IsDBNull(command.Parameters["?P_ORDER_İD"].Value) ? null : (string)command.Parameters["?P_ORDER_İD"].Value;
				_productİd					 = Convert.IsDBNull(command.Parameters["?P_PRODUCT_İD"].Value) ? null : (string)command.Parameters["?P_PRODUCT_İD"].Value;
				_quantity					 = Convert.IsDBNull(command.Parameters["?P_QUANTİTY"].Value) ? null : (string)command.Parameters["?P_QUANTİTY"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["?P_UNİT_PRİCE"].Value) ? null : (string)command.Parameters["?P_UNİT_PRİCE"].Value;
				_discount					 = Convert.IsDBNull(command.Parameters["?P_DİSCOUNT"].Value) ? (double?)null : (double?)command.Parameters["?P_DİSCOUNT"].Value;
				_statusİd					 = Convert.IsDBNull(command.Parameters["?P_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_STATUS_İD"].Value;
				_dateAllocated					 = Convert.IsDBNull(command.Parameters["?P_DATE_ALLOCATED"].Value) ? null : (string)command.Parameters["?P_DATE_ALLOCATED"].Value;
				_purchaseOrderİd					 = Convert.IsDBNull(command.Parameters["?P_PURCHASE_ORDER_İD"].Value) ? null : (string)command.Parameters["?P_PURCHASE_ORDER_İD"].Value;
				_inventoryİd					 = Convert.IsDBNull(command.Parameters["?P_İNVENTORY_İD"].Value) ? null : (string)command.Parameters["?P_İNVENTORY_İD"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public string İd
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}
		public string Orderİd
		{
			get
			{
				return _orderİd;
			}
			set
			{
				_orderİd = value;
			}
		}
		public string Productİd
		{
			get
			{
				return _productİd;
			}
			set
			{
				_productİd = value;
			}
		}
		public string Quantity
		{
			get
			{
				return _quantity;
			}
			set
			{
				_quantity = value;
			}
		}
		public string UnitPrice
		{
			get
			{
				return _unitPrice;
			}
			set
			{
				_unitPrice = value;
			}
		}
		public double? Discount
		{
			get
			{
				return _discount;
			}
			set
			{
				_discount = value;
			}
		}
		public string Statusİd
		{
			get
			{
				return _statusİd;
			}
			set
			{
				_statusİd = value;
			}
		}
		public string DateAllocated
		{
			get
			{
				return _dateAllocated;
			}
			set
			{
				_dateAllocated = value;
			}
		}
		public string PurchaseOrderİd
		{
			get
			{
				return _purchaseOrderİd;
			}
			set
			{
				_purchaseOrderİd = value;
			}
		}
		public string İnventoryİd
		{
			get
			{
				return _inventoryİd;
			}
			set
			{
				_inventoryİd = value;
			}
		}
		public string CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}
