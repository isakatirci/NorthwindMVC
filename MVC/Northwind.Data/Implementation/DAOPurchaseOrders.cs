/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using Northwind.Data.Interfaces;

namespace Northwind.Data
{
	public partial class DAOPurchaseOrders : zNorthwindConn_BaseData, IDAOPurchaseOrders
	{
		#region member variables
		protected string _id;
		protected string _supplierİd;
		protected string _createdBy;
		protected string _submittedDate;
		protected string _creationDate;
		protected string _statusİd;
		protected string _expectedDate;
		protected string _shippingFee;
		protected string _taxes;
		protected string _paymentDate;
		protected string _paymentAmount;
		protected string _paymentMethod;
		protected string _notes;
		protected string _approvedBy;
		protected string _approvedDate;
		protected string _submittedBy;
		protected string _ctrVersion;
		#endregion

		#region class methods
		public DAOPurchaseOrders()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table purchase_orders based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOPurchaseOrders
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public static IDAOPurchaseOrders SelectOne(string id)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				DAOPurchaseOrders retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOPurchaseOrders();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? null : (string)dt.Rows[0]["id"];
					retObj._supplierİd					 = Convert.IsDBNull(dt.Rows[0]["supplier_id"]) ? null : (string)dt.Rows[0]["supplier_id"];
					retObj._createdBy					 = Convert.IsDBNull(dt.Rows[0]["created_by"]) ? null : (string)dt.Rows[0]["created_by"];
					retObj._submittedDate					 = Convert.IsDBNull(dt.Rows[0]["submitted_date"]) ? null : (string)dt.Rows[0]["submitted_date"];
					retObj._creationDate					 = Convert.IsDBNull(dt.Rows[0]["creation_date"]) ? null : (string)dt.Rows[0]["creation_date"];
					retObj._statusİd					 = Convert.IsDBNull(dt.Rows[0]["status_id"]) ? null : (string)dt.Rows[0]["status_id"];
					retObj._expectedDate					 = Convert.IsDBNull(dt.Rows[0]["expected_date"]) ? null : (string)dt.Rows[0]["expected_date"];
					retObj._shippingFee					 = Convert.IsDBNull(dt.Rows[0]["shipping_fee"]) ? null : (string)dt.Rows[0]["shipping_fee"];
					retObj._taxes					 = Convert.IsDBNull(dt.Rows[0]["taxes"]) ? null : (string)dt.Rows[0]["taxes"];
					retObj._paymentDate					 = Convert.IsDBNull(dt.Rows[0]["payment_date"]) ? null : (string)dt.Rows[0]["payment_date"];
					retObj._paymentAmount					 = Convert.IsDBNull(dt.Rows[0]["payment_amount"]) ? null : (string)dt.Rows[0]["payment_amount"];
					retObj._paymentMethod					 = Convert.IsDBNull(dt.Rows[0]["payment_method"]) ? null : (string)dt.Rows[0]["payment_method"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["notes"]) ? null : (string)dt.Rows[0]["notes"];
					retObj._approvedBy					 = Convert.IsDBNull(dt.Rows[0]["approved_by"]) ? null : (string)dt.Rows[0]["approved_by"];
					retObj._approvedDate					 = Convert.IsDBNull(dt.Rows[0]["approved_date"]) ? null : (string)dt.Rows[0]["approved_date"];
					retObj._submittedBy					 = Convert.IsDBNull(dt.Rows[0]["submitted_by"]) ? null : (string)dt.Rows[0]["submitted_by"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? null : (string)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table purchase_orders based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);


			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table purchase_orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOPurchaseOrders.
		///</returns>
		///<parameters>
		///string supplierİd
		///</parameters>
		public static List<IDAOPurchaseOrders> SelectAllBySupplierİd(string supplierİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbysupplierid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supplierİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOPurchaseOrders> objList = new List<IDAOPurchaseOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrders retObj = new DAOPurchaseOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._supplierİd					 = Convert.IsDBNull(row["supplier_id"]) ? null : (string)row["supplier_id"];
						retObj._createdBy					 = Convert.IsDBNull(row["created_by"]) ? null : (string)row["created_by"];
						retObj._submittedDate					 = Convert.IsDBNull(row["submitted_date"]) ? null : (string)row["submitted_date"];
						retObj._creationDate					 = Convert.IsDBNull(row["creation_date"]) ? null : (string)row["creation_date"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._expectedDate					 = Convert.IsDBNull(row["expected_date"]) ? null : (string)row["expected_date"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentDate					 = Convert.IsDBNull(row["payment_date"]) ? null : (string)row["payment_date"];
						retObj._paymentAmount					 = Convert.IsDBNull(row["payment_amount"]) ? null : (string)row["payment_amount"];
						retObj._paymentMethod					 = Convert.IsDBNull(row["payment_method"]) ? null : (string)row["payment_method"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._approvedBy					 = Convert.IsDBNull(row["approved_by"]) ? null : (string)row["approved_by"];
						retObj._approvedDate					 = Convert.IsDBNull(row["approved_date"]) ? null : (string)row["approved_date"];
						retObj._submittedBy					 = Convert.IsDBNull(row["submitted_by"]) ? null : (string)row["submitted_by"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string supplierİd
		///</parameters>
		public static Int32 SelectAllBySupplierİdCount(string supplierİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbysupplieridcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supplierİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table purchase_orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string supplierİd
		///</parameters>
		public static void DeleteAllBySupplierİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string supplierİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_deletebysupplierid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supplierİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table purchase_orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOPurchaseOrders.
		///</returns>
		///<parameters>
		///string createdBy
		///</parameters>
		public static List<IDAOPurchaseOrders> SelectAllByCreatedBy(string createdBy)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbycreatedby";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_CREATED_BY", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)createdBy?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOPurchaseOrders> objList = new List<IDAOPurchaseOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrders retObj = new DAOPurchaseOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._supplierİd					 = Convert.IsDBNull(row["supplier_id"]) ? null : (string)row["supplier_id"];
						retObj._createdBy					 = Convert.IsDBNull(row["created_by"]) ? null : (string)row["created_by"];
						retObj._submittedDate					 = Convert.IsDBNull(row["submitted_date"]) ? null : (string)row["submitted_date"];
						retObj._creationDate					 = Convert.IsDBNull(row["creation_date"]) ? null : (string)row["creation_date"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._expectedDate					 = Convert.IsDBNull(row["expected_date"]) ? null : (string)row["expected_date"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentDate					 = Convert.IsDBNull(row["payment_date"]) ? null : (string)row["payment_date"];
						retObj._paymentAmount					 = Convert.IsDBNull(row["payment_amount"]) ? null : (string)row["payment_amount"];
						retObj._paymentMethod					 = Convert.IsDBNull(row["payment_method"]) ? null : (string)row["payment_method"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._approvedBy					 = Convert.IsDBNull(row["approved_by"]) ? null : (string)row["approved_by"];
						retObj._approvedDate					 = Convert.IsDBNull(row["approved_date"]) ? null : (string)row["approved_date"];
						retObj._submittedBy					 = Convert.IsDBNull(row["submitted_by"]) ? null : (string)row["submitted_by"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string createdBy
		///</parameters>
		public static Int32 SelectAllByCreatedByCount(string createdBy)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbycreatedbycount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_CREATED_BY", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)createdBy?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table purchase_orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string createdBy
		///</parameters>
		public static void DeleteAllByCreatedBy(IzNorthwindConn_TxConnectionProvider connectionProvider, string createdBy)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_deletebycreatedby";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_CREATED_BY", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)createdBy?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table purchase_orders based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOPurchaseOrders.
		///</returns>
		///<parameters>
		///string statusİd
		///</parameters>
		public static List<IDAOPurchaseOrders> SelectAllByStatusİd(string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbystatusid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOPurchaseOrders> objList = new List<IDAOPurchaseOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrders retObj = new DAOPurchaseOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._supplierİd					 = Convert.IsDBNull(row["supplier_id"]) ? null : (string)row["supplier_id"];
						retObj._createdBy					 = Convert.IsDBNull(row["created_by"]) ? null : (string)row["created_by"];
						retObj._submittedDate					 = Convert.IsDBNull(row["submitted_date"]) ? null : (string)row["submitted_date"];
						retObj._creationDate					 = Convert.IsDBNull(row["creation_date"]) ? null : (string)row["creation_date"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._expectedDate					 = Convert.IsDBNull(row["expected_date"]) ? null : (string)row["expected_date"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentDate					 = Convert.IsDBNull(row["payment_date"]) ? null : (string)row["payment_date"];
						retObj._paymentAmount					 = Convert.IsDBNull(row["payment_amount"]) ? null : (string)row["payment_amount"];
						retObj._paymentMethod					 = Convert.IsDBNull(row["payment_method"]) ? null : (string)row["payment_method"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._approvedBy					 = Convert.IsDBNull(row["approved_by"]) ? null : (string)row["approved_by"];
						retObj._approvedDate					 = Convert.IsDBNull(row["approved_date"]) ? null : (string)row["approved_date"];
						retObj._submittedBy					 = Convert.IsDBNull(row["submitted_by"]) ? null : (string)row["submitted_by"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string statusİd
		///</parameters>
		public static Int32 SelectAllByStatusİdCount(string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbystatusidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table purchase_orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string statusİd
		///</parameters>
		public static void DeleteAllByStatusİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string statusİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_deletebystatusid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)statusİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table purchase_orders
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_NOTES", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _supplierİd));
				command.Parameters.Add(new MySqlParameter("?P_CREATED_BY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				command.Parameters.Add(new MySqlParameter("?P_SUBMİTTED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _submittedDate));
				command.Parameters.Add(new MySqlParameter("?P_CREATİON_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _creationDate));
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _statusİd));
				command.Parameters.Add(new MySqlParameter("?P_EXPECTED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _expectedDate));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPİNG_FEE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _shippingFee));
				command.Parameters.Add(new MySqlParameter("?P_TAXES", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _taxes));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paymentDate));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_AMOUNT", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _paymentAmount));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_METHOD", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paymentMethod));
				command.Parameters.Add(new MySqlParameter("?P_APPROVED_BY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _approvedBy));
				command.Parameters.Add(new MySqlParameter("?P_APPROVED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _approvedDate));
				command.Parameters.Add(new MySqlParameter("?P_SUBMİTTED_BY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _submittedBy));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.Output, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_supplierİd					 = Convert.IsDBNull(command.Parameters["?P_SUPPLİER_İD"].Value) ? null : (string)command.Parameters["?P_SUPPLİER_İD"].Value;
				_createdBy					 = Convert.IsDBNull(command.Parameters["?P_CREATED_BY"].Value) ? null : (string)command.Parameters["?P_CREATED_BY"].Value;
				_submittedDate					 = Convert.IsDBNull(command.Parameters["?P_SUBMİTTED_DATE"].Value) ? null : (string)command.Parameters["?P_SUBMİTTED_DATE"].Value;
				_creationDate					 = Convert.IsDBNull(command.Parameters["?P_CREATİON_DATE"].Value) ? null : (string)command.Parameters["?P_CREATİON_DATE"].Value;
				_statusİd					 = Convert.IsDBNull(command.Parameters["?P_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_STATUS_İD"].Value;
				_expectedDate					 = Convert.IsDBNull(command.Parameters["?P_EXPECTED_DATE"].Value) ? null : (string)command.Parameters["?P_EXPECTED_DATE"].Value;
				_shippingFee					 = Convert.IsDBNull(command.Parameters["?P_SHİPPİNG_FEE"].Value) ? null : (string)command.Parameters["?P_SHİPPİNG_FEE"].Value;
				_taxes					 = Convert.IsDBNull(command.Parameters["?P_TAXES"].Value) ? null : (string)command.Parameters["?P_TAXES"].Value;
				_paymentDate					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_DATE"].Value) ? null : (string)command.Parameters["?P_PAYMENT_DATE"].Value;
				_paymentAmount					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_AMOUNT"].Value) ? null : (string)command.Parameters["?P_PAYMENT_AMOUNT"].Value;
				_paymentMethod					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_METHOD"].Value) ? null : (string)command.Parameters["?P_PAYMENT_METHOD"].Value;
				_approvedBy					 = Convert.IsDBNull(command.Parameters["?P_APPROVED_BY"].Value) ? null : (string)command.Parameters["?P_APPROVED_BY"].Value;
				_approvedDate					 = Convert.IsDBNull(command.Parameters["?P_APPROVED_DATE"].Value) ? null : (string)command.Parameters["?P_APPROVED_DATE"].Value;
				_submittedBy					 = Convert.IsDBNull(command.Parameters["?P_SUBMİTTED_BY"].Value) ? null : (string)command.Parameters["?P_SUBMİTTED_BY"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table purchase_orders
		///</Summary>
		///<returns>
		///List-IDAOPurchaseOrders.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<IDAOPurchaseOrders> SelectAll()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOPurchaseOrders> objList = new List<IDAOPurchaseOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrders retObj = new DAOPurchaseOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._supplierİd					 = Convert.IsDBNull(row["supplier_id"]) ? null : (string)row["supplier_id"];
						retObj._createdBy					 = Convert.IsDBNull(row["created_by"]) ? null : (string)row["created_by"];
						retObj._submittedDate					 = Convert.IsDBNull(row["submitted_date"]) ? null : (string)row["submitted_date"];
						retObj._creationDate					 = Convert.IsDBNull(row["creation_date"]) ? null : (string)row["creation_date"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._expectedDate					 = Convert.IsDBNull(row["expected_date"]) ? null : (string)row["expected_date"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentDate					 = Convert.IsDBNull(row["payment_date"]) ? null : (string)row["payment_date"];
						retObj._paymentAmount					 = Convert.IsDBNull(row["payment_amount"]) ? null : (string)row["payment_amount"];
						retObj._paymentMethod					 = Convert.IsDBNull(row["payment_method"]) ? null : (string)row["payment_method"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._approvedBy					 = Convert.IsDBNull(row["approved_by"]) ? null : (string)row["approved_by"];
						retObj._approvedDate					 = Convert.IsDBNull(row["approved_date"]) ? null : (string)row["approved_date"];
						retObj._submittedBy					 = Convert.IsDBNull(row["submitted_by"]) ? null : (string)row["submitted_by"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apipurchase_orders
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_FİELDSFİELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "id", true) == 0) lst.Add(Convert.IsDBNull(row["id"]) ? null : (string)row["id"]);
						if (string.Compare(projection.Member, "supplier_id", true) == 0) lst.Add(Convert.IsDBNull(row["supplier_id"]) ? null : (string)row["supplier_id"]);
						if (string.Compare(projection.Member, "created_by", true) == 0) lst.Add(Convert.IsDBNull(row["created_by"]) ? null : (string)row["created_by"]);
						if (string.Compare(projection.Member, "submitted_date", true) == 0) lst.Add(Convert.IsDBNull(row["submitted_date"]) ? null : (string)row["submitted_date"]);
						if (string.Compare(projection.Member, "creation_date", true) == 0) lst.Add(Convert.IsDBNull(row["creation_date"]) ? null : (string)row["creation_date"]);
						if (string.Compare(projection.Member, "status_id", true) == 0) lst.Add(Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"]);
						if (string.Compare(projection.Member, "expected_date", true) == 0) lst.Add(Convert.IsDBNull(row["expected_date"]) ? null : (string)row["expected_date"]);
						if (string.Compare(projection.Member, "shipping_fee", true) == 0) lst.Add(Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"]);
						if (string.Compare(projection.Member, "taxes", true) == 0) lst.Add(Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"]);
						if (string.Compare(projection.Member, "payment_date", true) == 0) lst.Add(Convert.IsDBNull(row["payment_date"]) ? null : (string)row["payment_date"]);
						if (string.Compare(projection.Member, "payment_amount", true) == 0) lst.Add(Convert.IsDBNull(row["payment_amount"]) ? null : (string)row["payment_amount"]);
						if (string.Compare(projection.Member, "payment_method", true) == 0) lst.Add(Convert.IsDBNull(row["payment_method"]) ? null : (string)row["payment_method"]);
						if (string.Compare(projection.Member, "notes", true) == 0) lst.Add(Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"]);
						if (string.Compare(projection.Member, "approved_by", true) == 0) lst.Add(Convert.IsDBNull(row["approved_by"]) ? null : (string)row["approved_by"]);
						if (string.Compare(projection.Member, "approved_date", true) == 0) lst.Add(Convert.IsDBNull(row["approved_date"]) ? null : (string)row["approved_date"]);
						if (string.Compare(projection.Member, "submitted_by", true) == 0) lst.Add(Convert.IsDBNull(row["submitted_by"]) ? null : (string)row["submitted_by"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api purchase_orders
		///</Summary>
		///<returns>
		///List-IDAOPurchaseOrders.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<IDAOPurchaseOrders> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("purchase_orders");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOPurchaseOrders> objList = new List<IDAOPurchaseOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOPurchaseOrders retObj = new DAOPurchaseOrders();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._supplierİd					 = Convert.IsDBNull(row["supplier_id"]) ? null : (string)row["supplier_id"];
						retObj._createdBy					 = Convert.IsDBNull(row["created_by"]) ? null : (string)row["created_by"];
						retObj._submittedDate					 = Convert.IsDBNull(row["submitted_date"]) ? null : (string)row["submitted_date"];
						retObj._creationDate					 = Convert.IsDBNull(row["creation_date"]) ? null : (string)row["creation_date"];
						retObj._statusİd					 = Convert.IsDBNull(row["status_id"]) ? null : (string)row["status_id"];
						retObj._expectedDate					 = Convert.IsDBNull(row["expected_date"]) ? null : (string)row["expected_date"];
						retObj._shippingFee					 = Convert.IsDBNull(row["shipping_fee"]) ? null : (string)row["shipping_fee"];
						retObj._taxes					 = Convert.IsDBNull(row["taxes"]) ? null : (string)row["taxes"];
						retObj._paymentDate					 = Convert.IsDBNull(row["payment_date"]) ? null : (string)row["payment_date"];
						retObj._paymentAmount					 = Convert.IsDBNull(row["payment_amount"]) ? null : (string)row["payment_amount"];
						retObj._paymentMethod					 = Convert.IsDBNull(row["payment_method"]) ? null : (string)row["payment_method"];
						retObj._notes					 = Convert.IsDBNull(row["notes"]) ? null : (string)row["notes"];
						retObj._approvedBy					 = Convert.IsDBNull(row["approved_by"]) ? null : (string)row["approved_by"];
						retObj._approvedDate					 = Convert.IsDBNull(row["approved_date"]) ? null : (string)row["approved_date"];
						retObj._submittedBy					 = Convert.IsDBNull(row["submitted_by"]) ? null : (string)row["submitted_by"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api purchase_orders
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table purchase_orders based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_purchase_orders_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_NOTES", MySqlDbType.LongText, -1, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_SUPPLİER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _supplierİd));
				command.Parameters.Add(new MySqlParameter("?P_CREATED_BY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _createdBy));
				command.Parameters.Add(new MySqlParameter("?P_SUBMİTTED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _submittedDate));
				command.Parameters.Add(new MySqlParameter("?P_CREATİON_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _creationDate));
				command.Parameters.Add(new MySqlParameter("?P_STATUS_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _statusİd));
				command.Parameters.Add(new MySqlParameter("?P_EXPECTED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _expectedDate));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPİNG_FEE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _shippingFee));
				command.Parameters.Add(new MySqlParameter("?P_TAXES", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _taxes));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paymentDate));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_AMOUNT", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _paymentAmount));
				command.Parameters.Add(new MySqlParameter("?P_PAYMENT_METHOD", MySqlDbType.VarChar, 150, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _paymentMethod));
				command.Parameters.Add(new MySqlParameter("?P_APPROVED_BY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _approvedBy));
				command.Parameters.Add(new MySqlParameter("?P_APPROVED_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _approvedDate));
				command.Parameters.Add(new MySqlParameter("?P_SUBMİTTED_BY", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _submittedBy));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_supplierİd					 = Convert.IsDBNull(command.Parameters["?P_SUPPLİER_İD"].Value) ? null : (string)command.Parameters["?P_SUPPLİER_İD"].Value;
				_createdBy					 = Convert.IsDBNull(command.Parameters["?P_CREATED_BY"].Value) ? null : (string)command.Parameters["?P_CREATED_BY"].Value;
				_submittedDate					 = Convert.IsDBNull(command.Parameters["?P_SUBMİTTED_DATE"].Value) ? null : (string)command.Parameters["?P_SUBMİTTED_DATE"].Value;
				_creationDate					 = Convert.IsDBNull(command.Parameters["?P_CREATİON_DATE"].Value) ? null : (string)command.Parameters["?P_CREATİON_DATE"].Value;
				_statusİd					 = Convert.IsDBNull(command.Parameters["?P_STATUS_İD"].Value) ? null : (string)command.Parameters["?P_STATUS_İD"].Value;
				_expectedDate					 = Convert.IsDBNull(command.Parameters["?P_EXPECTED_DATE"].Value) ? null : (string)command.Parameters["?P_EXPECTED_DATE"].Value;
				_shippingFee					 = Convert.IsDBNull(command.Parameters["?P_SHİPPİNG_FEE"].Value) ? null : (string)command.Parameters["?P_SHİPPİNG_FEE"].Value;
				_taxes					 = Convert.IsDBNull(command.Parameters["?P_TAXES"].Value) ? null : (string)command.Parameters["?P_TAXES"].Value;
				_paymentDate					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_DATE"].Value) ? null : (string)command.Parameters["?P_PAYMENT_DATE"].Value;
				_paymentAmount					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_AMOUNT"].Value) ? null : (string)command.Parameters["?P_PAYMENT_AMOUNT"].Value;
				_paymentMethod					 = Convert.IsDBNull(command.Parameters["?P_PAYMENT_METHOD"].Value) ? null : (string)command.Parameters["?P_PAYMENT_METHOD"].Value;
				_approvedBy					 = Convert.IsDBNull(command.Parameters["?P_APPROVED_BY"].Value) ? null : (string)command.Parameters["?P_APPROVED_BY"].Value;
				_approvedDate					 = Convert.IsDBNull(command.Parameters["?P_APPROVED_DATE"].Value) ? null : (string)command.Parameters["?P_APPROVED_DATE"].Value;
				_submittedBy					 = Convert.IsDBNull(command.Parameters["?P_SUBMİTTED_BY"].Value) ? null : (string)command.Parameters["?P_SUBMİTTED_BY"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public string İd
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}
		public string Supplierİd
		{
			get
			{
				return _supplierİd;
			}
			set
			{
				_supplierİd = value;
			}
		}
		public string CreatedBy
		{
			get
			{
				return _createdBy;
			}
			set
			{
				_createdBy = value;
			}
		}
		public string SubmittedDate
		{
			get
			{
				return _submittedDate;
			}
			set
			{
				_submittedDate = value;
			}
		}
		public string CreationDate
		{
			get
			{
				return _creationDate;
			}
			set
			{
				_creationDate = value;
			}
		}
		public string Statusİd
		{
			get
			{
				return _statusİd;
			}
			set
			{
				_statusİd = value;
			}
		}
		public string ExpectedDate
		{
			get
			{
				return _expectedDate;
			}
			set
			{
				_expectedDate = value;
			}
		}
		public string ShippingFee
		{
			get
			{
				return _shippingFee;
			}
			set
			{
				_shippingFee = value;
			}
		}
		public string Taxes
		{
			get
			{
				return _taxes;
			}
			set
			{
				_taxes = value;
			}
		}
		public string PaymentDate
		{
			get
			{
				return _paymentDate;
			}
			set
			{
				_paymentDate = value;
			}
		}
		public string PaymentAmount
		{
			get
			{
				return _paymentAmount;
			}
			set
			{
				_paymentAmount = value;
			}
		}
		public string PaymentMethod
		{
			get
			{
				return _paymentMethod;
			}
			set
			{
				_paymentMethod = value;
			}
		}
		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}
		public string ApprovedBy
		{
			get
			{
				return _approvedBy;
			}
			set
			{
				_approvedBy = value;
			}
		}
		public string ApprovedDate
		{
			get
			{
				return _approvedDate;
			}
			set
			{
				_approvedDate = value;
			}
		}
		public string SubmittedBy
		{
			get
			{
				return _submittedBy;
			}
			set
			{
				_submittedBy = value;
			}
		}
		public string CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}
