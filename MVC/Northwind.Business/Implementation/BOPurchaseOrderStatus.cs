/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPurchaseOrderStatus.
	///It maintains a collection of BOPurchaseOrders objects.
	///</Summary>
	public partial class BOPurchaseOrderStatus : zNorthwindConn_BaseBusiness, IBOPurchaseOrderStatus, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _status;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOPurchaseOrders> _boPurchaseOrdersCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IPurchaseOrderStatusRepository _iPurchaseOrderStatusRepository;
		protected IPurchaseOrdersRepository _iPurchaseOrdersRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPurchaseOrderStatus()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOPurchaseOrderStatus daoPurchaseOrderStatus = _iPurchaseOrderStatusRepository.SelectOne(id);
				_id = daoPurchaseOrderStatus.İd;
				_status = daoPurchaseOrderStatus.Status;
				_ctrVersion = daoPurchaseOrderStatus.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPurchaseOrderStatus
		///</parameters>
		protected internal BOPurchaseOrderStatus(IDAOPurchaseOrderStatus daoPurchaseOrderStatus)
		{
			try
			{
				_id = daoPurchaseOrderStatus.İd;
				_status = daoPurchaseOrderStatus.Status;
				_ctrVersion = daoPurchaseOrderStatus.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PurchaseOrderStatus record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOPurchaseOrderStatus daoPurchaseOrderStatus = _iPurchaseOrderStatusRepository.New();
			RegisterDataObject( _iPurchaseOrderStatusRepository, _iPurchaseOrderStatusRepository.BaseData(daoPurchaseOrderStatus));
			BeginTransaction( _iPurchaseOrderStatusRepository, "savenewBOPurchaseOrderStatus");
			try
			{
				daoPurchaseOrderStatus.İd = _id;
				daoPurchaseOrderStatus.Status = _status;
				_iPurchaseOrderStatusRepository.Insert(daoPurchaseOrderStatus);
				CommitTransaction( _iPurchaseOrderStatusRepository);
				Done(this);
				
				_id = daoPurchaseOrderStatus.İd;
				_status = daoPurchaseOrderStatus.Status;
				_ctrVersion = daoPurchaseOrderStatus.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderStatusRepository, "savenewBOPurchaseOrderStatus");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one PurchaseOrderStatus record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderStatus
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOPurchaseOrderStatus daoPurchaseOrderStatus = _iPurchaseOrderStatusRepository.New();
			RegisterDataObject(_iPurchaseOrderStatusRepository, _iPurchaseOrderStatusRepository.BaseData(daoPurchaseOrderStatus));
			BeginTransaction(_iPurchaseOrderStatusRepository, "updateBOPurchaseOrderStatus");
			try
			{
				daoPurchaseOrderStatus.İd = _id;
				daoPurchaseOrderStatus.Status = _status;
				daoPurchaseOrderStatus.CtrVersion = _ctrVersion;
				_iPurchaseOrderStatusRepository.Update(daoPurchaseOrderStatus);
				CommitTransaction(_iPurchaseOrderStatusRepository);
				Done(this);
				
				_id = daoPurchaseOrderStatus.İd;
				_status = daoPurchaseOrderStatus.Status;
				_ctrVersion = daoPurchaseOrderStatus.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderStatusRepository, "updateBOPurchaseOrderStatus");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PurchaseOrderStatus record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOPurchaseOrderStatus daoPurchaseOrderStatus = _iPurchaseOrderStatusRepository.New();
			RegisterDataObject(_iPurchaseOrderStatusRepository, _iPurchaseOrderStatusRepository.BaseData(daoPurchaseOrderStatus));
			BeginTransaction(_iPurchaseOrderStatusRepository, "deleteBOPurchaseOrderStatus");
			try
			{
				daoPurchaseOrderStatus.İd = _id;
				_iPurchaseOrderStatusRepository.Delete(daoPurchaseOrderStatus);
				CommitTransaction(_iPurchaseOrderStatusRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderStatusRepository, "deleteBOPurchaseOrderStatus");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///PurchaseOrderStatusCollection
		///This method returns the collection of BOPurchaseOrderStatus objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrderStatus]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOPurchaseOrderStatus> PurchaseOrderStatusCollection(IPurchaseOrderStatusRepository iPurchaseOrderStatusRepository)
		{
			Doing(null);
			try
			{
				IList<IBOPurchaseOrderStatus> boPurchaseOrderStatusCollection = new List<IBOPurchaseOrderStatus>();
				IList<IDAOPurchaseOrderStatus> daoPurchaseOrderStatusCollection = iPurchaseOrderStatusRepository.SelectAll();
				Done(null);
				
				foreach(IDAOPurchaseOrderStatus daoPurchaseOrderStatus in daoPurchaseOrderStatusCollection)
					boPurchaseOrderStatusCollection.Add(new BOPurchaseOrderStatus(daoPurchaseOrderStatus));
				
				return boPurchaseOrderStatusCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderStatusCollectionCount
		///This method returns the collection count of BOPurchaseOrderStatus objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PurchaseOrderStatusCollectionCount(IPurchaseOrderStatusRepository iPurchaseOrderStatusRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iPurchaseOrderStatusRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///PurchaseOrderStatusCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOPurchaseOrderStatus>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iPurchaseOrderStatusRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPurchaseOrderStatusCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOPurchaseOrderStatus> daoPurchaseOrderStatusCollection = _iPurchaseOrderStatusRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOPurchaseOrderStatus resdaoPurchaseOrderStatus in daoPurchaseOrderStatusCollection)
					boPurchaseOrderStatusCollection.Add((T)(object)new BOPurchaseOrderStatus(resdaoPurchaseOrderStatus));
				
				return boPurchaseOrderStatusCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOPurchaseOrderStatus objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOPurchaseOrderStatus> boPurchaseOrderStatusCollection = new List<IBOPurchaseOrderStatus>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iPurchaseOrderStatusRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///PurchaseOrdersCollection
		///This method returns its collection of BOPurchaseOrders objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrders]
		///</returns>
		///<parameters>
		///BOPurchaseOrderStatus
		///</parameters>
		public virtual IList<IBOPurchaseOrders> PurchaseOrdersCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrdersCollection == null)
					LoadPurchaseOrdersCollection();
				return _boPurchaseOrdersCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrdersCollection
		///This method loads the internal collection of BOPurchaseOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrdersCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrdersCollection = new List<IBOPurchaseOrders>();
				IList<IDAOPurchaseOrders> daoPurchaseOrdersCollection = _iPurchaseOrdersRepository.SelectAllByStatusİd(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrders daoPurchaseOrders in daoPurchaseOrdersCollection)
					_boPurchaseOrdersCollection.Add(new BOPurchaseOrders(daoPurchaseOrders));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrders
		///This method persists a BOPurchaseOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrders
		///</parameters>
		public virtual void AddPurchaseOrders(IBOPurchaseOrders boPurchaseOrders)
		{
			Doing(this);
			IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.New();
			RegisterDataObject(_iPurchaseOrdersRepository, _iPurchaseOrdersRepository.BaseData(daoPurchaseOrders));
			BeginTransaction(_iPurchaseOrdersRepository, "addPurchaseOrders");
			try
			{
				daoPurchaseOrders.İd = boPurchaseOrders.İd;
				daoPurchaseOrders.Supplierİd = boPurchaseOrders.Supplierİd;
				daoPurchaseOrders.CreatedBy = boPurchaseOrders.CreatedBy;
				daoPurchaseOrders.SubmittedDate = boPurchaseOrders.SubmittedDate;
				daoPurchaseOrders.CreationDate = boPurchaseOrders.CreationDate;
				daoPurchaseOrders.ExpectedDate = boPurchaseOrders.ExpectedDate;
				daoPurchaseOrders.ShippingFee = boPurchaseOrders.ShippingFee;
				daoPurchaseOrders.Taxes = boPurchaseOrders.Taxes;
				daoPurchaseOrders.PaymentDate = boPurchaseOrders.PaymentDate;
				daoPurchaseOrders.PaymentAmount = boPurchaseOrders.PaymentAmount;
				daoPurchaseOrders.PaymentMethod = boPurchaseOrders.PaymentMethod;
				daoPurchaseOrders.Notes = boPurchaseOrders.Notes;
				daoPurchaseOrders.ApprovedBy = boPurchaseOrders.ApprovedBy;
				daoPurchaseOrders.ApprovedDate = boPurchaseOrders.ApprovedDate;
				daoPurchaseOrders.SubmittedBy = boPurchaseOrders.SubmittedBy;
				daoPurchaseOrders.Statusİd = _id;
				_iPurchaseOrdersRepository.Insert(daoPurchaseOrders);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrders = new BOPurchaseOrders(daoPurchaseOrders);
				if(_boPurchaseOrdersCollection != null)
					_boPurchaseOrdersCollection.Add(boPurchaseOrders);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "addPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrders
		///This method deletes all BOPurchaseOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrders()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrdersRepository, null);
			BeginTransaction(_iPurchaseOrdersRepository, "deleteAllPurchaseOrders");
			try
			{
				_iPurchaseOrdersRepository.DeleteAllByStatusİd(_id);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				if(_boPurchaseOrdersCollection != null)
				{
					_boPurchaseOrdersCollection.Clear();
					_boPurchaseOrdersCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "deleteAllPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrderStatusRepository PurchaseOrderStatusRepository
		{
			set
			{
				_iPurchaseOrderStatusRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrdersRepository PurchaseOrdersRepository
		{
			set
			{
				_iPurchaseOrdersRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Status
		{
			get
			{
				 return _status;
			}
			set
			{
				_status = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iPurchaseOrderStatusRepository;	}
			set {	PurchaseOrderStatusRepository = (IPurchaseOrderStatusRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
