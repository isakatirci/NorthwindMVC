/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindRestApi.Data.Interfaces;

namespace NorthwindRestApi.Data
{
	public partial class DAOTerritories : zNorthwindRestApiConn_BaseData, IDAOTerritories
	{
		#region member variables
		protected string _territoryID;
		protected string _territoryDescription;
		protected Int32? _regionID;
		protected Int32? _ctrVersion;
		#endregion

		#region class methods
		public DAOTerritories()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Territories based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOTerritories
		///</returns>
		///<parameters>
		///string territoryID
		///</parameters>
		public static IDAOTerritories SelectOne(string territoryID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Territories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)territoryID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				DAOTerritories retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOTerritories();
					retObj._territoryID					 = Convert.IsDBNull(dt.Rows[0]["TerritoryID"]) ? null : (string)dt.Rows[0]["TerritoryID"];
					retObj._territoryDescription					 = Convert.IsDBNull(dt.Rows[0]["TerritoryDescription"]) ? null : (string)dt.Rows[0]["TerritoryDescription"];
					retObj._regionID					 = Convert.IsDBNull(dt.Rows[0]["RegionID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["RegionID"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Territories based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Territories based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOTerritories.
		///</returns>
		///<parameters>
		///Int32? regionID
		///</parameters>
		public static IList<IDAOTerritories> SelectAllByRegionID(Int32? regionID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_SelectAllByRegionID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Territories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)regionID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOTerritories> objList = new List<IDAOTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTerritories retObj = new DAOTerritories();
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						retObj._territoryDescription					 = Convert.IsDBNull(row["TerritoryDescription"]) ? null : (string)row["TerritoryDescription"];
						retObj._regionID					 = Convert.IsDBNull(row["RegionID"]) ? (Int32?)null : (Int32?)row["RegionID"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? regionID
		///</parameters>
		public static Int32 SelectAllByRegionIDCount(Int32? regionID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_SelectAllByRegionIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)regionID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Territories with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindRestApiConn_TxConnectionProvider connectionProvider, Int32? regionID
		///</parameters>
		public static void DeleteAllByRegionID(IzNorthwindRestApiConn_TxConnectionProvider connectionProvider, Int32? regionID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_DeleteAllByRegionID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@RegionID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)regionID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Territories
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryDescription", SqlDbType.NChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryDescription?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegionID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_regionID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_territoryID					 = Convert.IsDBNull(command.Parameters["@TerritoryID"].Value) ? null : (string)command.Parameters["@TerritoryID"].Value;
				_territoryDescription					 = Convert.IsDBNull(command.Parameters["@TerritoryDescription"].Value) ? null : (string)command.Parameters["@TerritoryDescription"].Value;
				_regionID					 = Convert.IsDBNull(command.Parameters["@RegionID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegionID"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Territories
		///</Summary>
		///<returns>
		///IList-IDAOTerritories.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IDAOTerritories> SelectAll()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Territories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOTerritories> objList = new List<IDAOTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTerritories retObj = new DAOTerritories();
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						retObj._territoryDescription					 = Convert.IsDBNull(row["TerritoryDescription"]) ? null : (string)row["TerritoryDescription"];
						retObj._regionID					 = Convert.IsDBNull(row["RegionID"]) ? (Int32?)null : (Int32?)row["RegionID"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiTerritories
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprTerritories_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Territories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "TerritoryID", true) == 0) lst.Add(Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"]);
						if (string.Compare(projection.Member, "TerritoryDescription", true) == 0) lst.Add(Convert.IsDBNull(row["TerritoryDescription"]) ? null : (string)row["TerritoryDescription"]);
						if (string.Compare(projection.Member, "RegionID", true) == 0) lst.Add(Convert.IsDBNull(row["RegionID"]) ? (Int32?)null : (Int32?)row["RegionID"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Territories
		///</Summary>
		///<returns>
		///IList-IDAOTerritories.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<IDAOTerritories> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprTerritories_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Territories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOTerritories> objList = new List<IDAOTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOTerritories retObj = new DAOTerritories();
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						retObj._territoryDescription					 = Convert.IsDBNull(row["TerritoryDescription"]) ? null : (string)row["TerritoryDescription"];
						retObj._regionID					 = Convert.IsDBNull(row["RegionID"]) ? (Int32?)null : (Int32?)row["RegionID"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Territories
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprTerritories_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Territories based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprTerritories_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryDescription", SqlDbType.NChar, 50, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryDescription?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RegionID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_regionID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_ctrVersion?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

				_territoryID					 = Convert.IsDBNull(command.Parameters["@TerritoryID"].Value) ? null : (string)command.Parameters["@TerritoryID"].Value;
				_territoryDescription					 = Convert.IsDBNull(command.Parameters["@TerritoryDescription"].Value) ? null : (string)command.Parameters["@TerritoryDescription"].Value;
				_regionID					 = Convert.IsDBNull(command.Parameters["@RegionID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@RegionID"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public string TerritoryID
		{
			get
			{
				return _territoryID;
			}
			set
			{
				_territoryID = value;
			}
		}

		public string TerritoryDescription
		{
			get
			{
				return _territoryDescription;
			}
			set
			{
				_territoryDescription = value;
			}
		}

		public Int32? RegionID
		{
			get
			{
				return _regionID;
			}
			set
			{
				_regionID = value;
			}
		}

		public Int32? CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindRestApi.Data
{
	public partial class InlineProcs
	{
		internal static string ctprTerritories_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[TerritoryID]
			,[TerritoryDescription]
			,[RegionID]
			,[ctr_version]
			FROM [dbo].[Territories]
			WHERE 
			[TerritoryID] = @TerritoryID
			";

		internal static string ctprTerritories_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Territories]
			WHERE 
			[TerritoryID] = @TerritoryID
			";

		internal static string ctprTerritories_SelectAllByRegionID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[TerritoryID]
			,[TerritoryDescription]
			,[RegionID]
			,[ctr_version]
			FROM [dbo].[Territories]
			WHERE 
			[RegionID] = @RegionID OR ([RegionID] IS NULL AND @RegionID IS NULL)
			";

		internal static string ctprTerritories_SelectAllByRegionIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Territories]
			WHERE 
			[RegionID] = @RegionID OR ([RegionID] IS NULL AND @RegionID IS NULL)
			";

		internal static string ctprTerritories_DeleteAllByRegionID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Territories]
			WHERE 
			[RegionID] = @RegionID OR ([RegionID] IS NULL AND @RegionID IS NULL)
			";

		internal static string ctprTerritories_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Territories]
			(
			[TerritoryID]
			,[TerritoryDescription]
			,[RegionID]
			)
			VALUES
			(
			@TerritoryID
			,@TerritoryDescription
			,@RegionID
			)
			SELECT 
			@TerritoryID = [TerritoryID]
			,@TerritoryDescription = [TerritoryDescription]
			,@RegionID = [RegionID]
			,@ctr_version = [ctr_version]
			FROM [dbo].[Territories]
			WHERE 
			[TerritoryID] = @TerritoryID
			";

		internal static string ctprTerritories_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[TerritoryID]
			,[TerritoryDescription]
			,[RegionID]
			,[ctr_version]
			FROM [dbo].[Territories]
			";

		internal static string ctprTerritories_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Territories]
			";

		internal static string ctprTerritories_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Territories]
			##CRITERIA##
			";

		internal static string ctprTerritories_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[TerritoryID]
			,[TerritoryDescription]
			,[RegionID]
			,[ctr_version]
			FROM [dbo].[Territories]
			##CRITERIA##
			";

		internal static string ctprTerritories_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Territories]
			##CRITERIA##
			";

		internal static string ctprTerritories_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			--data optimistic concurrency handling ----------------------------
			DECLARE @currVersion INT
			SELECT @currVersion = [ctr_version] FROM [dbo].[Territories]
			WHERE [TerritoryID] = @TerritoryID
			
			IF @currVersion > @ctr_version
			RAISERROR('data concurrency issue updating this record, possible stale data. %s', 16, 1, 
			'[dbo].[Territories] WHERE WHERE [TerritoryID] = @TerritoryID')
			
			IF @currVersion IS NULL
			RAISERROR('data concurrency issue updating this record, record not available (not found). %s', 16, 1, 
			'[dbo].[Territories] WHERE WHERE [TerritoryID] = @TerritoryID')
			
			SET @ctr_version = @currVersion  + 1 
			-------------------------------------------------------------------
			UPDATE [dbo].[Territories]
			SET
			[TerritoryDescription] = @TerritoryDescription
			,[RegionID] = @RegionID
			,[ctr_version] = @ctr_version
			WHERE 
			[TerritoryID] = @TerritoryID
			SELECT 
			@TerritoryID = [TerritoryID]
			,@TerritoryDescription = [TerritoryDescription]
			,@RegionID = [RegionID]
			,@ctr_version = [ctr_version]
			FROM [dbo].[Territories]
			WHERE 
			[TerritoryID] = @TerritoryID
			";

	}
}
#endregion
