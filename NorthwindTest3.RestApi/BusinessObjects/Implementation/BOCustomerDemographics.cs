/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOCustomerDemographics.
	///It maintains a collection of BOCustomerCustomerDemo objects.
	///</Summary>
	public partial class BOCustomerDemographics : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _customerTypeID;
		protected string _customerDesc;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOCustomerCustomerDemo> _boCustomerCustomerDemoCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOCustomerDemographics()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string customerTypeID
		///</parameters>
		public BOCustomerDemographics(string customerTypeID)
		{
			try
			{
				DAOCustomerDemographics daoCustomerDemographics = DAOCustomerDemographics.SelectOne(customerTypeID);
				_customerTypeID = daoCustomerDemographics.CustomerTypeID;
				_customerDesc = daoCustomerDemographics.CustomerDesc;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOCustomerDemographics
		///</parameters>
		protected internal BOCustomerDemographics(DAOCustomerDemographics daoCustomerDemographics)
		{
			try
			{
				_customerTypeID = daoCustomerDemographics.CustomerTypeID;
				_customerDesc = daoCustomerDemographics.CustomerDesc;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new CustomerDemographics record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOCustomerDemographics daoCustomerDemographics = new DAOCustomerDemographics();
			RegisterDataObject(daoCustomerDemographics);
			BeginTransaction("savenewBOCustomerDemographics");
			try
			{
				daoCustomerDemographics.CustomerTypeID = _customerTypeID;
				daoCustomerDemographics.CustomerDesc = _customerDesc;
				daoCustomerDemographics.Insert();
				CommitTransaction();
				
				_customerTypeID = daoCustomerDemographics.CustomerTypeID;
				_customerDesc = daoCustomerDemographics.CustomerDesc;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOCustomerDemographics");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one CustomerDemographics record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCustomerDemographics
		///</parameters>
		public virtual void Update()
		{
			DAOCustomerDemographics daoCustomerDemographics = new DAOCustomerDemographics();
			RegisterDataObject(daoCustomerDemographics);
			BeginTransaction("updateBOCustomerDemographics");
			try
			{
				daoCustomerDemographics.CustomerTypeID = _customerTypeID;
				daoCustomerDemographics.CustomerDesc = _customerDesc;
				daoCustomerDemographics.Update();
				CommitTransaction();
				
				_customerTypeID = daoCustomerDemographics.CustomerTypeID;
				_customerDesc = daoCustomerDemographics.CustomerDesc;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOCustomerDemographics");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one CustomerDemographics record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOCustomerDemographics daoCustomerDemographics = new DAOCustomerDemographics();
			RegisterDataObject(daoCustomerDemographics);
			BeginTransaction("deleteBOCustomerDemographics");
			try
			{
				daoCustomerDemographics.CustomerTypeID = _customerTypeID;
				daoCustomerDemographics.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOCustomerDemographics");
				throw;
			}
		}
		
		///<Summary>
		///CustomerDemographicsCollection
		///This method returns the collection of BOCustomerDemographics objects
		///</Summary>
		///<returns>
		///List[BOCustomerDemographics]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOCustomerDemographics> CustomerDemographicsCollection()
		{
			try
			{
				IList<BOCustomerDemographics> boCustomerDemographicsCollection = new List<BOCustomerDemographics>();
				IList<DAOCustomerDemographics> daoCustomerDemographicsCollection = DAOCustomerDemographics.SelectAll();
			
				foreach(DAOCustomerDemographics daoCustomerDemographics in daoCustomerDemographicsCollection)
					boCustomerDemographicsCollection.Add(new BOCustomerDemographics(daoCustomerDemographics));
			
				return boCustomerDemographicsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomerDemographicsCollectionCount
		///This method returns the collection count of BOCustomerDemographics objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 CustomerDemographicsCollectionCount()
		{
			try
			{
				Int32 objCount = DAOCustomerDemographics.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///CustomerCustomerDemoCollection
		///This method returns its collection of BOCustomerCustomerDemo objects
		///</Summary>
		///<returns>
		///IList[BOCustomerCustomerDemo]
		///</returns>
		///<parameters>
		///BOCustomerDemographics
		///</parameters>
		public virtual IList<BOCustomerCustomerDemo> CustomerCustomerDemoCollection()
		{
			try
			{
				if(_boCustomerCustomerDemoCollection == null)
					LoadCustomerCustomerDemoCollection();
				
				return _boCustomerCustomerDemoCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOCustomerDemographics>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOCustomerDemographics.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomerDemographicsCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOCustomerDemographics objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boCustomerDemographicsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOCustomerDemographics> daoCustomerDemographicsCollection = DAOCustomerDemographics.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOCustomerDemographics resdaoCustomerDemographics in daoCustomerDemographicsCollection)
					boCustomerDemographicsCollection.Add((T)(object)new BOCustomerDemographics(resdaoCustomerDemographics));
			
				return boCustomerDemographicsCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///CustomerDemographicsCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOCustomerDemographics objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOCustomerDemographics.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadCustomerCustomerDemoCollection
		///This method loads the internal collection of BOCustomerCustomerDemo objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadCustomerCustomerDemoCollection()
		{
			try
			{
				_boCustomerCustomerDemoCollection = new List<BOCustomerCustomerDemo>();
				IList<DAOCustomerCustomerDemo> daoCustomerCustomerDemoCollection = DAOCustomerCustomerDemo.SelectAllByCustomerTypeID(_customerTypeID);
				
				foreach(DAOCustomerCustomerDemo daoCustomerCustomerDemo in daoCustomerCustomerDemoCollection)
					_boCustomerCustomerDemoCollection.Add(new BOCustomerCustomerDemo(daoCustomerCustomerDemo));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddCustomerCustomerDemo
		///This method persists a BOCustomerCustomerDemo object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOCustomerCustomerDemo
		///</parameters>
		public virtual void AddCustomerCustomerDemo(BOCustomerCustomerDemo boCustomerCustomerDemo)
		{
			DAOCustomerCustomerDemo daoCustomerCustomerDemo = new DAOCustomerCustomerDemo();
			RegisterDataObject(daoCustomerCustomerDemo);
			BeginTransaction("addCustomerCustomerDemo");
			try
			{
				daoCustomerCustomerDemo.CustomerID = boCustomerCustomerDemo.CustomerID;
				daoCustomerCustomerDemo.CustomerTypeID = _customerTypeID;
				daoCustomerCustomerDemo.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boCustomerCustomerDemo = new BOCustomerCustomerDemo(daoCustomerCustomerDemo);
				if(_boCustomerCustomerDemoCollection != null)
					_boCustomerCustomerDemoCollection.Add(boCustomerCustomerDemo);
			}
			catch
			{
				RollbackTransaction("addCustomerCustomerDemo");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllCustomerCustomerDemo
		///This method deletes all BOCustomerCustomerDemo objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllCustomerCustomerDemo()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllCustomerCustomerDemo");
			try
			{
				DAOCustomerCustomerDemo.DeleteAllByCustomerTypeID(ConnectionProvider, _customerTypeID);
				CommitTransaction();
				if(_boCustomerCustomerDemoCollection != null)
				{
					_boCustomerCustomerDemoCollection.Clear();
					_boCustomerCustomerDemoCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllCustomerCustomerDemo");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual string CustomerTypeID
		{
			get
			{
				 return _customerTypeID;
			}
			set
			{
				_customerTypeID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerDesc
		{
			get
			{
				 return _customerDesc;
			}
			set
			{
				_customerDesc = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
