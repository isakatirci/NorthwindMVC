/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 12:15:59
**************************************************************/

using System;
using System.Collections.Generic;
using NorthwindClassLibrary.DataObjects;
using NorthwindClassLibrary.BusinessObjects.Interfaces;

namespace NorthwindClassLibrary.BusinessObjects
{
	#region implementation
	public class Expression
	{
		public static ICriterion Eq(string propertyName, params object[] value)
		{
			return (ICriterion)new EqCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion NotEq(string propertyName, params object[] value)
		{
			return (ICriterion)new NotEqCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion Lt(string propertyName, params object[] value)
		{
			return (ICriterion)new LtCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion Lte(string propertyName, params object[] value)
		{
			return (ICriterion)new LteCriterion() { PropertyName = propertyName, PropertyValue = value[0],  Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion Gt(string propertyName, params object[] value)
		{
			return (ICriterion)new GtCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion Gte(string propertyName, params object[] value)
		{
			return (ICriterion)new GteCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion In(string propertyName, params object[] value)
		{
			return (ICriterion)new InCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion InSqlSubQuery(string propertyName, params object[] value)
		{
			return (ICriterion)new InSqlSubQueryCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion InSubQuery(string propertyName, params object[] value)
		{
			return (ICriterion)new InSubQueryCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion Null(string propertyName)
		{
			return (ICriterion)new NullCriterion() { PropertyName = propertyName };
		}

		public static ICriterion NotNull(string propertyName)
		{
			return (ICriterion)new NotNullCriterion() { PropertyName = propertyName};
		}

		public static ICriterion Like(string propertyName, params object[] value)
		{
			return (ICriterion)new LikeCriterion() { PropertyName = propertyName, PropertyValue = value[0], Formatter = value.Length > 1 ? (Func<object, string>)value[1] : null };
		}

		public static ICriterion Or(params object[] value)
		{
			List<ICriterion> lstCriterion = new List<ICriterion>();
			foreach (object obj in value)
				lstCriterion.Add(((ICriteria)obj).Criterion(0));
			return (ICriterion)new OrCriterion() { Restrictions = lstCriterion };
		}

		public static ICriterion Between(string propertyName, params object[] value)
		{
			return (ICriterion)new BetweenCriterion() { PropertyName = propertyName, PropertyValue1 = value[0], PropertyValue2 = value[1], Formatter = value.Length > 2 ? (Func<object, string>)value[2] : null };
		}
	}
	#endregion

}
