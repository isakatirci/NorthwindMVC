/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSalesReports.
	///</Summary>
	public partial class BOSalesReports : zNorthwindConn_BaseBusiness, IBOSalesReports, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _groupBy;
		protected string _display;
		protected string _title;
		protected string _filterRowSource;
		protected string _default;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected ISalesReportsRepository _iSalesReportsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSalesReports()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string groupBy
		///</parameters>
		public void Init(string groupBy)
		{
			try
			{
				IDAOSalesReports daoSalesReports = _iSalesReportsRepository.SelectOne(groupBy);
				_groupBy = daoSalesReports.GroupBy;
				_display = daoSalesReports.Display;
				_title = daoSalesReports.Title;
				_filterRowSource = daoSalesReports.FilterRowSource;
				_default = daoSalesReports.Default;
				_ctrVersion = daoSalesReports.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSalesReports
		///</parameters>
		protected internal BOSalesReports(IDAOSalesReports daoSalesReports)
		{
			try
			{
				_groupBy = daoSalesReports.GroupBy;
				_display = daoSalesReports.Display;
				_title = daoSalesReports.Title;
				_filterRowSource = daoSalesReports.FilterRowSource;
				_default = daoSalesReports.Default;
				_ctrVersion = daoSalesReports.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new SalesReports record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOSalesReports daoSalesReports = _iSalesReportsRepository.New();
			RegisterDataObject( _iSalesReportsRepository, _iSalesReportsRepository.BaseData(daoSalesReports));
			BeginTransaction( _iSalesReportsRepository, "savenewBOSalesReports");
			try
			{
				daoSalesReports.GroupBy = _groupBy;
				daoSalesReports.Display = _display;
				daoSalesReports.Title = _title;
				daoSalesReports.FilterRowSource = _filterRowSource;
				daoSalesReports.Default = _default;
				_iSalesReportsRepository.Insert(daoSalesReports);
				CommitTransaction( _iSalesReportsRepository);
				Done(this);
				
				_groupBy = daoSalesReports.GroupBy;
				_display = daoSalesReports.Display;
				_title = daoSalesReports.Title;
				_filterRowSource = daoSalesReports.FilterRowSource;
				_default = daoSalesReports.Default;
				_ctrVersion = daoSalesReports.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSalesReportsRepository, "savenewBOSalesReports");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one SalesReports record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSalesReports
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOSalesReports daoSalesReports = _iSalesReportsRepository.New();
			RegisterDataObject(_iSalesReportsRepository, _iSalesReportsRepository.BaseData(daoSalesReports));
			BeginTransaction(_iSalesReportsRepository, "updateBOSalesReports");
			try
			{
				daoSalesReports.GroupBy = _groupBy;
				daoSalesReports.Display = _display;
				daoSalesReports.Title = _title;
				daoSalesReports.FilterRowSource = _filterRowSource;
				daoSalesReports.Default = _default;
				daoSalesReports.CtrVersion = _ctrVersion;
				_iSalesReportsRepository.Update(daoSalesReports);
				CommitTransaction(_iSalesReportsRepository);
				Done(this);
				
				_groupBy = daoSalesReports.GroupBy;
				_display = daoSalesReports.Display;
				_title = daoSalesReports.Title;
				_filterRowSource = daoSalesReports.FilterRowSource;
				_default = daoSalesReports.Default;
				_ctrVersion = daoSalesReports.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSalesReportsRepository, "updateBOSalesReports");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one SalesReports record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOSalesReports daoSalesReports = _iSalesReportsRepository.New();
			RegisterDataObject(_iSalesReportsRepository, _iSalesReportsRepository.BaseData(daoSalesReports));
			BeginTransaction(_iSalesReportsRepository, "deleteBOSalesReports");
			try
			{
				daoSalesReports.GroupBy = _groupBy;
				_iSalesReportsRepository.Delete(daoSalesReports);
				CommitTransaction(_iSalesReportsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSalesReportsRepository, "deleteBOSalesReports");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///SalesReportsCollection
		///This method returns the collection of BOSalesReports objects
		///</Summary>
		///<returns>
		///IList[IBOSalesReports]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOSalesReports> SalesReportsCollection(ISalesReportsRepository iSalesReportsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOSalesReports> boSalesReportsCollection = new List<IBOSalesReports>();
				IList<IDAOSalesReports> daoSalesReportsCollection = iSalesReportsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOSalesReports daoSalesReports in daoSalesReportsCollection)
					boSalesReportsCollection.Add(new BOSalesReports(daoSalesReports));
				
				return boSalesReportsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SalesReportsCollectionCount
		///This method returns the collection count of BOSalesReports objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SalesReportsCollectionCount(ISalesReportsRepository iSalesReportsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iSalesReportsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///SalesReportsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOSalesReports>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iSalesReportsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSalesReportsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOSalesReports> daoSalesReportsCollection = _iSalesReportsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOSalesReports resdaoSalesReports in daoSalesReportsCollection)
					boSalesReportsCollection.Add((T)(object)new BOSalesReports(resdaoSalesReports));
				
				return boSalesReportsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOSalesReports objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOSalesReports> boSalesReportsCollection = new List<IBOSalesReports>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iSalesReportsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ISalesReportsRepository SalesReportsRepository
		{
			set
			{
				_iSalesReportsRepository = value;
			}
		}
		
		public virtual string GroupBy
		{
			get
			{
				 return _groupBy;
			}
			set
			{
				_groupBy = value;
				_isDirty = true;
			}
		}
		
		public virtual string Display
		{
			get
			{
				 return _display;
			}
			set
			{
				_display = value;
				_isDirty = true;
			}
		}
		
		public virtual string Title
		{
			get
			{
				 return _title;
			}
			set
			{
				_title = value;
				_isDirty = true;
			}
		}
		
		public virtual string FilterRowSource
		{
			get
			{
				 return _filterRowSource;
			}
			set
			{
				_filterRowSource = value;
				_isDirty = true;
			}
		}
		
		public virtual string Default
		{
			get
			{
				 return _default;
			}
			set
			{
				_default = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iSalesReportsRepository;	}
			set {	SalesReportsRepository = (ISalesReportsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
