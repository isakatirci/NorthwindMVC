/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindTest3.DataObjects.Interfaces;

namespace NorthwindTest3.DataObjects
{
	public partial class DAOProducts : zNorthwindTest3Conn_BaseData
	{
		#region member variables
		protected Int32? _productID;
		protected string _productName;
		protected Int32? _supplierID;
		protected Int32? _categoryID;
		protected string _quantityPerUnit;
		protected decimal? _unitPrice;
		protected Int16? _unitsInStock;
		protected Int16? _unitsOnOrder;
		protected Int16? _reorderLevel;
		protected bool? _discontinued;
		#endregion

		#region class methods
		public DAOProducts()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Products based on the primary key(s)
		///</Summary>
		///<returns>
		///DAOProducts
		///</returns>
		///<parameters>
		///Int32? productID
		///</parameters>
		public static DAOProducts SelectOne(Int32? productID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Products");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)productID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				DAOProducts retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOProducts();
					retObj._productID					 = Convert.IsDBNull(dt.Rows[0]["ProductID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ProductID"];
					retObj._productName					 = Convert.IsDBNull(dt.Rows[0]["ProductName"]) ? null : (string)dt.Rows[0]["ProductName"];
					retObj._supplierID					 = Convert.IsDBNull(dt.Rows[0]["SupplierID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["SupplierID"];
					retObj._categoryID					 = Convert.IsDBNull(dt.Rows[0]["CategoryID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["CategoryID"];
					retObj._quantityPerUnit					 = Convert.IsDBNull(dt.Rows[0]["QuantityPerUnit"]) ? null : (string)dt.Rows[0]["QuantityPerUnit"];
					retObj._unitPrice					 = Convert.IsDBNull(dt.Rows[0]["UnitPrice"]) ? (decimal?)null : (decimal?)dt.Rows[0]["UnitPrice"];
					retObj._unitsInStock					 = Convert.IsDBNull(dt.Rows[0]["UnitsInStock"]) ? (Int16?)null : (Int16?)dt.Rows[0]["UnitsInStock"];
					retObj._unitsOnOrder					 = Convert.IsDBNull(dt.Rows[0]["UnitsOnOrder"]) ? (Int16?)null : (Int16?)dt.Rows[0]["UnitsOnOrder"];
					retObj._reorderLevel					 = Convert.IsDBNull(dt.Rows[0]["ReorderLevel"]) ? (Int16?)null : (Int16?)dt.Rows[0]["ReorderLevel"];
					retObj._discontinued					 = Convert.IsDBNull(dt.Rows[0]["Discontinued"]) ? (bool?)null : (bool?)dt.Rows[0]["Discontinued"];
				}
				return retObj;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Products based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_productID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Products based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOProducts.
		///</returns>
		///<parameters>
		///Int32? supplierID
		///</parameters>
		public static IList<DAOProducts> SelectAllBySupplierID(Int32? supplierID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectAllBySupplierID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Products");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupplierID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supplierID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOProducts> objList = new List<DAOProducts>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOProducts retObj = new DAOProducts();
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._productName					 = Convert.IsDBNull(row["ProductName"]) ? null : (string)row["ProductName"];
						retObj._supplierID					 = Convert.IsDBNull(row["SupplierID"]) ? (Int32?)null : (Int32?)row["SupplierID"];
						retObj._categoryID					 = Convert.IsDBNull(row["CategoryID"]) ? (Int32?)null : (Int32?)row["CategoryID"];
						retObj._quantityPerUnit					 = Convert.IsDBNull(row["QuantityPerUnit"]) ? null : (string)row["QuantityPerUnit"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._unitsInStock					 = Convert.IsDBNull(row["UnitsInStock"]) ? (Int16?)null : (Int16?)row["UnitsInStock"];
						retObj._unitsOnOrder					 = Convert.IsDBNull(row["UnitsOnOrder"]) ? (Int16?)null : (Int16?)row["UnitsOnOrder"];
						retObj._reorderLevel					 = Convert.IsDBNull(row["ReorderLevel"]) ? (Int16?)null : (Int16?)row["ReorderLevel"];
						retObj._discontinued					 = Convert.IsDBNull(row["Discontinued"]) ? (bool?)null : (bool?)row["Discontinued"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? supplierID
		///</parameters>
		public static Int32 SelectAllBySupplierIDCount(Int32? supplierID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectAllBySupplierIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupplierID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supplierID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Products with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? supplierID
		///</parameters>
		public static void DeleteAllBySupplierID(zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? supplierID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_DeleteAllBySupplierID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@SupplierID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)supplierID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Products based on a foreign key
		///</Summary>
		///<returns>
		///IList-DAOProducts.
		///</returns>
		///<parameters>
		///Int32? categoryID
		///</parameters>
		public static IList<DAOProducts> SelectAllByCategoryID(Int32? categoryID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectAllByCategoryID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Products");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CategoryID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)categoryID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOProducts> objList = new List<DAOProducts>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOProducts retObj = new DAOProducts();
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._productName					 = Convert.IsDBNull(row["ProductName"]) ? null : (string)row["ProductName"];
						retObj._supplierID					 = Convert.IsDBNull(row["SupplierID"]) ? (Int32?)null : (Int32?)row["SupplierID"];
						retObj._categoryID					 = Convert.IsDBNull(row["CategoryID"]) ? (Int32?)null : (Int32?)row["CategoryID"];
						retObj._quantityPerUnit					 = Convert.IsDBNull(row["QuantityPerUnit"]) ? null : (string)row["QuantityPerUnit"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._unitsInStock					 = Convert.IsDBNull(row["UnitsInStock"]) ? (Int16?)null : (Int16?)row["UnitsInStock"];
						retObj._unitsOnOrder					 = Convert.IsDBNull(row["UnitsOnOrder"]) ? (Int16?)null : (Int16?)row["UnitsOnOrder"];
						retObj._reorderLevel					 = Convert.IsDBNull(row["ReorderLevel"]) ? (Int16?)null : (Int16?)row["ReorderLevel"];
						retObj._discontinued					 = Convert.IsDBNull(row["Discontinued"]) ? (bool?)null : (bool?)row["Discontinued"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? categoryID
		///</parameters>
		public static Int32 SelectAllByCategoryIDCount(Int32? categoryID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectAllByCategoryIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CategoryID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)categoryID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Products with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? categoryID
		///</parameters>
		public static void DeleteAllByCategoryID(zNorthwindTest3Conn_TxConnectionProvider connectionProvider, Int32? categoryID)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_DeleteAllByCategoryID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CategoryID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)categoryID?? (object)DBNull.Value));

				command.ExecuteNonQuery();

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Products
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _productID));
				command.Parameters.Add(CtSqlParameter.Get("@ProductName", SqlDbType.NVarChar, 40, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_productName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupplierID", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_supplierID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CategoryID", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_categoryID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@QuantityPerUnit", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_quantityPerUnit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitPrice", SqlDbType.Money, 8, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, (object)_unitPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitsInStock", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, (object)_unitsInStock?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitsOnOrder", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, (object)_unitsOnOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReorderLevel", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, (object)_reorderLevel?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discontinued", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_discontinued?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_productID					 = Convert.IsDBNull(command.Parameters["@ProductID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ProductID"].Value;
				_productName					 = Convert.IsDBNull(command.Parameters["@ProductName"].Value) ? null : (string)command.Parameters["@ProductName"].Value;
				_supplierID					 = Convert.IsDBNull(command.Parameters["@SupplierID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SupplierID"].Value;
				_categoryID					 = Convert.IsDBNull(command.Parameters["@CategoryID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CategoryID"].Value;
				_quantityPerUnit					 = Convert.IsDBNull(command.Parameters["@QuantityPerUnit"].Value) ? null : (string)command.Parameters["@QuantityPerUnit"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["@UnitPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@UnitPrice"].Value;
				_unitsInStock					 = Convert.IsDBNull(command.Parameters["@UnitsInStock"].Value) ? (Int16?)null : (Int16?)command.Parameters["@UnitsInStock"].Value;
				_unitsOnOrder					 = Convert.IsDBNull(command.Parameters["@UnitsOnOrder"].Value) ? (Int16?)null : (Int16?)command.Parameters["@UnitsOnOrder"].Value;
				_reorderLevel					 = Convert.IsDBNull(command.Parameters["@ReorderLevel"].Value) ? (Int16?)null : (Int16?)command.Parameters["@ReorderLevel"].Value;
				_discontinued					 = Convert.IsDBNull(command.Parameters["@Discontinued"].Value) ? (bool?)null : (bool?)command.Parameters["@Discontinued"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Products
		///</Summary>
		///<returns>
		///IList-DAOProducts.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<DAOProducts> SelectAll()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Products");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOProducts> objList = new List<DAOProducts>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOProducts retObj = new DAOProducts();
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._productName					 = Convert.IsDBNull(row["ProductName"]) ? null : (string)row["ProductName"];
						retObj._supplierID					 = Convert.IsDBNull(row["SupplierID"]) ? (Int32?)null : (Int32?)row["SupplierID"];
						retObj._categoryID					 = Convert.IsDBNull(row["CategoryID"]) ? (Int32?)null : (Int32?)row["CategoryID"];
						retObj._quantityPerUnit					 = Convert.IsDBNull(row["QuantityPerUnit"]) ? null : (string)row["QuantityPerUnit"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._unitsInStock					 = Convert.IsDBNull(row["UnitsInStock"]) ? (Int16?)null : (Int16?)row["UnitsInStock"];
						retObj._unitsOnOrder					 = Convert.IsDBNull(row["UnitsOnOrder"]) ? (Int16?)null : (Int16?)row["UnitsOnOrder"];
						retObj._reorderLevel					 = Convert.IsDBNull(row["ReorderLevel"]) ? (Int16?)null : (Int16?)row["ReorderLevel"];
						retObj._discontinued					 = Convert.IsDBNull(row["Discontinued"]) ? (bool?)null : (bool?)row["Discontinued"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiProducts
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprProducts_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Products");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "ProductID", true) == 0) lst.Add(Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"]);
						if (string.Compare(projection.Member, "ProductName", true) == 0) lst.Add(Convert.IsDBNull(row["ProductName"]) ? null : (string)row["ProductName"]);
						if (string.Compare(projection.Member, "SupplierID", true) == 0) lst.Add(Convert.IsDBNull(row["SupplierID"]) ? (Int32?)null : (Int32?)row["SupplierID"]);
						if (string.Compare(projection.Member, "CategoryID", true) == 0) lst.Add(Convert.IsDBNull(row["CategoryID"]) ? (Int32?)null : (Int32?)row["CategoryID"]);
						if (string.Compare(projection.Member, "QuantityPerUnit", true) == 0) lst.Add(Convert.IsDBNull(row["QuantityPerUnit"]) ? null : (string)row["QuantityPerUnit"]);
						if (string.Compare(projection.Member, "UnitPrice", true) == 0) lst.Add(Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"]);
						if (string.Compare(projection.Member, "UnitsInStock", true) == 0) lst.Add(Convert.IsDBNull(row["UnitsInStock"]) ? (Int16?)null : (Int16?)row["UnitsInStock"]);
						if (string.Compare(projection.Member, "UnitsOnOrder", true) == 0) lst.Add(Convert.IsDBNull(row["UnitsOnOrder"]) ? (Int16?)null : (Int16?)row["UnitsOnOrder"]);
						if (string.Compare(projection.Member, "ReorderLevel", true) == 0) lst.Add(Convert.IsDBNull(row["ReorderLevel"]) ? (Int16?)null : (Int16?)row["ReorderLevel"]);
						if (string.Compare(projection.Member, "Discontinued", true) == 0) lst.Add(Convert.IsDBNull(row["Discontinued"]) ? (bool?)null : (bool?)row["Discontinued"]);
					}
				}
				return dict;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Products
		///</Summary>
		///<returns>
		///IList-DAOProducts.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<DAOProducts> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprProducts_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Products");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);

				List<DAOProducts> objList = new List<DAOProducts>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOProducts retObj = new DAOProducts();
						retObj._productID					 = Convert.IsDBNull(row["ProductID"]) ? (Int32?)null : (Int32?)row["ProductID"];
						retObj._productName					 = Convert.IsDBNull(row["ProductName"]) ? null : (string)row["ProductName"];
						retObj._supplierID					 = Convert.IsDBNull(row["SupplierID"]) ? (Int32?)null : (Int32?)row["SupplierID"];
						retObj._categoryID					 = Convert.IsDBNull(row["CategoryID"]) ? (Int32?)null : (Int32?)row["CategoryID"];
						retObj._quantityPerUnit					 = Convert.IsDBNull(row["QuantityPerUnit"]) ? null : (string)row["QuantityPerUnit"];
						retObj._unitPrice					 = Convert.IsDBNull(row["UnitPrice"]) ? (decimal?)null : (decimal?)row["UnitPrice"];
						retObj._unitsInStock					 = Convert.IsDBNull(row["UnitsInStock"]) ? (Int16?)null : (Int16?)row["UnitsInStock"];
						retObj._unitsOnOrder					 = Convert.IsDBNull(row["UnitsOnOrder"]) ? (Int16?)null : (Int16?)row["UnitsOnOrder"];
						retObj._reorderLevel					 = Convert.IsDBNull(row["ReorderLevel"]) ? (Int16?)null : (Int16?)row["ReorderLevel"];
						retObj._discontinued					 = Convert.IsDBNull(row["Discontinued"]) ? (bool?)null : (bool?)row["Discontinued"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Products
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprProducts_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();

				return retCount;
			}
			catch
			{
				throw;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Products based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprProducts_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ProductID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_productID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ProductName", SqlDbType.NVarChar, 40, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_productName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SupplierID", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_supplierID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CategoryID", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_categoryID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@QuantityPerUnit", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_quantityPerUnit?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitPrice", SqlDbType.Money, 8, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, (object)_unitPrice?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitsInStock", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, (object)_unitsInStock?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@UnitsOnOrder", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, (object)_unitsOnOrder?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReorderLevel", SqlDbType.SmallInt, 2, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, (object)_reorderLevel?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Discontinued", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_discontinued?? (object)DBNull.Value));

				command.ExecuteNonQuery();

				_productID					 = Convert.IsDBNull(command.Parameters["@ProductID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ProductID"].Value;
				_productName					 = Convert.IsDBNull(command.Parameters["@ProductName"].Value) ? null : (string)command.Parameters["@ProductName"].Value;
				_supplierID					 = Convert.IsDBNull(command.Parameters["@SupplierID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@SupplierID"].Value;
				_categoryID					 = Convert.IsDBNull(command.Parameters["@CategoryID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@CategoryID"].Value;
				_quantityPerUnit					 = Convert.IsDBNull(command.Parameters["@QuantityPerUnit"].Value) ? null : (string)command.Parameters["@QuantityPerUnit"].Value;
				_unitPrice					 = Convert.IsDBNull(command.Parameters["@UnitPrice"].Value) ? (decimal?)null : (decimal?)command.Parameters["@UnitPrice"].Value;
				_unitsInStock					 = Convert.IsDBNull(command.Parameters["@UnitsInStock"].Value) ? (Int16?)null : (Int16?)command.Parameters["@UnitsInStock"].Value;
				_unitsOnOrder					 = Convert.IsDBNull(command.Parameters["@UnitsOnOrder"].Value) ? (Int16?)null : (Int16?)command.Parameters["@UnitsOnOrder"].Value;
				_reorderLevel					 = Convert.IsDBNull(command.Parameters["@ReorderLevel"].Value) ? (Int16?)null : (Int16?)command.Parameters["@ReorderLevel"].Value;
				_discontinued					 = Convert.IsDBNull(command.Parameters["@Discontinued"].Value) ? (bool?)null : (bool?)command.Parameters["@Discontinued"].Value;

			}
			catch
			{
				throw;
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? ProductID
		{
			get
			{
				return _productID;
			}
			set
			{
				_productID = value;
			}
		}

		public string ProductName
		{
			get
			{
				return _productName;
			}
			set
			{
				_productName = value;
			}
		}

		public Int32? SupplierID
		{
			get
			{
				return _supplierID;
			}
			set
			{
				_supplierID = value;
			}
		}

		public Int32? CategoryID
		{
			get
			{
				return _categoryID;
			}
			set
			{
				_categoryID = value;
			}
		}

		public string QuantityPerUnit
		{
			get
			{
				return _quantityPerUnit;
			}
			set
			{
				_quantityPerUnit = value;
			}
		}

		public decimal? UnitPrice
		{
			get
			{
				return _unitPrice;
			}
			set
			{
				_unitPrice = value;
			}
		}

		public Int16? UnitsInStock
		{
			get
			{
				return _unitsInStock;
			}
			set
			{
				_unitsInStock = value;
			}
		}

		public Int16? UnitsOnOrder
		{
			get
			{
				return _unitsOnOrder;
			}
			set
			{
				_unitsOnOrder = value;
			}
		}

		public Int16? ReorderLevel
		{
			get
			{
				return _reorderLevel;
			}
			set
			{
				_reorderLevel = value;
			}
		}

		public bool? Discontinued
		{
			get
			{
				return _discontinued;
			}
			set
			{
				_discontinued = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindTest3.DataObjects
{
	public partial class InlineProcs
	{
		internal static string ctprProducts_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[ProductID]
			,[ProductName]
			,[SupplierID]
			,[CategoryID]
			,[QuantityPerUnit]
			,[UnitPrice]
			,[UnitsInStock]
			,[UnitsOnOrder]
			,[ReorderLevel]
			,[Discontinued]
			FROM [dbo].[Products]
			WHERE 
			[ProductID] = @ProductID
			";

		internal static string ctprProducts_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Products]
			WHERE 
			[ProductID] = @ProductID
			";

		internal static string ctprProducts_SelectAllBySupplierID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ProductID]
			,[ProductName]
			,[SupplierID]
			,[CategoryID]
			,[QuantityPerUnit]
			,[UnitPrice]
			,[UnitsInStock]
			,[UnitsOnOrder]
			,[ReorderLevel]
			,[Discontinued]
			FROM [dbo].[Products]
			WHERE 
			[SupplierID] = @SupplierID OR ([SupplierID] IS NULL AND @SupplierID IS NULL)
			";

		internal static string ctprProducts_SelectAllBySupplierIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Products]
			WHERE 
			[SupplierID] = @SupplierID OR ([SupplierID] IS NULL AND @SupplierID IS NULL)
			";

		internal static string ctprProducts_DeleteAllBySupplierID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Products]
			WHERE 
			[SupplierID] = @SupplierID OR ([SupplierID] IS NULL AND @SupplierID IS NULL)
			";

		internal static string ctprProducts_SelectAllByCategoryID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[ProductID]
			,[ProductName]
			,[SupplierID]
			,[CategoryID]
			,[QuantityPerUnit]
			,[UnitPrice]
			,[UnitsInStock]
			,[UnitsOnOrder]
			,[ReorderLevel]
			,[Discontinued]
			FROM [dbo].[Products]
			WHERE 
			[CategoryID] = @CategoryID OR ([CategoryID] IS NULL AND @CategoryID IS NULL)
			";

		internal static string ctprProducts_SelectAllByCategoryIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Products]
			WHERE 
			[CategoryID] = @CategoryID OR ([CategoryID] IS NULL AND @CategoryID IS NULL)
			";

		internal static string ctprProducts_DeleteAllByCategoryID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Products]
			WHERE 
			[CategoryID] = @CategoryID OR ([CategoryID] IS NULL AND @CategoryID IS NULL)
			";

		internal static string ctprProducts_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Products]
			(
			[ProductName]
			,[SupplierID]
			,[CategoryID]
			,[QuantityPerUnit]
			,[UnitPrice]
			,[UnitsInStock]
			,[UnitsOnOrder]
			,[ReorderLevel]
			,[Discontinued]
			)
			VALUES
			(
			@ProductName
			,@SupplierID
			,@CategoryID
			,@QuantityPerUnit
			,@UnitPrice
			,@UnitsInStock
			,@UnitsOnOrder
			,@ReorderLevel
			,@Discontinued
			)
			SELECT 
			@ProductID = [ProductID]
			,@ProductName = [ProductName]
			,@SupplierID = [SupplierID]
			,@CategoryID = [CategoryID]
			,@QuantityPerUnit = [QuantityPerUnit]
			,@UnitPrice = [UnitPrice]
			,@UnitsInStock = [UnitsInStock]
			,@UnitsOnOrder = [UnitsOnOrder]
			,@ReorderLevel = [ReorderLevel]
			,@Discontinued = [Discontinued]
			FROM [dbo].[Products]
			WHERE 
			[ProductID] = SCOPE_IDENTITY()
			";

		internal static string ctprProducts_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[ProductID]
			,[ProductName]
			,[SupplierID]
			,[CategoryID]
			,[QuantityPerUnit]
			,[UnitPrice]
			,[UnitsInStock]
			,[UnitsOnOrder]
			,[ReorderLevel]
			,[Discontinued]
			FROM [dbo].[Products]
			";

		internal static string ctprProducts_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Products]
			";

		internal static string ctprProducts_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Products]
			##CRITERIA##
			";

		internal static string ctprProducts_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[ProductID]
			,[ProductName]
			,[SupplierID]
			,[CategoryID]
			,[QuantityPerUnit]
			,[UnitPrice]
			,[UnitsInStock]
			,[UnitsOnOrder]
			,[ReorderLevel]
			,[Discontinued]
			FROM [dbo].[Products]
			##CRITERIA##
			";

		internal static string ctprProducts_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Products]
			##CRITERIA##
			";

		internal static string ctprProducts_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			UPDATE [dbo].[Products]
			SET
			[ProductName] = @ProductName
			,[SupplierID] = @SupplierID
			,[CategoryID] = @CategoryID
			,[QuantityPerUnit] = @QuantityPerUnit
			,[UnitPrice] = @UnitPrice
			,[UnitsInStock] = @UnitsInStock
			,[UnitsOnOrder] = @UnitsOnOrder
			,[ReorderLevel] = @ReorderLevel
			,[Discontinued] = @Discontinued
			WHERE 
			[ProductID] = @ProductID
			SELECT 
			@ProductID = [ProductID]
			,@ProductName = [ProductName]
			,@SupplierID = [SupplierID]
			,@CategoryID = [CategoryID]
			,@QuantityPerUnit = [QuantityPerUnit]
			,@UnitPrice = [UnitPrice]
			,@UnitsInStock = [UnitsInStock]
			,@UnitsOnOrder = [UnitsOnOrder]
			,@ReorderLevel = [ReorderLevel]
			,@Discontinued = [Discontinued]
			FROM [dbo].[Products]
			WHERE 
			[ProductID] = @ProductID
			";

	}
}
#endregion
