/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOStrings.
	///</Summary>
	public partial class BOStrings : zNorthwindConn_BaseBusiness, IBOStrings, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _stringİd;
		protected string _stringData;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IStringsRepository _iStringsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOStrings()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string stringİd
		///</parameters>
		public void Init(string stringİd)
		{
			try
			{
				IDAOStrings daoStrings = _iStringsRepository.SelectOne(stringİd);
				_stringİd = daoStrings.Stringİd;
				_stringData = daoStrings.StringData;
				_ctrVersion = daoStrings.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOStrings
		///</parameters>
		protected internal BOStrings(IDAOStrings daoStrings)
		{
			try
			{
				_stringİd = daoStrings.Stringİd;
				_stringData = daoStrings.StringData;
				_ctrVersion = daoStrings.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Strings record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOStrings daoStrings = _iStringsRepository.New();
			RegisterDataObject( _iStringsRepository, _iStringsRepository.BaseData(daoStrings));
			BeginTransaction( _iStringsRepository, "savenewBOStrings");
			try
			{
				daoStrings.StringData = _stringData;
				_iStringsRepository.Insert(daoStrings);
				CommitTransaction( _iStringsRepository);
				Done(this);
				
				_stringİd = daoStrings.Stringİd;
				_stringData = daoStrings.StringData;
				_ctrVersion = daoStrings.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iStringsRepository, "savenewBOStrings");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Strings record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOStrings
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOStrings daoStrings = _iStringsRepository.New();
			RegisterDataObject(_iStringsRepository, _iStringsRepository.BaseData(daoStrings));
			BeginTransaction(_iStringsRepository, "updateBOStrings");
			try
			{
				daoStrings.Stringİd = _stringİd;
				daoStrings.StringData = _stringData;
				daoStrings.CtrVersion = _ctrVersion;
				_iStringsRepository.Update(daoStrings);
				CommitTransaction(_iStringsRepository);
				Done(this);
				
				_stringİd = daoStrings.Stringİd;
				_stringData = daoStrings.StringData;
				_ctrVersion = daoStrings.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iStringsRepository, "updateBOStrings");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Strings record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOStrings daoStrings = _iStringsRepository.New();
			RegisterDataObject(_iStringsRepository, _iStringsRepository.BaseData(daoStrings));
			BeginTransaction(_iStringsRepository, "deleteBOStrings");
			try
			{
				daoStrings.Stringİd = _stringİd;
				_iStringsRepository.Delete(daoStrings);
				CommitTransaction(_iStringsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iStringsRepository, "deleteBOStrings");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///StringsCollection
		///This method returns the collection of BOStrings objects
		///</Summary>
		///<returns>
		///IList[IBOStrings]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOStrings> StringsCollection(IStringsRepository iStringsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOStrings> boStringsCollection = new List<IBOStrings>();
				IList<IDAOStrings> daoStringsCollection = iStringsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOStrings daoStrings in daoStringsCollection)
					boStringsCollection.Add(new BOStrings(daoStrings));
				
				return boStringsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///StringsCollectionCount
		///This method returns the collection count of BOStrings objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 StringsCollectionCount(IStringsRepository iStringsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iStringsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///StringsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOStrings>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iStringsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boStringsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOStrings> daoStringsCollection = _iStringsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOStrings resdaoStrings in daoStringsCollection)
					boStringsCollection.Add((T)(object)new BOStrings(resdaoStrings));
				
				return boStringsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOStrings objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOStrings> boStringsCollection = new List<IBOStrings>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iStringsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IStringsRepository StringsRepository
		{
			set
			{
				_iStringsRepository = value;
			}
		}
		
		public virtual string Stringİd
		{
			get
			{
				 return _stringİd;
			}
			set
			{
				_stringİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string StringData
		{
			get
			{
				 return _stringData;
			}
			set
			{
				_stringData = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iStringsRepository;	}
			set {	StringsRepository = (IStringsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
