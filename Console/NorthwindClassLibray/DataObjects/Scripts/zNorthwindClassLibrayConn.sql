USE `northwind`;
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
/*schema entity update to support concurrency management*/
DROP PROCEDURE IF EXISTS `northwind`.`ctpr__versioning_schema`;
DELIMITER $$

CREATE PROCEDURE `northwind`.`ctpr__versioning_schema`
(
P_TABLE_SCHEMA varchar(45)
,P_TABLE_NAME varchar(45)
)

BEGIN
IF NOT EXISTS (SELECT * FROM INFORMATION_SCHEMA.COLUMNS cs
WHERE cs.TABLE_SCHEMA = P_TABLE_SCHEMA AND cs.TABLE_NAME = P_TABLE_NAME
AND cs.COLUMN_NAME = 'ctr_version') then

SET @schemaChangeSql = CONCAT('ALTER TABLE ', P_TABLE_NAME, ' ADD COLUMN ctr_version smallint(5) NOT NULL DEFAULT 0'); 
PREPARE sqlCommand FROM @schemaChangeSql;
EXECUTE sqlCommand;
END IF;
END $$
DELIMITER ;

-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'products');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`supplier_ids`
,`id`
,`product_code`
,`product_name`
,`description`
,`standard_cost`
,`list_price`
,`reorder_level`
,`target_level`
,`quantity_per_unit`
,`discontinued`
,`minimum_reorder_quantity`
,`category`
,`attachments`
,`ctr_version`
FROM `northwind`.`products`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_deleteone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`products`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_insertone`
(
IN P_SUPPLIER_IDS longtext
, IN P_DESCRIPTION longtext
, OUT P_ID int(11)
, INOUT P_PRODUCT_CODE varchar(25)
, INOUT P_PRODUCT_NAME varchar(50)
, INOUT P_STANDARD_COST decimal(19,4)
, INOUT P_LIST_PRICE decimal(19,4)
, INOUT P_REORDER_LEVEL int(11)
, INOUT P_TARGET_LEVEL int(11)
, INOUT P_QUANTITY_PER_UNIT varchar(50)
, INOUT P_DISCONTINUED tinyint(1)
, INOUT P_MINIMUM_REORDER_QUANTITY int(11)
, INOUT P_CATEGORY varchar(50)
, INOUT P_ATTACHMENTS longblob
, OUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- inserts a new row into the table
INSERT `northwind`.`products`
(
`supplier_ids`
,`product_code`
,`product_name`
,`description`
,`standard_cost`
,`list_price`
,`reorder_level`
,`target_level`
,`quantity_per_unit`
,`discontinued`
,`minimum_reorder_quantity`
,`category`
,`attachments`
)
VALUES
(
P_SUPPLIER_IDS
,P_PRODUCT_CODE
,P_PRODUCT_NAME
,P_DESCRIPTION
,P_STANDARD_COST
,P_LIST_PRICE
,P_REORDER_LEVEL
,P_TARGET_LEVEL
,P_QUANTITY_PER_UNIT
,P_DISCONTINUED
,P_MINIMUM_REORDER_QUANTITY
,P_CATEGORY
,P_ATTACHMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,product_code
,product_name
,standard_cost
,list_price
,reorder_level
,target_level
,quantity_per_unit
,discontinued
,minimum_reorder_quantity
,category
,attachments
,ctr_version
INTO 
P_ID
,P_PRODUCT_CODE
,P_PRODUCT_NAME
,P_STANDARD_COST
,P_LIST_PRICE
,P_REORDER_LEVEL
,P_TARGET_LEVEL
,P_QUANTITY_PER_UNIT
,P_DISCONTINUED
,P_MINIMUM_REORDER_QUANTITY
,P_CATEGORY
,P_ATTACHMENTS
,P_CTR_VERSION
FROM `northwind`.`products`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`supplier_ids`
,`id`
,`product_code`
,`product_name`
,`description`
,`standard_cost`
,`list_price`
,`reorder_level`
,`target_level`
,`quantity_per_unit`
,`discontinued`
,`minimum_reorder_quantity`
,`category`
,`attachments`
,`ctr_version`
FROM `northwind`.`products`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`products`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getbyprojection`
(
IN P_FIELDSFIELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FIELDSFIELD, ' FROM `northwind`.`products`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`supplier_ids`,
`id`,
`product_code`,
`product_name`,
`description`,
`standard_cost`,
`list_price`,
`reorder_level`,
`target_level`,
`quantity_per_unit`,
`discontinued`,
`minimum_reorder_quantity`,
`category`,
`attachments`,
`ctr_version`
FROM `northwind`.`products`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`products`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_products_updateone`
(
IN P_SUPPLIER_IDS longtext
, IN P_DESCRIPTION longtext
, INOUT P_ID int(11)
, INOUT P_PRODUCT_CODE varchar(25)
, INOUT P_PRODUCT_NAME varchar(50)
, INOUT P_STANDARD_COST decimal(19,4)
, INOUT P_LIST_PRICE decimal(19,4)
, INOUT P_REORDER_LEVEL int(11)
, INOUT P_TARGET_LEVEL int(11)
, INOUT P_QUANTITY_PER_UNIT varchar(50)
, INOUT P_DISCONTINUED tinyint(1)
, INOUT P_MINIMUM_REORDER_QUANTITY int(11)
, INOUT P_CATEGORY varchar(50)
, INOUT P_ATTACHMENTS longblob
, INOUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`products`
WHERE `id` = P_ID
;

IF _currVersion > P_CTR_VERSION THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`products` WHERE WHERE `id` = P_ID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`products` WHERE WHERE `id` = P_ID');

END IF;
SET P_CTR_VERSION := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`products`
SET
`supplier_ids` = P_SUPPLIER_IDS
,`product_code` = P_PRODUCT_CODE
,`product_name` = P_PRODUCT_NAME
,`description` = P_DESCRIPTION
,`standard_cost` = P_STANDARD_COST
,`list_price` = P_LIST_PRICE
,`reorder_level` = P_REORDER_LEVEL
,`target_level` = P_TARGET_LEVEL
,`quantity_per_unit` = P_QUANTITY_PER_UNIT
,`discontinued` = P_DISCONTINUED
,`minimum_reorder_quantity` = P_MINIMUM_REORDER_QUANTITY
,`category` = P_CATEGORY
,`attachments` = P_ATTACHMENTS
,`ctr_version` = P_CTR_VERSION
WHERE 
id = P_ID
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,product_code
,product_name
,standard_cost
,list_price
,reorder_level
,target_level
,quantity_per_unit
,discontinued
,minimum_reorder_quantity
,category
,attachments
,ctr_version
INTO 
P_ID
,P_PRODUCT_CODE
,P_PRODUCT_NAME
,P_STANDARD_COST
,P_LIST_PRICE
,P_REORDER_LEVEL
,P_TARGET_LEVEL
,P_QUANTITY_PER_UNIT
,P_DISCONTINUED
,P_MINIMUM_REORDER_QUANTITY
,P_CATEGORY
,P_ATTACHMENTS
,P_CTR_VERSION
FROM `northwind`.`products`
WHERE id = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'inventory_transactions');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deleteone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbytransactiontype`
(
IN P_TRANSACTION_TYPE tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`transaction_type` = P_TRANSACTION_TYPE OR (`transaction_type` IS NULL AND P_TRANSACTION_TYPE IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbytransactiontypecount`
(
IN P_TRANSACTION_TYPE tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`transaction_type` = P_TRANSACTION_TYPE OR (`transaction_type` IS NULL AND P_TRANSACTION_TYPE IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebytransactiontype`
(
IN P_TRANSACTION_TYPE tinyint(4)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`transaction_type` = P_TRANSACTION_TYPE OR (`transaction_type` IS NULL AND P_TRANSACTION_TYPE IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbyproductid`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbyproductidcount`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebyproductid`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbypurchaseorderid`
(
IN P_PURCHASE_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_ID OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbypurchaseorderidcount`
(
IN P_PURCHASE_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_ID OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebypurchaseorderid`
(
IN P_PURCHASE_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_ID OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycustomerorderid`
(
IN P_CUSTOMER_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
WHERE 
`customer_order_id` = P_CUSTOMER_ORDER_ID OR (`customer_order_id` IS NULL AND P_CUSTOMER_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycustomerorderidcount`
(
IN P_CUSTOMER_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
WHERE 
`customer_order_id` = P_CUSTOMER_ORDER_ID OR (`customer_order_id` IS NULL AND P_CUSTOMER_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_deletebycustomerorderid`
(
IN P_CUSTOMER_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`inventory_transactions`
WHERE 
`customer_order_id` = P_CUSTOMER_ORDER_ID OR (`customer_order_id` IS NULL AND P_CUSTOMER_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_insertone`
(
OUT P_ID int(11)
, INOUT P_TRANSACTION_TYPE tinyint(4)
, INOUT P_TRANSACTION_CREATED_DATE datetime
, INOUT P_TRANSACTION_MODIFIED_DATE datetime
, INOUT P_PRODUCT_ID int(11)
, INOUT P_QUANTITY int(11)
, INOUT P_PURCHASE_ORDER_ID int(11)
, INOUT P_CUSTOMER_ORDER_ID int(11)
, INOUT P_COMMENTS varchar(255)
, OUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- inserts a new row into the table
INSERT `northwind`.`inventory_transactions`
(
`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
)
VALUES
(
P_TRANSACTION_TYPE
,P_TRANSACTION_CREATED_DATE
,P_TRANSACTION_MODIFIED_DATE
,P_PRODUCT_ID
,P_QUANTITY
,P_PURCHASE_ORDER_ID
,P_CUSTOMER_ORDER_ID
,P_COMMENTS
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,transaction_type
,transaction_created_date
,transaction_modified_date
,product_id
,quantity
,purchase_order_id
,customer_order_id
,comments
,ctr_version
INTO 
P_ID
,P_TRANSACTION_TYPE
,P_TRANSACTION_CREATED_DATE
,P_TRANSACTION_MODIFIED_DATE
,P_PRODUCT_ID
,P_QUANTITY
,P_PURCHASE_ORDER_ID
,P_CUSTOMER_ORDER_ID
,P_COMMENTS
,P_CTR_VERSION
FROM `northwind`.`inventory_transactions`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`transaction_type`
,`transaction_created_date`
,`transaction_modified_date`
,`product_id`
,`quantity`
,`purchase_order_id`
,`customer_order_id`
,`comments`
,`ctr_version`
FROM `northwind`.`inventory_transactions`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbyprojection`
(
IN P_FIELDSFIELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FIELDSFIELD, ' FROM `northwind`.`inventory_transactions`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`transaction_type`,
`transaction_created_date`,
`transaction_modified_date`,
`product_id`,
`quantity`,
`purchase_order_id`,
`customer_order_id`,
`comments`,
`ctr_version`
FROM `northwind`.`inventory_transactions`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`inventory_transactions`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_inventory_transactions_updateone`
(
INOUT P_ID int(11)
, INOUT P_TRANSACTION_TYPE tinyint(4)
, INOUT P_TRANSACTION_CREATED_DATE datetime
, INOUT P_TRANSACTION_MODIFIED_DATE datetime
, INOUT P_PRODUCT_ID int(11)
, INOUT P_QUANTITY int(11)
, INOUT P_PURCHASE_ORDER_ID int(11)
, INOUT P_CUSTOMER_ORDER_ID int(11)
, INOUT P_COMMENTS varchar(255)
, INOUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`inventory_transactions`
WHERE `id` = P_ID
;

IF _currVersion > P_CTR_VERSION THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`inventory_transactions` WHERE WHERE `id` = P_ID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`inventory_transactions` WHERE WHERE `id` = P_ID');

END IF;
SET P_CTR_VERSION := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`inventory_transactions`
SET
`transaction_type` = P_TRANSACTION_TYPE
,`transaction_created_date` = P_TRANSACTION_CREATED_DATE
,`transaction_modified_date` = P_TRANSACTION_MODIFIED_DATE
,`product_id` = P_PRODUCT_ID
,`quantity` = P_QUANTITY
,`purchase_order_id` = P_PURCHASE_ORDER_ID
,`customer_order_id` = P_CUSTOMER_ORDER_ID
,`comments` = P_COMMENTS
,`ctr_version` = P_CTR_VERSION
WHERE 
id = P_ID
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,transaction_type
,transaction_created_date
,transaction_modified_date
,product_id
,quantity
,purchase_order_id
,customer_order_id
,comments
,ctr_version
INTO 
P_ID
,P_TRANSACTION_TYPE
,P_TRANSACTION_CREATED_DATE
,P_TRANSACTION_MODIFIED_DATE
,P_PRODUCT_ID
,P_QUANTITY
,P_PURCHASE_ORDER_ID
,P_CUSTOMER_ORDER_ID
,P_COMMENTS
,P_CTR_VERSION
FROM `northwind`.`inventory_transactions`
WHERE id = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'order_details');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deleteone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyorderid`
(
IN P_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`order_id` = P_ORDER_ID OR (`order_id` IS NULL AND P_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyorderidcount`
(
IN P_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
WHERE 
`order_id` = P_ORDER_ID OR (`order_id` IS NULL AND P_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deletebyorderid`
(
IN P_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`order_id` = P_ORDER_ID OR (`order_id` IS NULL AND P_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyproductid`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyproductidcount`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deletebyproductid`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbystatusid`
(
IN P_STATUS_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
WHERE 
`status_id` = P_STATUS_ID OR (`status_id` IS NULL AND P_STATUS_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbystatusidcount`
(
IN P_STATUS_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
WHERE 
`status_id` = P_STATUS_ID OR (`status_id` IS NULL AND P_STATUS_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_deletebystatusid`
(
IN P_STATUS_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`order_details`
WHERE 
`status_id` = P_STATUS_ID OR (`status_id` IS NULL AND P_STATUS_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_insertone`
(
OUT P_ID int(11)
, INOUT P_ORDER_ID int(11)
, INOUT P_PRODUCT_ID int(11)
, INOUT P_QUANTITY decimal(18,4)
, INOUT P_UNIT_PRICE decimal(19,4)
, INOUT P_DISCOUNT double
, INOUT P_STATUS_ID int(11)
, INOUT P_DATE_ALLOCATED datetime
, INOUT P_PURCHASE_ORDER_ID int(11)
, INOUT P_INVENTORY_ID int(11)
, OUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- inserts a new row into the table
INSERT `northwind`.`order_details`
(
`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
)
VALUES
(
P_ORDER_ID
,P_PRODUCT_ID
,P_QUANTITY
,P_UNIT_PRICE
,P_DISCOUNT
,P_STATUS_ID
,P_DATE_ALLOCATED
,P_PURCHASE_ORDER_ID
,P_INVENTORY_ID
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,order_id
,product_id
,quantity
,unit_price
,discount
,status_id
,date_allocated
,purchase_order_id
,inventory_id
,ctr_version
INTO 
P_ID
,P_ORDER_ID
,P_PRODUCT_ID
,P_QUANTITY
,P_UNIT_PRICE
,P_DISCOUNT
,P_STATUS_ID
,P_DATE_ALLOCATED
,P_PURCHASE_ORDER_ID
,P_INVENTORY_ID
,P_CTR_VERSION
FROM `northwind`.`order_details`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`order_id`
,`product_id`
,`quantity`
,`unit_price`
,`discount`
,`status_id`
,`date_allocated`
,`purchase_order_id`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbyprojection`
(
IN P_FIELDSFIELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FIELDSFIELD, ' FROM `northwind`.`order_details`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`order_id`,
`product_id`,
`quantity`,
`unit_price`,
`discount`,
`status_id`,
`date_allocated`,
`purchase_order_id`,
`inventory_id`,
`ctr_version`
FROM `northwind`.`order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_order_details_updateone`
(
INOUT P_ID int(11)
, INOUT P_ORDER_ID int(11)
, INOUT P_PRODUCT_ID int(11)
, INOUT P_QUANTITY decimal(18,4)
, INOUT P_UNIT_PRICE decimal(19,4)
, INOUT P_DISCOUNT double
, INOUT P_STATUS_ID int(11)
, INOUT P_DATE_ALLOCATED datetime
, INOUT P_PURCHASE_ORDER_ID int(11)
, INOUT P_INVENTORY_ID int(11)
, INOUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`order_details`
WHERE `id` = P_ID
;

IF _currVersion > P_CTR_VERSION THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`order_details` WHERE WHERE `id` = P_ID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`order_details` WHERE WHERE `id` = P_ID');

END IF;
SET P_CTR_VERSION := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`order_details`
SET
`order_id` = P_ORDER_ID
,`product_id` = P_PRODUCT_ID
,`quantity` = P_QUANTITY
,`unit_price` = P_UNIT_PRICE
,`discount` = P_DISCOUNT
,`status_id` = P_STATUS_ID
,`date_allocated` = P_DATE_ALLOCATED
,`purchase_order_id` = P_PURCHASE_ORDER_ID
,`inventory_id` = P_INVENTORY_ID
,`ctr_version` = P_CTR_VERSION
WHERE 
id = P_ID
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,order_id
,product_id
,quantity
,unit_price
,discount
,status_id
,date_allocated
,purchase_order_id
,inventory_id
,ctr_version
INTO 
P_ID
,P_ORDER_ID
,P_PRODUCT_ID
,P_QUANTITY
,P_UNIT_PRICE
,P_DISCOUNT
,P_STATUS_ID
,P_DATE_ALLOCATED
,P_PURCHASE_ORDER_ID
,P_INVENTORY_ID
,P_CTR_VERSION
FROM `northwind`.`order_details`
WHERE id = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
/*schema entity update to support concurrency management*/
call `northwind`.`ctpr__versioning_schema` ('northwind', 'purchase_order_details');
/*****************************************/
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Delete a row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deleteone`
(
IN P_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`id` = P_ID
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbypurchaseorderid`
(
IN P_PURCHASE_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_ID OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbypurchaseorderidcount`
(
IN P_PURCHASE_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_ID OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deletebypurchaseorderid`
(
IN P_PURCHASE_ORDER_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`purchase_order_id` = P_PURCHASE_ORDER_ID OR (`purchase_order_id` IS NULL AND P_PURCHASE_ORDER_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyproductid`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyproductidcount`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deletebyproductid`
(
IN P_PRODUCT_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`product_id` = P_PRODUCT_ID OR (`product_id` IS NULL AND P_PRODUCT_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select all rows based on a foreign key
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyinventoryid`
(
IN P_INVENTORY_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
WHERE 
`inventory_id` = P_INVENTORY_ID OR (`inventory_id` IS NULL AND P_INVENTORY_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Get count of rows returnable by this query
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyinventoryidcount`
(
IN P_INVENTORY_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
WHERE 
`inventory_id` = P_INVENTORY_ID OR (`inventory_id` IS NULL AND P_INVENTORY_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_deletebyinventoryid`
(
IN P_INVENTORY_ID int(11)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- delete all matching from the table
DELETE FROM `northwind`.`purchase_order_details`
WHERE 
`inventory_id` = P_INVENTORY_ID OR (`inventory_id` IS NULL AND P_INVENTORY_ID IS NULL)
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Insert a new row
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_insertone`
(
OUT P_ID int(11)
, INOUT P_PURCHASE_ORDER_ID int(11)
, INOUT P_PRODUCT_ID int(11)
, INOUT P_QUANTITY decimal(18,4)
, INOUT P_UNIT_COST decimal(19,4)
, INOUT P_DATE_RECEIVED datetime
, INOUT P_POSTED_TO_INVENTORY tinyint(1)
, INOUT P_INVENTORY_ID int(11)
, OUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- inserts a new row into the table
INSERT `northwind`.`purchase_order_details`
(
`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
)
VALUES
(
P_PURCHASE_ORDER_ID
,P_PRODUCT_ID
,P_QUANTITY
,P_UNIT_COST
,P_DATE_RECEIVED
,P_POSTED_TO_INVENTORY
,P_INVENTORY_ID
)
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,purchase_order_id
,product_id
,quantity
,unit_cost
,date_received
,posted_to_inventory
,inventory_id
,ctr_version
INTO 
P_ID
,P_PURCHASE_ORDER_ID
,P_PRODUCT_ID
,P_QUANTITY
,P_UNIT_COST
,P_DATE_RECEIVED
,P_POSTED_TO_INVENTORY
,P_INVENTORY_ID
,P_CTR_VERSION
FROM `northwind`.`purchase_order_details`
WHERE id = LAST_INSERT_ID()
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Select All rows
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getall`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table
SELECT 
`id`
,`purchase_order_id`
,`product_id`
,`quantity`
,`unit_cost`
,`date_received`
,`posted_to_inventory`
,`inventory_id`
,`ctr_version`
FROM `northwind`.`purchase_order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getallcount`
(
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table
SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbyprojection`
(
IN P_FIELDSFIELD varchar(500)
, IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = CONCAT('SELECT ', P_FIELDSFIELD, ' FROM `northwind`.`purchase_order_details`')
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbycriteria`
(
IN P_WHERECLAUSE varchar(500)
, IN P_ORDERCLAUSE varchar(500)
, IN P_SKIPCLAUSE varchar(500)
, IN P_TAKECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects all rows from the table according to search criteria
SET @SQL = 'SELECT 
`id`,
`purchase_order_id`,
`product_id`,
`quantity`,
`unit_cost`,
`date_received`,
`posted_to_inventory`,
`inventory_id`,
`ctr_version`
FROM `northwind`.`purchase_order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
IF (P_ORDERCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ORDER BY ', P_ORDERCLAUSE);
END IF
;
IF (P_TAKECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_TAKECLAUSE);
END IF
;
IF (P_SKIPCLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' ', P_SKIPCLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59


DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_getbycriteriacount`
(
IN P_WHERECLAUSE varchar(500)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- selects count of all rows from the table according to search criteria
SET @SQL = 'SELECT COUNT(*)
FROM `northwind`.`purchase_order_details`'
;
IF (P_WHERECLAUSE > '') THEN
SET @SQL = CONCAT(@SQL, ' WHERE ', P_WHERECLAUSE);
END IF
;
PREPARE dynamicstatement FROM @SQL;
EXECUTE dynamicstatement;
DEALLOCATE PREPARE dynamicstatement
;
END
$$
DELIMITER ;


-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59

-- Update one row based on the primary key(s)
DELIMITER $$
CREATE PROCEDURE `northwind`.`ctpr_purchase_order_details_updateone`
(
INOUT P_ID int(11)
, INOUT P_PURCHASE_ORDER_ID int(11)
, INOUT P_PRODUCT_ID int(11)
, INOUT P_QUANTITY decimal(18,4)
, INOUT P_UNIT_COST decimal(19,4)
, INOUT P_DATE_RECEIVED datetime
, INOUT P_POSTED_TO_INVENTORY tinyint(1)
, INOUT P_INVENTORY_ID int(11)
, INOUT P_CTR_VERSION smallint(5)
)
BEGIN
-- Stored procedure generated by CodeTrigger
-- This script was generated on 2.12.2018 12:15:59
-- updates a row in the table based on the primary key
-- data optimistic concurrency handling ----------------------------
DECLARE _currVersion INT;
SELECT ctr_version INTO _currVersion FROM `northwind`.`purchase_order_details`
WHERE `id` = P_ID
;

IF _currVersion > P_CTR_VERSION THEN
CALL RAISERROR_UPDATEVERSION('data concurrency issue updating this record, possible stale data. 
`northwind`.`purchase_order_details` WHERE WHERE `id` = P_ID');

ELSEIF _currVersion IS NULL THEN
CALL RAISERROR_RECORDNOTFOUND('data concurrency issue updating this record, record not available (not found). 
`northwind`.`purchase_order_details` WHERE WHERE `id` = P_ID');

END IF;
SET P_CTR_VERSION := _currVersion  + 1;
-- -----------------------------------------------------------------
UPDATE `northwind`.`purchase_order_details`
SET
`purchase_order_id` = P_PURCHASE_ORDER_ID
,`product_id` = P_PRODUCT_ID
,`quantity` = P_QUANTITY
,`unit_cost` = P_UNIT_COST
,`date_received` = P_DATE_RECEIVED
,`posted_to_inventory` = P_POSTED_TO_INVENTORY
,`inventory_id` = P_INVENTORY_ID
,`ctr_version` = P_CTR_VERSION
WHERE 
id = P_ID
;

-- return field values (some may have been modified by a trigger)
SELECT 
id
,purchase_order_id
,product_id
,quantity
,unit_cost
,date_received
,posted_to_inventory
,inventory_id
,ctr_version
INTO 
P_ID
,P_PURCHASE_ORDER_ID
,P_PRODUCT_ID
,P_QUANTITY
,P_UNIT_COST
,P_DATE_RECEIVED
,P_POSTED_TO_INVENTORY
,P_INVENTORY_ID
,P_CTR_VERSION
FROM `northwind`.`purchase_order_details`
WHERE id = P_ID
;
END
$$
DELIMITER ;


