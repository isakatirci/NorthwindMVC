/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOProducts.
	///It maintains a collection of BOOrderDetails objects.
	///</Summary>
	public partial class BOProducts : zNorthwindRestApiConn_BaseBusiness, IBOProducts, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _productID;
		protected string _productName;
		protected Int32? _supplierID;
		protected Int32? _categoryID;
		protected string _quantityPerUnit;
		protected decimal? _unitPrice;
		protected Int16? _unitsInStock;
		protected Int16? _unitsOnOrder;
		protected Int16? _reorderLevel;
		protected bool? _discontinued;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOOrderDetails> _boOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IProductsRepository _iProductsRepository;
		protected IOrderDetailsRepository _iOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOProducts()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 productID
		///</parameters>
		public void Init(Int32 productID)
		{
			try
			{
				IDAOProducts daoProducts = _iProductsRepository.SelectOne(productID);
				_productID = daoProducts.ProductID;
				_productName = daoProducts.ProductName;
				_supplierID = daoProducts.SupplierID;
				_categoryID = daoProducts.CategoryID;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_unitPrice = daoProducts.UnitPrice;
				_unitsInStock = daoProducts.UnitsInStock;
				_unitsOnOrder = daoProducts.UnitsOnOrder;
				_reorderLevel = daoProducts.ReorderLevel;
				_discontinued = daoProducts.Discontinued;
				_ctrVersion = daoProducts.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOProducts
		///</parameters>
		protected internal BOProducts(IDAOProducts daoProducts)
		{
			try
			{
				_productID = daoProducts.ProductID;
				_productName = daoProducts.ProductName;
				_supplierID = daoProducts.SupplierID;
				_categoryID = daoProducts.CategoryID;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_unitPrice = daoProducts.UnitPrice;
				_unitsInStock = daoProducts.UnitsInStock;
				_unitsOnOrder = daoProducts.UnitsOnOrder;
				_reorderLevel = daoProducts.ReorderLevel;
				_discontinued = daoProducts.Discontinued;
				_ctrVersion = daoProducts.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Products record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject( _iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction( _iProductsRepository, "savenewBOProducts");
			try
			{
				daoProducts.ProductName = _productName;
				daoProducts.SupplierID = _supplierID;
				daoProducts.CategoryID = _categoryID;
				daoProducts.QuantityPerUnit = _quantityPerUnit;
				daoProducts.UnitPrice = _unitPrice;
				daoProducts.UnitsInStock = _unitsInStock;
				daoProducts.UnitsOnOrder = _unitsOnOrder;
				daoProducts.ReorderLevel = _reorderLevel;
				daoProducts.Discontinued = _discontinued;
				_iProductsRepository.Insert(daoProducts);
				CommitTransaction( _iProductsRepository);
				Done(this);
				
				_productID = daoProducts.ProductID;
				_productName = daoProducts.ProductName;
				_supplierID = daoProducts.SupplierID;
				_categoryID = daoProducts.CategoryID;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_unitPrice = daoProducts.UnitPrice;
				_unitsInStock = daoProducts.UnitsInStock;
				_unitsOnOrder = daoProducts.UnitsOnOrder;
				_reorderLevel = daoProducts.ReorderLevel;
				_discontinued = daoProducts.Discontinued;
				_ctrVersion = daoProducts.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "savenewBOProducts");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Products record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject(_iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction(_iProductsRepository, "updateBOProducts");
			try
			{
				daoProducts.ProductID = _productID;
				daoProducts.ProductName = _productName;
				daoProducts.SupplierID = _supplierID;
				daoProducts.CategoryID = _categoryID;
				daoProducts.QuantityPerUnit = _quantityPerUnit;
				daoProducts.UnitPrice = _unitPrice;
				daoProducts.UnitsInStock = _unitsInStock;
				daoProducts.UnitsOnOrder = _unitsOnOrder;
				daoProducts.ReorderLevel = _reorderLevel;
				daoProducts.Discontinued = _discontinued;
				daoProducts.CtrVersion = _ctrVersion;
				_iProductsRepository.Update(daoProducts);
				CommitTransaction(_iProductsRepository);
				Done(this);
				
				_productID = daoProducts.ProductID;
				_productName = daoProducts.ProductName;
				_supplierID = daoProducts.SupplierID;
				_categoryID = daoProducts.CategoryID;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_unitPrice = daoProducts.UnitPrice;
				_unitsInStock = daoProducts.UnitsInStock;
				_unitsOnOrder = daoProducts.UnitsOnOrder;
				_reorderLevel = daoProducts.ReorderLevel;
				_discontinued = daoProducts.Discontinued;
				_ctrVersion = daoProducts.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "updateBOProducts");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Products record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject(_iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction(_iProductsRepository, "deleteBOProducts");
			try
			{
				daoProducts.ProductID = _productID;
				_iProductsRepository.Delete(daoProducts);
				CommitTransaction(_iProductsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "deleteBOProducts");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///ProductsCollection
		///This method returns the collection of BOProducts objects
		///</Summary>
		///<returns>
		///IList[IBOProducts]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOProducts> ProductsCollection(IProductsRepository iProductsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOProducts> boProductsCollection = new List<IBOProducts>();
				IList<IDAOProducts> daoProductsCollection = iProductsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOProducts daoProducts in daoProductsCollection)
					boProductsCollection.Add(new BOProducts(daoProducts));
				
				return boProductsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ProductsCollectionCount
		///This method returns the collection count of BOProducts objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ProductsCollectionCount(IProductsRepository iProductsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iProductsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///ProductsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOProducts>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iProductsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boProductsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOProducts> daoProductsCollection = _iProductsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOProducts resdaoProducts in daoProductsCollection)
					boProductsCollection.Add((T)(object)new BOProducts(resdaoProducts));
				
				return boProductsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOProducts objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOProducts> boProductsCollection = new List<IBOProducts>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iProductsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns its collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOOrderDetails]
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual IList<IBOOrderDetails> OrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderDetailsCollection == null)
					LoadOrderDetailsCollection();
				return _boOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadOrderDetailsCollection
		///This method loads the internal collection of BOOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boOrderDetailsCollection = new List<IBOOrderDetails>();
				IList<IDAOOrderDetails> daoOrderDetailsCollection = _iOrderDetailsRepository.SelectAllByProductID(_productID.Value);
				Done(this);
				
				foreach(IDAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					_boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrderDetails
		///This method persists a BOOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void AddOrderDetails(IBOOrderDetails boOrderDetails)
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject(_iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction(_iOrderDetailsRepository, "addOrderDetails");
			try
			{
				daoOrderDetails.OrderID = boOrderDetails.OrderID;
				daoOrderDetails.UnitPrice = boOrderDetails.UnitPrice;
				daoOrderDetails.Quantity = boOrderDetails.Quantity;
				daoOrderDetails.Discount = boOrderDetails.Discount;
				daoOrderDetails.ProductID = _productID.Value;
				_iOrderDetailsRepository.Insert(daoOrderDetails);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrderDetails = new BOOrderDetails(daoOrderDetails);
				if(_boOrderDetailsCollection != null)
					_boOrderDetailsCollection.Add(boOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "addOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrderDetails
		///This method deletes all BOOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iOrderDetailsRepository, null);
			BeginTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
			try
			{
				_iOrderDetailsRepository.DeleteAllByProductID(_productID.Value);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				if(_boOrderDetailsCollection != null)
				{
					_boOrderDetailsCollection.Clear();
					_boOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IProductsRepository ProductsRepository
		{
			set
			{
				_iProductsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderDetailsRepository OrderDetailsRepository
		{
			set
			{
				_iOrderDetailsRepository = value;
			}
		}
		
		public virtual Int32? ProductID
		{
			get
			{
				 return _productID;
			}
			set
			{
				_productID = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductName
		{
			get
			{
				 return _productName;
			}
			set
			{
				_productName = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? SupplierID
		{
			get
			{
				 return _supplierID;
			}
			set
			{
				_supplierID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CategoryID
		{
			get
			{
				 return _categoryID;
			}
			set
			{
				_categoryID = value;
				_isDirty = true;
			}
		}
		
		public virtual string QuantityPerUnit
		{
			get
			{
				 return _quantityPerUnit;
			}
			set
			{
				_quantityPerUnit = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? UnitPrice
		{
			get
			{
				 return _unitPrice;
			}
			set
			{
				_unitPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? UnitsInStock
		{
			get
			{
				 return _unitsInStock;
			}
			set
			{
				_unitsInStock = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? UnitsOnOrder
		{
			get
			{
				 return _unitsOnOrder;
			}
			set
			{
				_unitsOnOrder = value;
				_isDirty = true;
			}
		}
		
		public virtual Int16? ReorderLevel
		{
			get
			{
				 return _reorderLevel;
			}
			set
			{
				_reorderLevel = value;
				_isDirty = true;
			}
		}
		
		public virtual bool? Discontinued
		{
			get
			{
				 return _discontinued;
			}
			set
			{
				_discontinued = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iProductsRepository;	}
			set {	ProductsRepository = (IProductsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
