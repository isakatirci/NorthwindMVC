/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:13
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOIdentityRole.
	///It maintains a collection of BOIdentityUserRole objects.
	///</Summary>
	public partial class BOIdentityRole : zNorthwindRestApiConn_BaseBusiness, IBOIdentityRole, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _ıd;
		protected string _name;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOIdentityUserRole> _boIdentityUserRoleCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IIdentityRoleRepository _iIdentityRoleRepository;
		protected IIdentityUserRoleRepository _iIdentityUserRoleRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOIdentityRole()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 ıd
		///</parameters>
		public void Init(Int32 ıd)
		{
			try
			{
				IDAOIdentityRole daoIdentityRole = _iIdentityRoleRepository.SelectOne(ıd);
				_ıd = daoIdentityRole.Id;
				_name = daoIdentityRole.Name;
				_ctrVersion = daoIdentityRole.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOIdentityRole
		///</parameters>
		protected internal BOIdentityRole(IDAOIdentityRole daoIdentityRole)
		{
			try
			{
				_ıd = daoIdentityRole.Id;
				_name = daoIdentityRole.Name;
				_ctrVersion = daoIdentityRole.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new IdentityRole record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOIdentityRole daoIdentityRole = _iIdentityRoleRepository.New();
			RegisterDataObject( _iIdentityRoleRepository, _iIdentityRoleRepository.BaseData(daoIdentityRole));
			BeginTransaction( _iIdentityRoleRepository, "savenewBOIdentityRole");
			try
			{
				daoIdentityRole.Name = _name;
				_iIdentityRoleRepository.Insert(daoIdentityRole);
				CommitTransaction( _iIdentityRoleRepository);
				Done(this);
				
				_ıd = daoIdentityRole.Id;
				_name = daoIdentityRole.Name;
				_ctrVersion = daoIdentityRole.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityRoleRepository, "savenewBOIdentityRole");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one IdentityRole record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIdentityRole
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOIdentityRole daoIdentityRole = _iIdentityRoleRepository.New();
			RegisterDataObject(_iIdentityRoleRepository, _iIdentityRoleRepository.BaseData(daoIdentityRole));
			BeginTransaction(_iIdentityRoleRepository, "updateBOIdentityRole");
			try
			{
				daoIdentityRole.Id = _ıd;
				daoIdentityRole.Name = _name;
				daoIdentityRole.CtrVersion = _ctrVersion;
				_iIdentityRoleRepository.Update(daoIdentityRole);
				CommitTransaction(_iIdentityRoleRepository);
				Done(this);
				
				_ıd = daoIdentityRole.Id;
				_name = daoIdentityRole.Name;
				_ctrVersion = daoIdentityRole.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityRoleRepository, "updateBOIdentityRole");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one IdentityRole record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOIdentityRole daoIdentityRole = _iIdentityRoleRepository.New();
			RegisterDataObject(_iIdentityRoleRepository, _iIdentityRoleRepository.BaseData(daoIdentityRole));
			BeginTransaction(_iIdentityRoleRepository, "deleteBOIdentityRole");
			try
			{
				daoIdentityRole.Id = _ıd;
				_iIdentityRoleRepository.Delete(daoIdentityRole);
				CommitTransaction(_iIdentityRoleRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityRoleRepository, "deleteBOIdentityRole");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///IdentityRoleCollection
		///This method returns the collection of BOIdentityRole objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityRole]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOIdentityRole> IdentityRoleCollection(IIdentityRoleRepository iIdentityRoleRepository)
		{
			Doing(null);
			try
			{
				IList<IBOIdentityRole> boIdentityRoleCollection = new List<IBOIdentityRole>();
				IList<IDAOIdentityRole> daoIdentityRoleCollection = iIdentityRoleRepository.SelectAll();
				Done(null);
				
				foreach(IDAOIdentityRole daoIdentityRole in daoIdentityRoleCollection)
					boIdentityRoleCollection.Add(new BOIdentityRole(daoIdentityRole));
				
				return boIdentityRoleCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///IdentityRoleCollectionCount
		///This method returns the collection count of BOIdentityRole objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 IdentityRoleCollectionCount(IIdentityRoleRepository iIdentityRoleRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iIdentityRoleRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///IdentityRoleCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOIdentityRole>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iIdentityRoleRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boIdentityRoleCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOIdentityRole> daoIdentityRoleCollection = _iIdentityRoleRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOIdentityRole resdaoIdentityRole in daoIdentityRoleCollection)
					boIdentityRoleCollection.Add((T)(object)new BOIdentityRole(resdaoIdentityRole));
				
				return boIdentityRoleCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOIdentityRole objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOIdentityRole> boIdentityRoleCollection = new List<IBOIdentityRole>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iIdentityRoleRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///IdentityUserRoleCollection
		///This method returns its collection of BOIdentityUserRole objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityUserRole]
		///</returns>
		///<parameters>
		///BOIdentityRole
		///</parameters>
		public virtual IList<IBOIdentityUserRole> IdentityUserRoleCollection()
		{
			Doing(this);
			try
			{
				if(_boIdentityUserRoleCollection == null)
					LoadIdentityUserRoleCollection();
				return _boIdentityUserRoleCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadIdentityUserRoleCollection
		///This method loads the internal collection of BOIdentityUserRole objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadIdentityUserRoleCollection()
		{
			Doing(this);
			try
			{
				_boIdentityUserRoleCollection = new List<IBOIdentityUserRole>();
				IList<IDAOIdentityUserRole> daoIdentityUserRoleCollection = _iIdentityUserRoleRepository.SelectAllByRoleId(_ıd.Value);
				Done(this);
				
				foreach(IDAOIdentityUserRole daoIdentityUserRole in daoIdentityUserRoleCollection)
					_boIdentityUserRoleCollection.Add(new BOIdentityUserRole(daoIdentityUserRole));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddIdentityUserRole
		///This method persists a BOIdentityUserRole object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIdentityUserRole
		///</parameters>
		public virtual void AddIdentityUserRole(IBOIdentityUserRole boIdentityUserRole)
		{
			Doing(this);
			IDAOIdentityUserRole daoIdentityUserRole = _iIdentityUserRoleRepository.New();
			RegisterDataObject(_iIdentityUserRoleRepository, _iIdentityUserRoleRepository.BaseData(daoIdentityUserRole));
			BeginTransaction(_iIdentityUserRoleRepository, "addIdentityUserRole");
			try
			{
				daoIdentityUserRole.UserId = boIdentityUserRole.UserId;
				daoIdentityUserRole.RoleId = _ıd.Value;
				_iIdentityUserRoleRepository.Insert(daoIdentityUserRole);
				CommitTransaction(_iIdentityUserRoleRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boIdentityUserRole = new BOIdentityUserRole(daoIdentityUserRole);
				if(_boIdentityUserRoleCollection != null)
					_boIdentityUserRoleCollection.Add(boIdentityUserRole);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityUserRoleRepository, "addIdentityUserRole");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllIdentityUserRole
		///This method deletes all BOIdentityUserRole objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllIdentityUserRole()
		{
			Doing(this);
			RegisterDataObject(_iIdentityUserRoleRepository, null);
			BeginTransaction(_iIdentityUserRoleRepository, "deleteAllIdentityUserRole");
			try
			{
				_iIdentityUserRoleRepository.DeleteAllByRoleId(_ıd.Value);
				CommitTransaction(_iIdentityUserRoleRepository);
				Done(this);
				if(_boIdentityUserRoleCollection != null)
				{
					_boIdentityUserRoleCollection.Clear();
					_boIdentityUserRoleCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityUserRoleRepository, "deleteAllIdentityUserRole");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IIdentityRoleRepository IdentityRoleRepository
		{
			set
			{
				_iIdentityRoleRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IIdentityUserRoleRepository IdentityUserRoleRepository
		{
			set
			{
				_iIdentityUserRoleRepository = value;
			}
		}
		
		public virtual Int32? Id
		{
			get
			{
				 return _ıd;
			}
			set
			{
				_ıd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Name
		{
			get
			{
				 return _name;
			}
			set
			{
				_name = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iIdentityRoleRepository;	}
			set {	IdentityRoleRepository = (IIdentityRoleRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
