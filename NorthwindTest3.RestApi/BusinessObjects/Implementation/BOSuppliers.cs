/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:31:22
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using NorthwindTest3.DataObjects;
using NorthwindTest3.DataObjects.Interfaces;
using NorthwindTest3.BusinessObjects.Interfaces;

namespace NorthwindTest3.BusinessObjects
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSuppliers.
	///It maintains a collection of BOProducts objects.
	///</Summary>
	public partial class BOSuppliers : zNorthwindTest3Conn_BaseBusiness, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected Int32? _supplierID;
		protected string _companyName;
		protected string _contactName;
		protected string _contactTitle;
		protected string _address;
		protected string _city;
		protected string _region;
		protected string _postalCode;
		protected string _country;
		protected string _phone;
		protected string _fax;
		protected string _homePage;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<BOProducts> _boProductsCollection;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSuppliers()
		{
		}

		///<Summary>
		///Constructor
		///Constructor using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///Int32 supplierID
		///</parameters>
		public BOSuppliers(Int32 supplierID)
		{
			try
			{
				DAOSuppliers daoSuppliers = DAOSuppliers.SelectOne(supplierID);
				_supplierID = daoSuppliers.SupplierID;
				_companyName = daoSuppliers.CompanyName;
				_contactName = daoSuppliers.ContactName;
				_contactTitle = daoSuppliers.ContactTitle;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_region = daoSuppliers.Region;
				_postalCode = daoSuppliers.PostalCode;
				_country = daoSuppliers.Country;
				_phone = daoSuppliers.Phone;
				_fax = daoSuppliers.Fax;
				_homePage = daoSuppliers.HomePage;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSuppliers
		///</parameters>
		protected internal BOSuppliers(DAOSuppliers daoSuppliers)
		{
			try
			{
				_supplierID = daoSuppliers.SupplierID;
				_companyName = daoSuppliers.CompanyName;
				_contactName = daoSuppliers.ContactName;
				_contactTitle = daoSuppliers.ContactTitle;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_region = daoSuppliers.Region;
				_postalCode = daoSuppliers.PostalCode;
				_country = daoSuppliers.Country;
				_phone = daoSuppliers.Phone;
				_fax = daoSuppliers.Fax;
				_homePage = daoSuppliers.HomePage;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Suppliers record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			DAOSuppliers daoSuppliers = new DAOSuppliers();
			RegisterDataObject(daoSuppliers);
			BeginTransaction("savenewBOSuppliers");
			try
			{
				daoSuppliers.CompanyName = _companyName;
				daoSuppliers.ContactName = _contactName;
				daoSuppliers.ContactTitle = _contactTitle;
				daoSuppliers.Address = _address;
				daoSuppliers.City = _city;
				daoSuppliers.Region = _region;
				daoSuppliers.PostalCode = _postalCode;
				daoSuppliers.Country = _country;
				daoSuppliers.Phone = _phone;
				daoSuppliers.Fax = _fax;
				daoSuppliers.HomePage = _homePage;
				daoSuppliers.Insert();
				CommitTransaction();
				
				_supplierID = daoSuppliers.SupplierID;
				_companyName = daoSuppliers.CompanyName;
				_contactName = daoSuppliers.ContactName;
				_contactTitle = daoSuppliers.ContactTitle;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_region = daoSuppliers.Region;
				_postalCode = daoSuppliers.PostalCode;
				_country = daoSuppliers.Country;
				_phone = daoSuppliers.Phone;
				_fax = daoSuppliers.Fax;
				_homePage = daoSuppliers.HomePage;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("savenewBOSuppliers");
				throw;
			}
		}
		
		///<Summary>
		///Update
		///This method updates one Suppliers record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSuppliers
		///</parameters>
		public virtual void Update()
		{
			DAOSuppliers daoSuppliers = new DAOSuppliers();
			RegisterDataObject(daoSuppliers);
			BeginTransaction("updateBOSuppliers");
			try
			{
				daoSuppliers.SupplierID = _supplierID;
				daoSuppliers.CompanyName = _companyName;
				daoSuppliers.ContactName = _contactName;
				daoSuppliers.ContactTitle = _contactTitle;
				daoSuppliers.Address = _address;
				daoSuppliers.City = _city;
				daoSuppliers.Region = _region;
				daoSuppliers.PostalCode = _postalCode;
				daoSuppliers.Country = _country;
				daoSuppliers.Phone = _phone;
				daoSuppliers.Fax = _fax;
				daoSuppliers.HomePage = _homePage;
				daoSuppliers.Update();
				CommitTransaction();
				
				_supplierID = daoSuppliers.SupplierID;
				_companyName = daoSuppliers.CompanyName;
				_contactName = daoSuppliers.ContactName;
				_contactTitle = daoSuppliers.ContactTitle;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_region = daoSuppliers.Region;
				_postalCode = daoSuppliers.PostalCode;
				_country = daoSuppliers.Country;
				_phone = daoSuppliers.Phone;
				_fax = daoSuppliers.Fax;
				_homePage = daoSuppliers.HomePage;
				_isDirty = false;
			}
			catch
			{
				RollbackTransaction("updateBOSuppliers");
				throw;
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Suppliers record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			DAOSuppliers daoSuppliers = new DAOSuppliers();
			RegisterDataObject(daoSuppliers);
			BeginTransaction("deleteBOSuppliers");
			try
			{
				daoSuppliers.SupplierID = _supplierID;
				daoSuppliers.Delete();
				CommitTransaction();
			}
			catch
			{
				RollbackTransaction("deleteBOSuppliers");
				throw;
			}
		}
		
		///<Summary>
		///SuppliersCollection
		///This method returns the collection of BOSuppliers objects
		///</Summary>
		///<returns>
		///List[BOSuppliers]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<BOSuppliers> SuppliersCollection()
		{
			try
			{
				IList<BOSuppliers> boSuppliersCollection = new List<BOSuppliers>();
				IList<DAOSuppliers> daoSuppliersCollection = DAOSuppliers.SelectAll();
			
				foreach(DAOSuppliers daoSuppliers in daoSuppliersCollection)
					boSuppliersCollection.Add(new BOSuppliers(daoSuppliers));
			
				return boSuppliersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SuppliersCollectionCount
		///This method returns the collection count of BOSuppliers objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SuppliersCollectionCount()
		{
			try
			{
				Int32 objCount = DAOSuppliers.SelectAllCount();
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///ProductsCollection
		///This method returns its collection of BOProducts objects
		///</Summary>
		///<returns>
		///IList[BOProducts]
		///</returns>
		///<parameters>
		///BOSuppliers
		///</parameters>
		public virtual IList<BOProducts> ProductsCollection()
		{
			try
			{
				if(_boProductsCollection == null)
					LoadProductsCollection();
				
				return _boProductsCollection.AsReadOnly();
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///Projections
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///List<BOSuppliers>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDictionary<string, IList<object>> retObj = DAOSuppliers.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				return retObj;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SuppliersCollection<T>
		///This method implements the IQueryable Collection<T> method, returning a collection of BOSuppliers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSuppliersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IList<DAOSuppliers> daoSuppliersCollection = DAOSuppliers.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			
				foreach(DAOSuppliers resdaoSuppliers in daoSuppliersCollection)
					boSuppliersCollection.Add((T)(object)new BOSuppliers(resdaoSuppliers));
			
				return boSuppliersCollection;
			}
			catch
			{
				throw;
			}
		}
		
		
		///<Summary>
		///SuppliersCollectionCount
		///This method implements the IQueryable CollectionCount method, returning a collection count of BOSuppliers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///object o
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = DAOSuppliers.SelectAllByCriteriaCount(lstDataCriteria);
				return objCount;
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///LoadProductsCollection
		///This method loads the internal collection of BOProducts objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadProductsCollection()
		{
			try
			{
				_boProductsCollection = new List<BOProducts>();
				IList<DAOProducts> daoProductsCollection = DAOProducts.SelectAllBySupplierID(_supplierID.Value);
				
				foreach(DAOProducts daoProducts in daoProductsCollection)
					_boProductsCollection.Add(new BOProducts(daoProducts));
			}
			catch
			{
				throw;
			}
		}
		
		///<Summary>
		///AddProducts
		///This method persists a BOProducts object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual void AddProducts(BOProducts boProducts)
		{
			DAOProducts daoProducts = new DAOProducts();
			RegisterDataObject(daoProducts);
			BeginTransaction("addProducts");
			try
			{
				daoProducts.ProductID = boProducts.ProductID;
				daoProducts.ProductName = boProducts.ProductName;
				daoProducts.CategoryID = boProducts.CategoryID;
				daoProducts.QuantityPerUnit = boProducts.QuantityPerUnit;
				daoProducts.UnitPrice = boProducts.UnitPrice;
				daoProducts.UnitsInStock = boProducts.UnitsInStock;
				daoProducts.UnitsOnOrder = boProducts.UnitsOnOrder;
				daoProducts.ReorderLevel = boProducts.ReorderLevel;
				daoProducts.Discontinued = boProducts.Discontinued;
				daoProducts.SupplierID = _supplierID.Value;
				daoProducts.Insert();
				CommitTransaction();
				
				/*pick up any primary keys, computed values etc*/
				boProducts = new BOProducts(daoProducts);
				if(_boProductsCollection != null)
					_boProductsCollection.Add(boProducts);
			}
			catch
			{
				RollbackTransaction("addProducts");
				throw;
			}
		}
		
		///<Summary>
		///DeleteAllProducts
		///This method deletes all BOProducts objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllProducts()
		{
			RegisterDataObject(null);
			BeginTransaction("deleteAllProducts");
			try
			{
				DAOProducts.DeleteAllBySupplierID(ConnectionProvider, _supplierID.Value);
				CommitTransaction();
				if(_boProductsCollection != null)
				{
					_boProductsCollection.Clear();
					_boProductsCollection = null;
				}
			}
			catch
			{
				RollbackTransaction("deleteAllProducts");
				throw;
			}
		}
		
		#endregion

		#region member properties
		
		public virtual Int32? SupplierID
		{
			get
			{
				 return _supplierID;
			}
			set
			{
				_supplierID = value;
				_isDirty = true;
			}
		}
		
		public virtual string CompanyName
		{
			get
			{
				 return _companyName;
			}
			set
			{
				_companyName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContactName
		{
			get
			{
				 return _contactName;
			}
			set
			{
				_contactName = value;
				_isDirty = true;
			}
		}
		
		public virtual string ContactTitle
		{
			get
			{
				 return _contactTitle;
			}
			set
			{
				_contactTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string Region
		{
			get
			{
				 return _region;
			}
			set
			{
				_region = value;
				_isDirty = true;
			}
		}
		
		public virtual string PostalCode
		{
			get
			{
				 return _postalCode;
			}
			set
			{
				_postalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string Country
		{
			get
			{
				 return _country;
			}
			set
			{
				_country = value;
				_isDirty = true;
			}
		}
		
		public virtual string Phone
		{
			get
			{
				 return _phone;
			}
			set
			{
				_phone = value;
				_isDirty = true;
			}
		}
		
		public virtual string Fax
		{
			get
			{
				 return _fax;
			}
			set
			{
				_fax = value;
				_isDirty = true;
			}
		}
		
		public virtual string HomePage
		{
			get
			{
				 return _homePage;
			}
			set
			{
				_homePage = value;
				_isDirty = true;
			}
		}
		
		public virtual object Repository
		{
			get {	return null;	}
			set	{	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
