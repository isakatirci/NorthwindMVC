/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using MySql.Data.MySqlClient;
using System.Collections.Generic;
using Northwind.Data.Interfaces;

namespace Northwind.Data
{
	public partial class DAOInvoices : zNorthwindConn_BaseData, IDAOİnvoices
	{
		#region member variables
		protected string _id;
		protected string _orderİd;
		protected string _invoiceDate;
		protected string _dueDate;
		protected string _tax;
		protected string _shipping;
		protected string _amountDue;
		protected string _ctrVersion;
		#endregion

		#region class methods
		public DAOInvoices()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table invoices based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOİnvoices
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public static IDAOİnvoices SelectOne(string id)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getone";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("invoices");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)id?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				DAOInvoices retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOInvoices();
					retObj._id					 = Convert.IsDBNull(dt.Rows[0]["id"]) ? null : (string)dt.Rows[0]["id"];
					retObj._orderİd					 = Convert.IsDBNull(dt.Rows[0]["order_id"]) ? null : (string)dt.Rows[0]["order_id"];
					retObj._invoiceDate					 = Convert.IsDBNull(dt.Rows[0]["invoice_date"]) ? null : (string)dt.Rows[0]["invoice_date"];
					retObj._dueDate					 = Convert.IsDBNull(dt.Rows[0]["due_date"]) ? null : (string)dt.Rows[0]["due_date"];
					retObj._tax					 = Convert.IsDBNull(dt.Rows[0]["tax"]) ? null : (string)dt.Rows[0]["tax"];
					retObj._shipping					 = Convert.IsDBNull(dt.Rows[0]["shipping"]) ? null : (string)dt.Rows[0]["shipping"];
					retObj._amountDue					 = Convert.IsDBNull(dt.Rows[0]["amount_due"]) ? null : (string)dt.Rows[0]["amount_due"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? null : (string)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table invoices based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_deleteone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_id?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);


			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table invoices based on a foreign key
		///</Summary>
		///<returns>
		///List-IDAOİnvoices.
		///</returns>
		///<parameters>
		///string orderİd
		///</parameters>
		public static List<IDAOİnvoices> SelectAllByOrderİd(string orderİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getbyorderid";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("invoices");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)orderİd?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOİnvoices> objList = new List<IDAOİnvoices>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOInvoices retObj = new DAOInvoices();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["invoice_date"]) ? null : (string)row["invoice_date"];
						retObj._dueDate					 = Convert.IsDBNull(row["due_date"]) ? null : (string)row["due_date"];
						retObj._tax					 = Convert.IsDBNull(row["tax"]) ? null : (string)row["tax"];
						retObj._shipping					 = Convert.IsDBNull(row["shipping"]) ? null : (string)row["shipping"];
						retObj._amountDue					 = Convert.IsDBNull(row["amount_due"]) ? null : (string)row["amount_due"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string orderİd
		///</parameters>
		public static Int32 SelectAllByOrderİdCount(string orderİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getbyorderidcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)orderİd?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table invoices with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindConn_TxConnectionProvider connectionProvider, string orderİd
		///</parameters>
		public static void DeleteAllByOrderİd(IzNorthwindConn_TxConnectionProvider connectionProvider, string orderİd)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_deletebyorderid";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)orderİd?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);


			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table invoices
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_insertone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.Output, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _orderİd));
				command.Parameters.Add(new MySqlParameter("?P_İNVOİCE_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _invoiceDate));
				command.Parameters.Add(new MySqlParameter("?P_DUE_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dueDate));
				command.Parameters.Add(new MySqlParameter("?P_TAX", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _tax));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPİNG", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _shipping));
				command.Parameters.Add(new MySqlParameter("?P_AMOUNT_DUE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _amountDue));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.Output, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_orderİd					 = Convert.IsDBNull(command.Parameters["?P_ORDER_İD"].Value) ? null : (string)command.Parameters["?P_ORDER_İD"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["?P_İNVOİCE_DATE"].Value) ? null : (string)command.Parameters["?P_İNVOİCE_DATE"].Value;
				_dueDate					 = Convert.IsDBNull(command.Parameters["?P_DUE_DATE"].Value) ? null : (string)command.Parameters["?P_DUE_DATE"].Value;
				_tax					 = Convert.IsDBNull(command.Parameters["?P_TAX"].Value) ? null : (string)command.Parameters["?P_TAX"].Value;
				_shipping					 = Convert.IsDBNull(command.Parameters["?P_SHİPPİNG"].Value) ? null : (string)command.Parameters["?P_SHİPPİNG"].Value;
				_amountDue					 = Convert.IsDBNull(command.Parameters["?P_AMOUNT_DUE"].Value) ? null : (string)command.Parameters["?P_AMOUNT_DUE"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table invoices
		///</Summary>
		///<returns>
		///List-IDAOİnvoices.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static List<IDAOİnvoices> SelectAll()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getall";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("invoices");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOİnvoices> objList = new List<IDAOİnvoices>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOInvoices retObj = new DAOInvoices();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["invoice_date"]) ? null : (string)row["invoice_date"];
						retObj._dueDate					 = Convert.IsDBNull(row["due_date"]) ? null : (string)row["due_date"];
						retObj._tax					 = Convert.IsDBNull(row["tax"]) ? null : (string)row["tax"];
						retObj._shipping					 = Convert.IsDBNull(row["shipping"]) ? null : (string)row["shipping"];
						retObj._amountDue					 = Convert.IsDBNull(row["amount_due"]) ? null : (string)row["amount_due"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getallcount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiinvoices
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getbyprojection";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("invoices");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string fieldsField = GetProjections(listProjection);
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_FİELDSFİELD", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)fieldsField?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "id", true) == 0) lst.Add(Convert.IsDBNull(row["id"]) ? null : (string)row["id"]);
						if (string.Compare(projection.Member, "order_id", true) == 0) lst.Add(Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"]);
						if (string.Compare(projection.Member, "invoice_date", true) == 0) lst.Add(Convert.IsDBNull(row["invoice_date"]) ? null : (string)row["invoice_date"]);
						if (string.Compare(projection.Member, "due_date", true) == 0) lst.Add(Convert.IsDBNull(row["due_date"]) ? null : (string)row["due_date"]);
						if (string.Compare(projection.Member, "tax", true) == 0) lst.Add(Convert.IsDBNull(row["tax"]) ? null : (string)row["tax"]);
						if (string.Compare(projection.Member, "shipping", true) == 0) lst.Add(Convert.IsDBNull(row["shipping"]) ? null : (string)row["shipping"]);
						if (string.Compare(projection.Member, "amount_due", true) == 0) lst.Add(Convert.IsDBNull(row["amount_due"]) ? null : (string)row["amount_due"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api invoices
		///</Summary>
		///<returns>
		///List-IDAOİnvoices.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static List<IDAOİnvoices> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getbycriteria";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("invoices");
			MySqlDataAdapter sqlAdapter = new MySqlDataAdapter(command);
			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				string orderClause = GetSelectionOrder(listOrder);
				string skipClause = GetSelectionSkip(dataSkip);
				string takeClause = GetSelectionTake(dataTake);
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_ORDERCLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)orderClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_SKİPCLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)skipClause?? (object)DBNull.Value));
				command.Parameters.Add(new MySqlParameter("?P_TAKECLAUSE", MySqlDbType.VarChar, 50, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)takeClause?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);


				List<IDAOİnvoices> objList = new List<IDAOİnvoices>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOInvoices retObj = new DAOInvoices();
						retObj._id					 = Convert.IsDBNull(row["id"]) ? null : (string)row["id"];
						retObj._orderİd					 = Convert.IsDBNull(row["order_id"]) ? null : (string)row["order_id"];
						retObj._invoiceDate					 = Convert.IsDBNull(row["invoice_date"]) ? null : (string)row["invoice_date"];
						retObj._dueDate					 = Convert.IsDBNull(row["due_date"]) ? null : (string)row["due_date"];
						retObj._tax					 = Convert.IsDBNull(row["tax"]) ? null : (string)row["tax"];
						retObj._shipping					 = Convert.IsDBNull(row["shipping"]) ? null : (string)row["shipping"];
						retObj._amountDue					 = Convert.IsDBNull(row["amount_due"]) ? null : (string)row["amount_due"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? null : (string)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api invoices
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_getbycriteriacount";
			command.CommandType = CommandType.StoredProcedure;
			MySqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				string whereClause = GetSelectionCriteria(listCriterion);
				command.Parameters.Add(new MySqlParameter("?P_WHERECLAUSE", MySqlDbType.VarChar, 500, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)whereClause?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)(Int64) command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table invoices based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			MySqlCommand	command = new MySqlCommand();
			command.CommandText = "ctpr_invoices_updateone";
			command.CommandType = CommandType.StoredProcedure;
			command.Connection = _connectionProvider.Connection;

			try
			{
				command.Parameters.Add(new MySqlParameter("?P_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _id));
				command.Parameters.Add(new MySqlParameter("?P_ORDER_İD", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, _orderİd));
				command.Parameters.Add(new MySqlParameter("?P_İNVOİCE_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _invoiceDate));
				command.Parameters.Add(new MySqlParameter("?P_DUE_DATE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, _dueDate));
				command.Parameters.Add(new MySqlParameter("?P_TAX", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _tax));
				command.Parameters.Add(new MySqlParameter("?P_SHİPPİNG", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _shipping));
				command.Parameters.Add(new MySqlParameter("?P_AMOUNT_DUE", MySqlDbType.VarChar, 0, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, _amountDue));
				command.Parameters.Add(new MySqlParameter("?P_CTR_VERSİON", MySqlDbType.VarChar, 5, ParameterDirection.InputOutput, true, 5, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_id					 = Convert.IsDBNull(command.Parameters["?P_İD"].Value) ? null : (string)command.Parameters["?P_İD"].Value;
				_orderİd					 = Convert.IsDBNull(command.Parameters["?P_ORDER_İD"].Value) ? null : (string)command.Parameters["?P_ORDER_İD"].Value;
				_invoiceDate					 = Convert.IsDBNull(command.Parameters["?P_İNVOİCE_DATE"].Value) ? null : (string)command.Parameters["?P_İNVOİCE_DATE"].Value;
				_dueDate					 = Convert.IsDBNull(command.Parameters["?P_DUE_DATE"].Value) ? null : (string)command.Parameters["?P_DUE_DATE"].Value;
				_tax					 = Convert.IsDBNull(command.Parameters["?P_TAX"].Value) ? null : (string)command.Parameters["?P_TAX"].Value;
				_shipping					 = Convert.IsDBNull(command.Parameters["?P_SHİPPİNG"].Value) ? null : (string)command.Parameters["?P_SHİPPİNG"].Value;
				_amountDue					 = Convert.IsDBNull(command.Parameters["?P_AMOUNT_DUE"].Value) ? null : (string)command.Parameters["?P_AMOUNT_DUE"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["?P_CTR_VERSİON"].Value) ? null : (string)command.Parameters["?P_CTR_VERSİON"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties
		public string İd
		{
			get
			{
				return _id;
			}
			set
			{
				_id = value;
			}
		}
		public string Orderİd
		{
			get
			{
				return _orderİd;
			}
			set
			{
				_orderİd = value;
			}
		}
		public string İnvoiceDate
		{
			get
			{
				return _invoiceDate;
			}
			set
			{
				_invoiceDate = value;
			}
		}
		public string DueDate
		{
			get
			{
				return _dueDate;
			}
			set
			{
				_dueDate = value;
			}
		}
		public string Tax
		{
			get
			{
				return _tax;
			}
			set
			{
				_tax = value;
			}
		}
		public string Shipping
		{
			get
			{
				return _shipping;
			}
			set
			{
				_shipping = value;
			}
		}
		public string AmountDue
		{
			get
			{
				return _amountDue;
			}
			set
			{
				_amountDue = value;
			}
		}
		public string CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}
