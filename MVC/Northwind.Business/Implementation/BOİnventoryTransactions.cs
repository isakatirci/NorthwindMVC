/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOİnventoryTransactions.
	///It maintains a collection of BOPurchaseOrderDetails objects.
	///</Summary>
	public partial class BOInventoryTransactions : zNorthwindConn_BaseBusiness, IBOİnventoryTransactions, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _transactionType;
		protected string _transactionCreatedDate;
		protected string _transactionModifiedDate;
		protected string _productİd;
		protected string _quantity;
		protected string _purchaseOrderİd;
		protected string _customerOrderİd;
		protected string _comments;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOPurchaseOrderDetails> _boPurchaseOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IInventoryTransactionsRepository _iİnventoryTransactionsRepository;
		protected IPurchaseOrderDetailsRepository _iPurchaseOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOInventoryTransactions()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.SelectOne(id);
				_id = daoİnventoryTransactions.İd;
				_transactionType = daoİnventoryTransactions.TransactionType;
				_transactionCreatedDate = daoİnventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoİnventoryTransactions.TransactionModifiedDate;
				_productİd = daoİnventoryTransactions.Productİd;
				_quantity = daoİnventoryTransactions.Quantity;
				_purchaseOrderİd = daoİnventoryTransactions.PurchaseOrderİd;
				_customerOrderİd = daoİnventoryTransactions.CustomerOrderİd;
				_comments = daoİnventoryTransactions.Comments;
				_ctrVersion = daoİnventoryTransactions.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOİnventoryTransactions
		///</parameters>
		protected internal BOInventoryTransactions(IDAOİnventoryTransactions daoİnventoryTransactions)
		{
			try
			{
				_id = daoİnventoryTransactions.İd;
				_transactionType = daoİnventoryTransactions.TransactionType;
				_transactionCreatedDate = daoİnventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoİnventoryTransactions.TransactionModifiedDate;
				_productİd = daoİnventoryTransactions.Productİd;
				_quantity = daoİnventoryTransactions.Quantity;
				_purchaseOrderİd = daoİnventoryTransactions.PurchaseOrderİd;
				_customerOrderİd = daoİnventoryTransactions.CustomerOrderİd;
				_comments = daoİnventoryTransactions.Comments;
				_ctrVersion = daoİnventoryTransactions.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new İnventoryTransactions record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.New();
			RegisterDataObject( _iİnventoryTransactionsRepository, _iİnventoryTransactionsRepository.BaseData(daoİnventoryTransactions));
			BeginTransaction( _iİnventoryTransactionsRepository, "savenewBOİnventoryTransactions");
			try
			{
				daoİnventoryTransactions.TransactionType = _transactionType;
				daoİnventoryTransactions.TransactionCreatedDate = _transactionCreatedDate;
				daoİnventoryTransactions.TransactionModifiedDate = _transactionModifiedDate;
				daoİnventoryTransactions.Productİd = _productİd;
				daoİnventoryTransactions.Quantity = _quantity;
				daoİnventoryTransactions.PurchaseOrderİd = _purchaseOrderİd;
				daoİnventoryTransactions.CustomerOrderİd = _customerOrderİd;
				daoİnventoryTransactions.Comments = _comments;
				_iİnventoryTransactionsRepository.Insert(daoİnventoryTransactions);
				CommitTransaction( _iİnventoryTransactionsRepository);
				Done(this);
				
				_id = daoİnventoryTransactions.İd;
				_transactionType = daoİnventoryTransactions.TransactionType;
				_transactionCreatedDate = daoİnventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoİnventoryTransactions.TransactionModifiedDate;
				_productİd = daoİnventoryTransactions.Productİd;
				_quantity = daoİnventoryTransactions.Quantity;
				_purchaseOrderİd = daoİnventoryTransactions.PurchaseOrderİd;
				_customerOrderİd = daoİnventoryTransactions.CustomerOrderİd;
				_comments = daoİnventoryTransactions.Comments;
				_ctrVersion = daoİnventoryTransactions.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "savenewBOİnventoryTransactions");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one İnventoryTransactions record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOİnventoryTransactions
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.New();
			RegisterDataObject(_iİnventoryTransactionsRepository, _iİnventoryTransactionsRepository.BaseData(daoİnventoryTransactions));
			BeginTransaction(_iİnventoryTransactionsRepository, "updateBOİnventoryTransactions");
			try
			{
				daoİnventoryTransactions.İd = _id;
				daoİnventoryTransactions.TransactionType = _transactionType;
				daoİnventoryTransactions.TransactionCreatedDate = _transactionCreatedDate;
				daoİnventoryTransactions.TransactionModifiedDate = _transactionModifiedDate;
				daoİnventoryTransactions.Productİd = _productİd;
				daoİnventoryTransactions.Quantity = _quantity;
				daoİnventoryTransactions.PurchaseOrderİd = _purchaseOrderİd;
				daoİnventoryTransactions.CustomerOrderİd = _customerOrderİd;
				daoİnventoryTransactions.Comments = _comments;
				daoİnventoryTransactions.CtrVersion = _ctrVersion;
				_iİnventoryTransactionsRepository.Update(daoİnventoryTransactions);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				
				_id = daoİnventoryTransactions.İd;
				_transactionType = daoİnventoryTransactions.TransactionType;
				_transactionCreatedDate = daoİnventoryTransactions.TransactionCreatedDate;
				_transactionModifiedDate = daoİnventoryTransactions.TransactionModifiedDate;
				_productİd = daoİnventoryTransactions.Productİd;
				_quantity = daoİnventoryTransactions.Quantity;
				_purchaseOrderİd = daoİnventoryTransactions.PurchaseOrderİd;
				_customerOrderİd = daoİnventoryTransactions.CustomerOrderİd;
				_comments = daoİnventoryTransactions.Comments;
				_ctrVersion = daoİnventoryTransactions.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "updateBOİnventoryTransactions");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one İnventoryTransactions record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.New();
			RegisterDataObject(_iİnventoryTransactionsRepository, _iİnventoryTransactionsRepository.BaseData(daoİnventoryTransactions));
			BeginTransaction(_iİnventoryTransactionsRepository, "deleteBOİnventoryTransactions");
			try
			{
				daoİnventoryTransactions.İd = _id;
				_iİnventoryTransactionsRepository.Delete(daoİnventoryTransactions);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "deleteBOİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///İnventoryTransactionsCollection
		///This method returns the collection of BOİnventoryTransactions objects
		///</Summary>
		///<returns>
		///IList[IBOİnventoryTransactions]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOİnventoryTransactions> İnventoryTransactionsCollection(IInventoryTransactionsRepository iİnventoryTransactionsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOİnventoryTransactions> boİnventoryTransactionsCollection = new List<IBOİnventoryTransactions>();
				IList<IDAOİnventoryTransactions> daoİnventoryTransactionsCollection = iİnventoryTransactionsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOİnventoryTransactions daoİnventoryTransactions in daoİnventoryTransactionsCollection)
					boİnventoryTransactionsCollection.Add(new BOInventoryTransactions(daoİnventoryTransactions));
				
				return boİnventoryTransactionsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///İnventoryTransactionsCollectionCount
		///This method returns the collection count of BOİnventoryTransactions objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 İnventoryTransactionsCollectionCount(IInventoryTransactionsRepository iİnventoryTransactionsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iİnventoryTransactionsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///İnventoryTransactionsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOİnventoryTransactions>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iİnventoryTransactionsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boİnventoryTransactionsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOİnventoryTransactions> daoİnventoryTransactionsCollection = _iİnventoryTransactionsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOİnventoryTransactions resdaoİnventoryTransactions in daoİnventoryTransactionsCollection)
					boİnventoryTransactionsCollection.Add((T)(object)new BOInventoryTransactions(resdaoİnventoryTransactions));
				
				return boİnventoryTransactionsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOİnventoryTransactions objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOİnventoryTransactions> boİnventoryTransactionsCollection = new List<IBOİnventoryTransactions>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iİnventoryTransactionsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailsCollection
		///This method returns its collection of BOPurchaseOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrderDetails]
		///</returns>
		///<parameters>
		///BOİnventoryTransactions
		///</parameters>
		public virtual IList<IBOPurchaseOrderDetails> PurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrderDetailsCollection == null)
					LoadPurchaseOrderDetailsCollection();
				return _boPurchaseOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailsCollection
		///This method loads the internal collection of BOPurchaseOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrderDetailsCollection = new List<IBOPurchaseOrderDetails>();
				IList<IDAOPurchaseOrderDetails> daoPurchaseOrderDetailsCollection = _iPurchaseOrderDetailsRepository.SelectAllByİnventoryİd(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrderDetails daoPurchaseOrderDetails in daoPurchaseOrderDetailsCollection)
					_boPurchaseOrderDetailsCollection.Add(new BOPurchaseOrderDetails(daoPurchaseOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetails
		///This method persists a BOPurchaseOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetails
		///</parameters>
		public virtual void AddPurchaseOrderDetails(IBOPurchaseOrderDetails boPurchaseOrderDetails)
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject(_iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.İd = boPurchaseOrderDetails.İd;
				daoPurchaseOrderDetails.PurchaseOrderİd = boPurchaseOrderDetails.PurchaseOrderİd;
				daoPurchaseOrderDetails.Productİd = boPurchaseOrderDetails.Productİd;
				daoPurchaseOrderDetails.Quantity = boPurchaseOrderDetails.Quantity;
				daoPurchaseOrderDetails.UnitCost = boPurchaseOrderDetails.UnitCost;
				daoPurchaseOrderDetails.DateReceived = boPurchaseOrderDetails.DateReceived;
				daoPurchaseOrderDetails.PostedToİnventory = boPurchaseOrderDetails.PostedToİnventory;
				daoPurchaseOrderDetails.İnventoryİd = _id;
				_iPurchaseOrderDetailsRepository.Insert(daoPurchaseOrderDetails);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetails = new BOPurchaseOrderDetails(daoPurchaseOrderDetails);
				if(_boPurchaseOrderDetailsCollection != null)
					_boPurchaseOrderDetailsCollection.Add(boPurchaseOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetails
		///This method deletes all BOPurchaseOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrderDetailsRepository, null);
			BeginTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
			try
			{
				_iPurchaseOrderDetailsRepository.DeleteAllByİnventoryİd(_id);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				if(_boPurchaseOrderDetailsCollection != null)
				{
					_boPurchaseOrderDetailsCollection.Clear();
					_boPurchaseOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInventoryTransactionsRepository İnventoryTransactionsRepository
		{
			set
			{
				_iİnventoryTransactionsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrderDetailsRepository PurchaseOrderDetailsRepository
		{
			set
			{
				_iPurchaseOrderDetailsRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionType
		{
			get
			{
				 return _transactionType;
			}
			set
			{
				_transactionType = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionCreatedDate
		{
			get
			{
				 return _transactionCreatedDate;
			}
			set
			{
				_transactionCreatedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string TransactionModifiedDate
		{
			get
			{
				 return _transactionModifiedDate;
			}
			set
			{
				_transactionModifiedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Productİd
		{
			get
			{
				 return _productİd;
			}
			set
			{
				_productİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Quantity
		{
			get
			{
				 return _quantity;
			}
			set
			{
				_quantity = value;
				_isDirty = true;
			}
		}
		
		public virtual string PurchaseOrderİd
		{
			get
			{
				 return _purchaseOrderİd;
			}
			set
			{
				_purchaseOrderİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string CustomerOrderİd
		{
			get
			{
				 return _customerOrderİd;
			}
			set
			{
				_customerOrderİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string Comments
		{
			get
			{
				 return _comments;
			}
			set
			{
				_comments = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iİnventoryTransactionsRepository;	}
			set {	İnventoryTransactionsRepository = (IInventoryTransactionsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
