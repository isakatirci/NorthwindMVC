/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:13
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Linq;
using System.Net;
using System.Net.Http;
using System.Web.Http;
using System.Web.Http.Description;
using System.Threading.Tasks;
using NorthwindRestApi.RestApi.SampleViewModels;
using NorthwindRestApi.Business;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.RestApi.SampleApiControllers
{
	public partial class OrdersQryController : ApiController
	{
		protected IOrdersQryRepository _iOrdersQryRepository;

            // GET: api/OrdersQry
        public async Task<IHttpActionResult> GetOrdersQry(int page = 0, int pageSize = 5)
        {
            int totalCount = 0;

            IList<OrdersQryVm> listVm = new List<OrdersQryVm>();
            var result = Task.Factory.StartNew(() => {

                ICriteria criteria = new Criteria<BOOrdersQry>(OrdersQryRepository);
                totalCount = criteria.Count();

                IList<BOOrdersQry> listBOs = criteria
                    .Add(new OrderBy("OrderID", OrderBy.OrderDirection.Ascending))
                    .Skip(page * pageSize)
                    .Take(pageSize)
                    .List<BOOrdersQry>();

                foreach (var bo in listBOs)
                    listVm.Add(new OrdersQryVm(bo));
                return listVm;
            });
            await result;

            return Ok(new { Data = result.Result, Paging = new { Total = totalCount, Limit = pageSize, CurrentPage = page, PageCount = (int) Math.Ceiling((double)totalCount / pageSize) } });
        }

        
        public IOrdersQryRepository OrdersQryRepository
        {
            get { return _iOrdersQryRepository ?? (_iOrdersQryRepository = RF.New().OrdersQryRepository); }
            set { _iOrdersQryRepository = value; }
        }
        

        protected override void Dispose(bool disposing)
        {
            if (disposing)
            {
            }
            base.Dispose(disposing);
        }
	}
}
