/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOPurchaseOrders.
	///It maintains a collection of BOİnventoryTransactions,BOPurchaseOrderDetails objects.
	///</Summary>
	public partial class BOPurchaseOrders : zNorthwindConn_BaseBusiness, IBOPurchaseOrders, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _supplierİd;
		protected string _createdBy;
		protected string _submittedDate;
		protected string _creationDate;
		protected string _statusİd;
		protected string _expectedDate;
		protected string _shippingFee;
		protected string _taxes;
		protected string _paymentDate;
		protected string _paymentAmount;
		protected string _paymentMethod;
		protected string _notes;
		protected string _approvedBy;
		protected string _approvedDate;
		protected string _submittedBy;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOİnventoryTransactions> _boİnventoryTransactionsCollection;
		List<IBOPurchaseOrderDetails> _boPurchaseOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IPurchaseOrdersRepository _iPurchaseOrdersRepository;
		protected IInventoryTransactionsRepository _iİnventoryTransactionsRepository;
		protected IPurchaseOrderDetailsRepository _iPurchaseOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOPurchaseOrders()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.SelectOne(id);
				_id = daoPurchaseOrders.İd;
				_supplierİd = daoPurchaseOrders.Supplierİd;
				_createdBy = daoPurchaseOrders.CreatedBy;
				_submittedDate = daoPurchaseOrders.SubmittedDate;
				_creationDate = daoPurchaseOrders.CreationDate;
				_statusİd = daoPurchaseOrders.Statusİd;
				_expectedDate = daoPurchaseOrders.ExpectedDate;
				_shippingFee = daoPurchaseOrders.ShippingFee;
				_taxes = daoPurchaseOrders.Taxes;
				_paymentDate = daoPurchaseOrders.PaymentDate;
				_paymentAmount = daoPurchaseOrders.PaymentAmount;
				_paymentMethod = daoPurchaseOrders.PaymentMethod;
				_notes = daoPurchaseOrders.Notes;
				_approvedBy = daoPurchaseOrders.ApprovedBy;
				_approvedDate = daoPurchaseOrders.ApprovedDate;
				_submittedBy = daoPurchaseOrders.SubmittedBy;
				_ctrVersion = daoPurchaseOrders.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOPurchaseOrders
		///</parameters>
		protected internal BOPurchaseOrders(IDAOPurchaseOrders daoPurchaseOrders)
		{
			try
			{
				_id = daoPurchaseOrders.İd;
				_supplierİd = daoPurchaseOrders.Supplierİd;
				_createdBy = daoPurchaseOrders.CreatedBy;
				_submittedDate = daoPurchaseOrders.SubmittedDate;
				_creationDate = daoPurchaseOrders.CreationDate;
				_statusİd = daoPurchaseOrders.Statusİd;
				_expectedDate = daoPurchaseOrders.ExpectedDate;
				_shippingFee = daoPurchaseOrders.ShippingFee;
				_taxes = daoPurchaseOrders.Taxes;
				_paymentDate = daoPurchaseOrders.PaymentDate;
				_paymentAmount = daoPurchaseOrders.PaymentAmount;
				_paymentMethod = daoPurchaseOrders.PaymentMethod;
				_notes = daoPurchaseOrders.Notes;
				_approvedBy = daoPurchaseOrders.ApprovedBy;
				_approvedDate = daoPurchaseOrders.ApprovedDate;
				_submittedBy = daoPurchaseOrders.SubmittedBy;
				_ctrVersion = daoPurchaseOrders.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new PurchaseOrders record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.New();
			RegisterDataObject( _iPurchaseOrdersRepository, _iPurchaseOrdersRepository.BaseData(daoPurchaseOrders));
			BeginTransaction( _iPurchaseOrdersRepository, "savenewBOPurchaseOrders");
			try
			{
				daoPurchaseOrders.Supplierİd = _supplierİd;
				daoPurchaseOrders.CreatedBy = _createdBy;
				daoPurchaseOrders.SubmittedDate = _submittedDate;
				daoPurchaseOrders.CreationDate = _creationDate;
				daoPurchaseOrders.Statusİd = _statusİd;
				daoPurchaseOrders.ExpectedDate = _expectedDate;
				daoPurchaseOrders.ShippingFee = _shippingFee;
				daoPurchaseOrders.Taxes = _taxes;
				daoPurchaseOrders.PaymentDate = _paymentDate;
				daoPurchaseOrders.PaymentAmount = _paymentAmount;
				daoPurchaseOrders.PaymentMethod = _paymentMethod;
				daoPurchaseOrders.Notes = _notes;
				daoPurchaseOrders.ApprovedBy = _approvedBy;
				daoPurchaseOrders.ApprovedDate = _approvedDate;
				daoPurchaseOrders.SubmittedBy = _submittedBy;
				_iPurchaseOrdersRepository.Insert(daoPurchaseOrders);
				CommitTransaction( _iPurchaseOrdersRepository);
				Done(this);
				
				_id = daoPurchaseOrders.İd;
				_supplierİd = daoPurchaseOrders.Supplierİd;
				_createdBy = daoPurchaseOrders.CreatedBy;
				_submittedDate = daoPurchaseOrders.SubmittedDate;
				_creationDate = daoPurchaseOrders.CreationDate;
				_statusİd = daoPurchaseOrders.Statusİd;
				_expectedDate = daoPurchaseOrders.ExpectedDate;
				_shippingFee = daoPurchaseOrders.ShippingFee;
				_taxes = daoPurchaseOrders.Taxes;
				_paymentDate = daoPurchaseOrders.PaymentDate;
				_paymentAmount = daoPurchaseOrders.PaymentAmount;
				_paymentMethod = daoPurchaseOrders.PaymentMethod;
				_notes = daoPurchaseOrders.Notes;
				_approvedBy = daoPurchaseOrders.ApprovedBy;
				_approvedDate = daoPurchaseOrders.ApprovedDate;
				_submittedBy = daoPurchaseOrders.SubmittedBy;
				_ctrVersion = daoPurchaseOrders.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "savenewBOPurchaseOrders");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one PurchaseOrders record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrders
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.New();
			RegisterDataObject(_iPurchaseOrdersRepository, _iPurchaseOrdersRepository.BaseData(daoPurchaseOrders));
			BeginTransaction(_iPurchaseOrdersRepository, "updateBOPurchaseOrders");
			try
			{
				daoPurchaseOrders.İd = _id;
				daoPurchaseOrders.Supplierİd = _supplierİd;
				daoPurchaseOrders.CreatedBy = _createdBy;
				daoPurchaseOrders.SubmittedDate = _submittedDate;
				daoPurchaseOrders.CreationDate = _creationDate;
				daoPurchaseOrders.Statusİd = _statusİd;
				daoPurchaseOrders.ExpectedDate = _expectedDate;
				daoPurchaseOrders.ShippingFee = _shippingFee;
				daoPurchaseOrders.Taxes = _taxes;
				daoPurchaseOrders.PaymentDate = _paymentDate;
				daoPurchaseOrders.PaymentAmount = _paymentAmount;
				daoPurchaseOrders.PaymentMethod = _paymentMethod;
				daoPurchaseOrders.Notes = _notes;
				daoPurchaseOrders.ApprovedBy = _approvedBy;
				daoPurchaseOrders.ApprovedDate = _approvedDate;
				daoPurchaseOrders.SubmittedBy = _submittedBy;
				daoPurchaseOrders.CtrVersion = _ctrVersion;
				_iPurchaseOrdersRepository.Update(daoPurchaseOrders);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				
				_id = daoPurchaseOrders.İd;
				_supplierİd = daoPurchaseOrders.Supplierİd;
				_createdBy = daoPurchaseOrders.CreatedBy;
				_submittedDate = daoPurchaseOrders.SubmittedDate;
				_creationDate = daoPurchaseOrders.CreationDate;
				_statusİd = daoPurchaseOrders.Statusİd;
				_expectedDate = daoPurchaseOrders.ExpectedDate;
				_shippingFee = daoPurchaseOrders.ShippingFee;
				_taxes = daoPurchaseOrders.Taxes;
				_paymentDate = daoPurchaseOrders.PaymentDate;
				_paymentAmount = daoPurchaseOrders.PaymentAmount;
				_paymentMethod = daoPurchaseOrders.PaymentMethod;
				_notes = daoPurchaseOrders.Notes;
				_approvedBy = daoPurchaseOrders.ApprovedBy;
				_approvedDate = daoPurchaseOrders.ApprovedDate;
				_submittedBy = daoPurchaseOrders.SubmittedBy;
				_ctrVersion = daoPurchaseOrders.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "updateBOPurchaseOrders");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one PurchaseOrders record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.New();
			RegisterDataObject(_iPurchaseOrdersRepository, _iPurchaseOrdersRepository.BaseData(daoPurchaseOrders));
			BeginTransaction(_iPurchaseOrdersRepository, "deleteBOPurchaseOrders");
			try
			{
				daoPurchaseOrders.İd = _id;
				_iPurchaseOrdersRepository.Delete(daoPurchaseOrders);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "deleteBOPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///PurchaseOrdersCollection
		///This method returns the collection of BOPurchaseOrders objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrders]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOPurchaseOrders> PurchaseOrdersCollection(IPurchaseOrdersRepository iPurchaseOrdersRepository)
		{
			Doing(null);
			try
			{
				IList<IBOPurchaseOrders> boPurchaseOrdersCollection = new List<IBOPurchaseOrders>();
				IList<IDAOPurchaseOrders> daoPurchaseOrdersCollection = iPurchaseOrdersRepository.SelectAll();
				Done(null);
				
				foreach(IDAOPurchaseOrders daoPurchaseOrders in daoPurchaseOrdersCollection)
					boPurchaseOrdersCollection.Add(new BOPurchaseOrders(daoPurchaseOrders));
				
				return boPurchaseOrdersCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///PurchaseOrdersCollectionCount
		///This method returns the collection count of BOPurchaseOrders objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 PurchaseOrdersCollectionCount(IPurchaseOrdersRepository iPurchaseOrdersRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iPurchaseOrdersRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///PurchaseOrdersCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOPurchaseOrders>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iPurchaseOrdersRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boPurchaseOrdersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOPurchaseOrders> daoPurchaseOrdersCollection = _iPurchaseOrdersRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOPurchaseOrders resdaoPurchaseOrders in daoPurchaseOrdersCollection)
					boPurchaseOrdersCollection.Add((T)(object)new BOPurchaseOrders(resdaoPurchaseOrders));
				
				return boPurchaseOrdersCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOPurchaseOrders objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOPurchaseOrders> boPurchaseOrdersCollection = new List<IBOPurchaseOrders>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iPurchaseOrdersRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///İnventoryTransactionsCollection
		///This method returns its collection of BOİnventoryTransactions objects
		///</Summary>
		///<returns>
		///IList[IBOİnventoryTransactions]
		///</returns>
		///<parameters>
		///BOPurchaseOrders
		///</parameters>
		public virtual IList<IBOİnventoryTransactions> İnventoryTransactionsCollection()
		{
			Doing(this);
			try
			{
				if(_boİnventoryTransactionsCollection == null)
					LoadİnventoryTransactionsCollection();
				return _boİnventoryTransactionsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailsCollection
		///This method returns its collection of BOPurchaseOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrderDetails]
		///</returns>
		///<parameters>
		///BOPurchaseOrders
		///</parameters>
		public virtual IList<IBOPurchaseOrderDetails> PurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrderDetailsCollection == null)
					LoadPurchaseOrderDetailsCollection();
				return _boPurchaseOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadİnventoryTransactionsCollection
		///This method loads the internal collection of BOİnventoryTransactions objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadİnventoryTransactionsCollection()
		{
			Doing(this);
			try
			{
				_boİnventoryTransactionsCollection = new List<IBOİnventoryTransactions>();
				IList<IDAOİnventoryTransactions> daoİnventoryTransactionsCollection = _iİnventoryTransactionsRepository.SelectAllByPurchaseOrderİd(_id);
				Done(this);
				
				foreach(IDAOİnventoryTransactions daoİnventoryTransactions in daoİnventoryTransactionsCollection)
					_boİnventoryTransactionsCollection.Add(new BOInventoryTransactions(daoİnventoryTransactions));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddİnventoryTransactions
		///This method persists a BOİnventoryTransactions object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOİnventoryTransactions
		///</parameters>
		public virtual void AddİnventoryTransactions(IBOİnventoryTransactions boİnventoryTransactions)
		{
			Doing(this);
			IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.New();
			RegisterDataObject(_iİnventoryTransactionsRepository, _iİnventoryTransactionsRepository.BaseData(daoİnventoryTransactions));
			BeginTransaction(_iİnventoryTransactionsRepository, "addİnventoryTransactions");
			try
			{
				daoİnventoryTransactions.İd = boİnventoryTransactions.İd;
				daoİnventoryTransactions.TransactionType = boİnventoryTransactions.TransactionType;
				daoİnventoryTransactions.TransactionCreatedDate = boİnventoryTransactions.TransactionCreatedDate;
				daoİnventoryTransactions.TransactionModifiedDate = boİnventoryTransactions.TransactionModifiedDate;
				daoİnventoryTransactions.Productİd = boİnventoryTransactions.Productİd;
				daoİnventoryTransactions.Quantity = boİnventoryTransactions.Quantity;
				daoİnventoryTransactions.CustomerOrderİd = boİnventoryTransactions.CustomerOrderİd;
				daoİnventoryTransactions.Comments = boİnventoryTransactions.Comments;
				daoİnventoryTransactions.PurchaseOrderİd = _id;
				_iİnventoryTransactionsRepository.Insert(daoİnventoryTransactions);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boİnventoryTransactions = new BOInventoryTransactions(daoİnventoryTransactions);
				if(_boİnventoryTransactionsCollection != null)
					_boİnventoryTransactionsCollection.Add(boİnventoryTransactions);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "addİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllİnventoryTransactions
		///This method deletes all BOİnventoryTransactions objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllİnventoryTransactions()
		{
			Doing(this);
			RegisterDataObject(_iİnventoryTransactionsRepository, null);
			BeginTransaction(_iİnventoryTransactionsRepository, "deleteAllİnventoryTransactions");
			try
			{
				_iİnventoryTransactionsRepository.DeleteAllByPurchaseOrderİd(_id);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				if(_boİnventoryTransactionsCollection != null)
				{
					_boİnventoryTransactionsCollection.Clear();
					_boİnventoryTransactionsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "deleteAllİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailsCollection
		///This method loads the internal collection of BOPurchaseOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrderDetailsCollection = new List<IBOPurchaseOrderDetails>();
				IList<IDAOPurchaseOrderDetails> daoPurchaseOrderDetailsCollection = _iPurchaseOrderDetailsRepository.SelectAllByPurchaseOrderİd(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrderDetails daoPurchaseOrderDetails in daoPurchaseOrderDetailsCollection)
					_boPurchaseOrderDetailsCollection.Add(new BOPurchaseOrderDetails(daoPurchaseOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetails
		///This method persists a BOPurchaseOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetails
		///</parameters>
		public virtual void AddPurchaseOrderDetails(IBOPurchaseOrderDetails boPurchaseOrderDetails)
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject(_iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.İd = boPurchaseOrderDetails.İd;
				daoPurchaseOrderDetails.Productİd = boPurchaseOrderDetails.Productİd;
				daoPurchaseOrderDetails.Quantity = boPurchaseOrderDetails.Quantity;
				daoPurchaseOrderDetails.UnitCost = boPurchaseOrderDetails.UnitCost;
				daoPurchaseOrderDetails.DateReceived = boPurchaseOrderDetails.DateReceived;
				daoPurchaseOrderDetails.PostedToİnventory = boPurchaseOrderDetails.PostedToİnventory;
				daoPurchaseOrderDetails.İnventoryİd = boPurchaseOrderDetails.İnventoryİd;
				daoPurchaseOrderDetails.PurchaseOrderİd = _id;
				_iPurchaseOrderDetailsRepository.Insert(daoPurchaseOrderDetails);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetails = new BOPurchaseOrderDetails(daoPurchaseOrderDetails);
				if(_boPurchaseOrderDetailsCollection != null)
					_boPurchaseOrderDetailsCollection.Add(boPurchaseOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetails
		///This method deletes all BOPurchaseOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrderDetailsRepository, null);
			BeginTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
			try
			{
				_iPurchaseOrderDetailsRepository.DeleteAllByPurchaseOrderİd(_id);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				if(_boPurchaseOrderDetailsCollection != null)
				{
					_boPurchaseOrderDetailsCollection.Clear();
					_boPurchaseOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrdersRepository PurchaseOrdersRepository
		{
			set
			{
				_iPurchaseOrdersRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInventoryTransactionsRepository İnventoryTransactionsRepository
		{
			set
			{
				_iİnventoryTransactionsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrderDetailsRepository PurchaseOrderDetailsRepository
		{
			set
			{
				_iPurchaseOrderDetailsRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Supplierİd
		{
			get
			{
				 return _supplierİd;
			}
			set
			{
				_supplierİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string CreatedBy
		{
			get
			{
				 return _createdBy;
			}
			set
			{
				_createdBy = value;
				_isDirty = true;
			}
		}
		
		public virtual string SubmittedDate
		{
			get
			{
				 return _submittedDate;
			}
			set
			{
				_submittedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string CreationDate
		{
			get
			{
				 return _creationDate;
			}
			set
			{
				_creationDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string Statusİd
		{
			get
			{
				 return _statusİd;
			}
			set
			{
				_statusİd = value;
				_isDirty = true;
			}
		}
		
		public virtual string ExpectedDate
		{
			get
			{
				 return _expectedDate;
			}
			set
			{
				_expectedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string ShippingFee
		{
			get
			{
				 return _shippingFee;
			}
			set
			{
				_shippingFee = value;
				_isDirty = true;
			}
		}
		
		public virtual string Taxes
		{
			get
			{
				 return _taxes;
			}
			set
			{
				_taxes = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentDate
		{
			get
			{
				 return _paymentDate;
			}
			set
			{
				_paymentDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentAmount
		{
			get
			{
				 return _paymentAmount;
			}
			set
			{
				_paymentAmount = value;
				_isDirty = true;
			}
		}
		
		public virtual string PaymentMethod
		{
			get
			{
				 return _paymentMethod;
			}
			set
			{
				_paymentMethod = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual string ApprovedBy
		{
			get
			{
				 return _approvedBy;
			}
			set
			{
				_approvedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual string ApprovedDate
		{
			get
			{
				 return _approvedDate;
			}
			set
			{
				_approvedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual string SubmittedBy
		{
			get
			{
				 return _submittedBy;
			}
			set
			{
				_submittedBy = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iPurchaseOrdersRepository;	}
			set {	PurchaseOrdersRepository = (IPurchaseOrdersRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
