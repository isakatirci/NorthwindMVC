/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:11:04
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindTest2.Data.Interfaces;

namespace NorthwindTest2.Data
{
	public partial class DAOOrders : zNorthwindTest2Conn_BaseData, IDAOOrders
	{
		#region member variables
		protected Int32? _orderID;
		protected string _customerID;
		protected Int32? _employeeID;
		protected DateTime? _orderDate;
		protected DateTime? _requiredDate;
		protected DateTime? _shippedDate;
		protected Int32? _shipVia;
		protected decimal? _freight;
		protected string _shipName;
		protected string _shipAddress;
		protected string _shipCity;
		protected string _shipRegion;
		protected string _shipPostalCode;
		protected string _shipCountry;
		protected Int32? _ctrVersion;
		#endregion

		#region class methods
		public DAOOrders()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Orders based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOOrders
		///</returns>
		///<parameters>
		///Int32? orderID
		///</parameters>
		public static IDAOOrders SelectOne(Int32? orderID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)orderID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				DAOOrders retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOOrders();
					retObj._orderID					 = Convert.IsDBNull(dt.Rows[0]["OrderID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["OrderID"];
					retObj._customerID					 = Convert.IsDBNull(dt.Rows[0]["CustomerID"]) ? null : (string)dt.Rows[0]["CustomerID"];
					retObj._employeeID					 = Convert.IsDBNull(dt.Rows[0]["EmployeeID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EmployeeID"];
					retObj._orderDate					 = Convert.IsDBNull(dt.Rows[0]["OrderDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["OrderDate"];
					retObj._requiredDate					 = Convert.IsDBNull(dt.Rows[0]["RequiredDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["RequiredDate"];
					retObj._shippedDate					 = Convert.IsDBNull(dt.Rows[0]["ShippedDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["ShippedDate"];
					retObj._shipVia					 = Convert.IsDBNull(dt.Rows[0]["ShipVia"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ShipVia"];
					retObj._freight					 = Convert.IsDBNull(dt.Rows[0]["Freight"]) ? (decimal?)null : (decimal?)dt.Rows[0]["Freight"];
					retObj._shipName					 = Convert.IsDBNull(dt.Rows[0]["ShipName"]) ? null : (string)dt.Rows[0]["ShipName"];
					retObj._shipAddress					 = Convert.IsDBNull(dt.Rows[0]["ShipAddress"]) ? null : (string)dt.Rows[0]["ShipAddress"];
					retObj._shipCity					 = Convert.IsDBNull(dt.Rows[0]["ShipCity"]) ? null : (string)dt.Rows[0]["ShipCity"];
					retObj._shipRegion					 = Convert.IsDBNull(dt.Rows[0]["ShipRegion"]) ? null : (string)dt.Rows[0]["ShipRegion"];
					retObj._shipPostalCode					 = Convert.IsDBNull(dt.Rows[0]["ShipPostalCode"]) ? null : (string)dt.Rows[0]["ShipPostalCode"];
					retObj._shipCountry					 = Convert.IsDBNull(dt.Rows[0]["ShipCountry"]) ? null : (string)dt.Rows[0]["ShipCountry"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Orders based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Orders based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOOrders.
		///</returns>
		///<parameters>
		///string customerID
		///</parameters>
		public static IList<IDAOOrders> SelectAllByCustomerID(string customerID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllByCustomerID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._orderDate					 = Convert.IsDBNull(row["OrderDate"]) ? (DateTime?)null : (DateTime?)row["OrderDate"];
						retObj._requiredDate					 = Convert.IsDBNull(row["RequiredDate"]) ? (DateTime?)null : (DateTime?)row["RequiredDate"];
						retObj._shippedDate					 = Convert.IsDBNull(row["ShippedDate"]) ? (DateTime?)null : (DateTime?)row["ShippedDate"];
						retObj._shipVia					 = Convert.IsDBNull(row["ShipVia"]) ? (Int32?)null : (Int32?)row["ShipVia"];
						retObj._freight					 = Convert.IsDBNull(row["Freight"]) ? (decimal?)null : (decimal?)row["Freight"];
						retObj._shipName					 = Convert.IsDBNull(row["ShipName"]) ? null : (string)row["ShipName"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ShipAddress"]) ? null : (string)row["ShipAddress"];
						retObj._shipCity					 = Convert.IsDBNull(row["ShipCity"]) ? null : (string)row["ShipCity"];
						retObj._shipRegion					 = Convert.IsDBNull(row["ShipRegion"]) ? null : (string)row["ShipRegion"];
						retObj._shipPostalCode					 = Convert.IsDBNull(row["ShipPostalCode"]) ? null : (string)row["ShipPostalCode"];
						retObj._shipCountry					 = Convert.IsDBNull(row["ShipCountry"]) ? null : (string)row["ShipCountry"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string customerID
		///</parameters>
		public static Int32 SelectAllByCustomerIDCount(string customerID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllByCustomerIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, string customerID
		///</parameters>
		public static void DeleteAllByCustomerID(IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, string customerID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_DeleteAllByCustomerID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)customerID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Orders based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOOrders.
		///</returns>
		///<parameters>
		///Int32? employeeID
		///</parameters>
		public static IList<IDAOOrders> SelectAllByEmployeeID(Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllByEmployeeID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._orderDate					 = Convert.IsDBNull(row["OrderDate"]) ? (DateTime?)null : (DateTime?)row["OrderDate"];
						retObj._requiredDate					 = Convert.IsDBNull(row["RequiredDate"]) ? (DateTime?)null : (DateTime?)row["RequiredDate"];
						retObj._shippedDate					 = Convert.IsDBNull(row["ShippedDate"]) ? (DateTime?)null : (DateTime?)row["ShippedDate"];
						retObj._shipVia					 = Convert.IsDBNull(row["ShipVia"]) ? (Int32?)null : (Int32?)row["ShipVia"];
						retObj._freight					 = Convert.IsDBNull(row["Freight"]) ? (decimal?)null : (decimal?)row["Freight"];
						retObj._shipName					 = Convert.IsDBNull(row["ShipName"]) ? null : (string)row["ShipName"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ShipAddress"]) ? null : (string)row["ShipAddress"];
						retObj._shipCity					 = Convert.IsDBNull(row["ShipCity"]) ? null : (string)row["ShipCity"];
						retObj._shipRegion					 = Convert.IsDBNull(row["ShipRegion"]) ? null : (string)row["ShipRegion"];
						retObj._shipPostalCode					 = Convert.IsDBNull(row["ShipPostalCode"]) ? null : (string)row["ShipPostalCode"];
						retObj._shipCountry					 = Convert.IsDBNull(row["ShipCountry"]) ? null : (string)row["ShipCountry"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? employeeID
		///</parameters>
		public static Int32 SelectAllByEmployeeIDCount(Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllByEmployeeIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? employeeID
		///</parameters>
		public static void DeleteAllByEmployeeID(IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_DeleteAllByEmployeeID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Orders based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOOrders.
		///</returns>
		///<parameters>
		///Int32? shipVia
		///</parameters>
		public static IList<IDAOOrders> SelectAllByShipVia(Int32? shipVia)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllByShipVia;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ShipVia", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)shipVia?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._orderDate					 = Convert.IsDBNull(row["OrderDate"]) ? (DateTime?)null : (DateTime?)row["OrderDate"];
						retObj._requiredDate					 = Convert.IsDBNull(row["RequiredDate"]) ? (DateTime?)null : (DateTime?)row["RequiredDate"];
						retObj._shippedDate					 = Convert.IsDBNull(row["ShippedDate"]) ? (DateTime?)null : (DateTime?)row["ShippedDate"];
						retObj._shipVia					 = Convert.IsDBNull(row["ShipVia"]) ? (Int32?)null : (Int32?)row["ShipVia"];
						retObj._freight					 = Convert.IsDBNull(row["Freight"]) ? (decimal?)null : (decimal?)row["Freight"];
						retObj._shipName					 = Convert.IsDBNull(row["ShipName"]) ? null : (string)row["ShipName"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ShipAddress"]) ? null : (string)row["ShipAddress"];
						retObj._shipCity					 = Convert.IsDBNull(row["ShipCity"]) ? null : (string)row["ShipCity"];
						retObj._shipRegion					 = Convert.IsDBNull(row["ShipRegion"]) ? null : (string)row["ShipRegion"];
						retObj._shipPostalCode					 = Convert.IsDBNull(row["ShipPostalCode"]) ? null : (string)row["ShipPostalCode"];
						retObj._shipCountry					 = Convert.IsDBNull(row["ShipCountry"]) ? null : (string)row["ShipCountry"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? shipVia
		///</parameters>
		public static Int32 SelectAllByShipViaCount(Int32? shipVia)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllByShipViaCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ShipVia", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)shipVia?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Orders with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? shipVia
		///</parameters>
		public static void DeleteAllByShipVia(IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? shipVia)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_DeleteAllByShipVia;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ShipVia", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)shipVia?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Orders
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _orderID));
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_customerID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_employeeID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OrderDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_orderDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequiredDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requiredDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShippedDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shippedDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipVia", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_shipVia?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Freight", SqlDbType.Money, 8, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, (object)_freight?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipName", SqlDbType.NVarChar, 40, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipAddress", SqlDbType.NVarChar, 60, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipAddress?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipCity", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipCity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipRegion", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipRegion?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipPostalCode", SqlDbType.NVarChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipPostalCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipCountry", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipCountry?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_orderID					 = Convert.IsDBNull(command.Parameters["@OrderID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OrderID"].Value;
				_customerID					 = Convert.IsDBNull(command.Parameters["@CustomerID"].Value) ? null : (string)command.Parameters["@CustomerID"].Value;
				_employeeID					 = Convert.IsDBNull(command.Parameters["@EmployeeID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EmployeeID"].Value;
				_orderDate					 = Convert.IsDBNull(command.Parameters["@OrderDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@OrderDate"].Value;
				_requiredDate					 = Convert.IsDBNull(command.Parameters["@RequiredDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@RequiredDate"].Value;
				_shippedDate					 = Convert.IsDBNull(command.Parameters["@ShippedDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ShippedDate"].Value;
				_shipVia					 = Convert.IsDBNull(command.Parameters["@ShipVia"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ShipVia"].Value;
				_freight					 = Convert.IsDBNull(command.Parameters["@Freight"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Freight"].Value;
				_shipName					 = Convert.IsDBNull(command.Parameters["@ShipName"].Value) ? null : (string)command.Parameters["@ShipName"].Value;
				_shipAddress					 = Convert.IsDBNull(command.Parameters["@ShipAddress"].Value) ? null : (string)command.Parameters["@ShipAddress"].Value;
				_shipCity					 = Convert.IsDBNull(command.Parameters["@ShipCity"].Value) ? null : (string)command.Parameters["@ShipCity"].Value;
				_shipRegion					 = Convert.IsDBNull(command.Parameters["@ShipRegion"].Value) ? null : (string)command.Parameters["@ShipRegion"].Value;
				_shipPostalCode					 = Convert.IsDBNull(command.Parameters["@ShipPostalCode"].Value) ? null : (string)command.Parameters["@ShipPostalCode"].Value;
				_shipCountry					 = Convert.IsDBNull(command.Parameters["@ShipCountry"].Value) ? null : (string)command.Parameters["@ShipCountry"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Orders
		///</Summary>
		///<returns>
		///IList-IDAOOrders.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IDAOOrders> SelectAll()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._orderDate					 = Convert.IsDBNull(row["OrderDate"]) ? (DateTime?)null : (DateTime?)row["OrderDate"];
						retObj._requiredDate					 = Convert.IsDBNull(row["RequiredDate"]) ? (DateTime?)null : (DateTime?)row["RequiredDate"];
						retObj._shippedDate					 = Convert.IsDBNull(row["ShippedDate"]) ? (DateTime?)null : (DateTime?)row["ShippedDate"];
						retObj._shipVia					 = Convert.IsDBNull(row["ShipVia"]) ? (Int32?)null : (Int32?)row["ShipVia"];
						retObj._freight					 = Convert.IsDBNull(row["Freight"]) ? (decimal?)null : (decimal?)row["Freight"];
						retObj._shipName					 = Convert.IsDBNull(row["ShipName"]) ? null : (string)row["ShipName"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ShipAddress"]) ? null : (string)row["ShipAddress"];
						retObj._shipCity					 = Convert.IsDBNull(row["ShipCity"]) ? null : (string)row["ShipCity"];
						retObj._shipRegion					 = Convert.IsDBNull(row["ShipRegion"]) ? null : (string)row["ShipRegion"];
						retObj._shipPostalCode					 = Convert.IsDBNull(row["ShipPostalCode"]) ? null : (string)row["ShipPostalCode"];
						retObj._shipCountry					 = Convert.IsDBNull(row["ShipCountry"]) ? null : (string)row["ShipCountry"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiOrders
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrders_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "OrderID", true) == 0) lst.Add(Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"]);
						if (string.Compare(projection.Member, "CustomerID", true) == 0) lst.Add(Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"]);
						if (string.Compare(projection.Member, "EmployeeID", true) == 0) lst.Add(Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"]);
						if (string.Compare(projection.Member, "OrderDate", true) == 0) lst.Add(Convert.IsDBNull(row["OrderDate"]) ? (DateTime?)null : (DateTime?)row["OrderDate"]);
						if (string.Compare(projection.Member, "RequiredDate", true) == 0) lst.Add(Convert.IsDBNull(row["RequiredDate"]) ? (DateTime?)null : (DateTime?)row["RequiredDate"]);
						if (string.Compare(projection.Member, "ShippedDate", true) == 0) lst.Add(Convert.IsDBNull(row["ShippedDate"]) ? (DateTime?)null : (DateTime?)row["ShippedDate"]);
						if (string.Compare(projection.Member, "ShipVia", true) == 0) lst.Add(Convert.IsDBNull(row["ShipVia"]) ? (Int32?)null : (Int32?)row["ShipVia"]);
						if (string.Compare(projection.Member, "Freight", true) == 0) lst.Add(Convert.IsDBNull(row["Freight"]) ? (decimal?)null : (decimal?)row["Freight"]);
						if (string.Compare(projection.Member, "ShipName", true) == 0) lst.Add(Convert.IsDBNull(row["ShipName"]) ? null : (string)row["ShipName"]);
						if (string.Compare(projection.Member, "ShipAddress", true) == 0) lst.Add(Convert.IsDBNull(row["ShipAddress"]) ? null : (string)row["ShipAddress"]);
						if (string.Compare(projection.Member, "ShipCity", true) == 0) lst.Add(Convert.IsDBNull(row["ShipCity"]) ? null : (string)row["ShipCity"]);
						if (string.Compare(projection.Member, "ShipRegion", true) == 0) lst.Add(Convert.IsDBNull(row["ShipRegion"]) ? null : (string)row["ShipRegion"]);
						if (string.Compare(projection.Member, "ShipPostalCode", true) == 0) lst.Add(Convert.IsDBNull(row["ShipPostalCode"]) ? null : (string)row["ShipPostalCode"]);
						if (string.Compare(projection.Member, "ShipCountry", true) == 0) lst.Add(Convert.IsDBNull(row["ShipCountry"]) ? null : (string)row["ShipCountry"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Orders
		///</Summary>
		///<returns>
		///IList-IDAOOrders.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<IDAOOrders> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrders_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Orders");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOOrders> objList = new List<IDAOOrders>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOOrders retObj = new DAOOrders();
						retObj._orderID					 = Convert.IsDBNull(row["OrderID"]) ? (Int32?)null : (Int32?)row["OrderID"];
						retObj._customerID					 = Convert.IsDBNull(row["CustomerID"]) ? null : (string)row["CustomerID"];
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._orderDate					 = Convert.IsDBNull(row["OrderDate"]) ? (DateTime?)null : (DateTime?)row["OrderDate"];
						retObj._requiredDate					 = Convert.IsDBNull(row["RequiredDate"]) ? (DateTime?)null : (DateTime?)row["RequiredDate"];
						retObj._shippedDate					 = Convert.IsDBNull(row["ShippedDate"]) ? (DateTime?)null : (DateTime?)row["ShippedDate"];
						retObj._shipVia					 = Convert.IsDBNull(row["ShipVia"]) ? (Int32?)null : (Int32?)row["ShipVia"];
						retObj._freight					 = Convert.IsDBNull(row["Freight"]) ? (decimal?)null : (decimal?)row["Freight"];
						retObj._shipName					 = Convert.IsDBNull(row["ShipName"]) ? null : (string)row["ShipName"];
						retObj._shipAddress					 = Convert.IsDBNull(row["ShipAddress"]) ? null : (string)row["ShipAddress"];
						retObj._shipCity					 = Convert.IsDBNull(row["ShipCity"]) ? null : (string)row["ShipCity"];
						retObj._shipRegion					 = Convert.IsDBNull(row["ShipRegion"]) ? null : (string)row["ShipRegion"];
						retObj._shipPostalCode					 = Convert.IsDBNull(row["ShipPostalCode"]) ? null : (string)row["ShipPostalCode"];
						retObj._shipCountry					 = Convert.IsDBNull(row["ShipCountry"]) ? null : (string)row["ShipCountry"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Orders
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprOrders_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Orders based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprOrders_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@OrderID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_orderID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@CustomerID", SqlDbType.NChar, 5, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_customerID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_employeeID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@OrderDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_orderDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@RequiredDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_requiredDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShippedDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shippedDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipVia", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_shipVia?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Freight", SqlDbType.Money, 8, ParameterDirection.InputOutput, true, 19, 4, "", DataRowVersion.Proposed, (object)_freight?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipName", SqlDbType.NVarChar, 40, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipAddress", SqlDbType.NVarChar, 60, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipAddress?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipCity", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipCity?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipRegion", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipRegion?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipPostalCode", SqlDbType.NVarChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipPostalCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ShipCountry", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_shipCountry?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_ctrVersion?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

				_orderID					 = Convert.IsDBNull(command.Parameters["@OrderID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@OrderID"].Value;
				_customerID					 = Convert.IsDBNull(command.Parameters["@CustomerID"].Value) ? null : (string)command.Parameters["@CustomerID"].Value;
				_employeeID					 = Convert.IsDBNull(command.Parameters["@EmployeeID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EmployeeID"].Value;
				_orderDate					 = Convert.IsDBNull(command.Parameters["@OrderDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@OrderDate"].Value;
				_requiredDate					 = Convert.IsDBNull(command.Parameters["@RequiredDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@RequiredDate"].Value;
				_shippedDate					 = Convert.IsDBNull(command.Parameters["@ShippedDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@ShippedDate"].Value;
				_shipVia					 = Convert.IsDBNull(command.Parameters["@ShipVia"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ShipVia"].Value;
				_freight					 = Convert.IsDBNull(command.Parameters["@Freight"].Value) ? (decimal?)null : (decimal?)command.Parameters["@Freight"].Value;
				_shipName					 = Convert.IsDBNull(command.Parameters["@ShipName"].Value) ? null : (string)command.Parameters["@ShipName"].Value;
				_shipAddress					 = Convert.IsDBNull(command.Parameters["@ShipAddress"].Value) ? null : (string)command.Parameters["@ShipAddress"].Value;
				_shipCity					 = Convert.IsDBNull(command.Parameters["@ShipCity"].Value) ? null : (string)command.Parameters["@ShipCity"].Value;
				_shipRegion					 = Convert.IsDBNull(command.Parameters["@ShipRegion"].Value) ? null : (string)command.Parameters["@ShipRegion"].Value;
				_shipPostalCode					 = Convert.IsDBNull(command.Parameters["@ShipPostalCode"].Value) ? null : (string)command.Parameters["@ShipPostalCode"].Value;
				_shipCountry					 = Convert.IsDBNull(command.Parameters["@ShipCountry"].Value) ? null : (string)command.Parameters["@ShipCountry"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? OrderID
		{
			get
			{
				return _orderID;
			}
			set
			{
				_orderID = value;
			}
		}

		public string CustomerID
		{
			get
			{
				return _customerID;
			}
			set
			{
				_customerID = value;
			}
		}

		public Int32? EmployeeID
		{
			get
			{
				return _employeeID;
			}
			set
			{
				_employeeID = value;
			}
		}

		public DateTime? OrderDate
		{
			get
			{
				return _orderDate;
			}
			set
			{
				_orderDate = value;
			}
		}

		public DateTime? RequiredDate
		{
			get
			{
				return _requiredDate;
			}
			set
			{
				_requiredDate = value;
			}
		}

		public DateTime? ShippedDate
		{
			get
			{
				return _shippedDate;
			}
			set
			{
				_shippedDate = value;
			}
		}

		public Int32? ShipVia
		{
			get
			{
				return _shipVia;
			}
			set
			{
				_shipVia = value;
			}
		}

		public decimal? Freight
		{
			get
			{
				return _freight;
			}
			set
			{
				_freight = value;
			}
		}

		public string ShipName
		{
			get
			{
				return _shipName;
			}
			set
			{
				_shipName = value;
			}
		}

		public string ShipAddress
		{
			get
			{
				return _shipAddress;
			}
			set
			{
				_shipAddress = value;
			}
		}

		public string ShipCity
		{
			get
			{
				return _shipCity;
			}
			set
			{
				_shipCity = value;
			}
		}

		public string ShipRegion
		{
			get
			{
				return _shipRegion;
			}
			set
			{
				_shipRegion = value;
			}
		}

		public string ShipPostalCode
		{
			get
			{
				return _shipPostalCode;
			}
			set
			{
				_shipPostalCode = value;
			}
		}

		public string ShipCountry
		{
			get
			{
				return _shipCountry;
			}
			set
			{
				_shipCountry = value;
			}
		}

		public Int32? CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindTest2.Data
{
	public partial class InlineProcs
	{
		internal static string ctprOrders_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			,[ctr_version]
			FROM [dbo].[Orders]
			WHERE 
			[OrderID] = @OrderID
			";

		internal static string ctprOrders_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Orders]
			WHERE 
			[OrderID] = @OrderID
			";

		internal static string ctprOrders_SelectAllByCustomerID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			,[ctr_version]
			FROM [dbo].[Orders]
			WHERE 
			[CustomerID] = @CustomerID OR ([CustomerID] IS NULL AND @CustomerID IS NULL)
			";

		internal static string ctprOrders_SelectAllByCustomerIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Orders]
			WHERE 
			[CustomerID] = @CustomerID OR ([CustomerID] IS NULL AND @CustomerID IS NULL)
			";

		internal static string ctprOrders_DeleteAllByCustomerID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Orders]
			WHERE 
			[CustomerID] = @CustomerID OR ([CustomerID] IS NULL AND @CustomerID IS NULL)
			";

		internal static string ctprOrders_SelectAllByEmployeeID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			,[ctr_version]
			FROM [dbo].[Orders]
			WHERE 
			[EmployeeID] = @EmployeeID OR ([EmployeeID] IS NULL AND @EmployeeID IS NULL)
			";

		internal static string ctprOrders_SelectAllByEmployeeIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Orders]
			WHERE 
			[EmployeeID] = @EmployeeID OR ([EmployeeID] IS NULL AND @EmployeeID IS NULL)
			";

		internal static string ctprOrders_DeleteAllByEmployeeID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Orders]
			WHERE 
			[EmployeeID] = @EmployeeID OR ([EmployeeID] IS NULL AND @EmployeeID IS NULL)
			";

		internal static string ctprOrders_SelectAllByShipVia = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			,[ctr_version]
			FROM [dbo].[Orders]
			WHERE 
			[ShipVia] = @ShipVia OR ([ShipVia] IS NULL AND @ShipVia IS NULL)
			";

		internal static string ctprOrders_SelectAllByShipViaCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Orders]
			WHERE 
			[ShipVia] = @ShipVia OR ([ShipVia] IS NULL AND @ShipVia IS NULL)
			";

		internal static string ctprOrders_DeleteAllByShipVia = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Orders]
			WHERE 
			[ShipVia] = @ShipVia OR ([ShipVia] IS NULL AND @ShipVia IS NULL)
			";

		internal static string ctprOrders_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Orders]
			(
			[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			)
			VALUES
			(
			@CustomerID
			,@EmployeeID
			,@OrderDate
			,@RequiredDate
			,@ShippedDate
			,@ShipVia
			,@Freight
			,@ShipName
			,@ShipAddress
			,@ShipCity
			,@ShipRegion
			,@ShipPostalCode
			,@ShipCountry
			)
			SELECT 
			@OrderID = [OrderID]
			,@CustomerID = [CustomerID]
			,@EmployeeID = [EmployeeID]
			,@OrderDate = [OrderDate]
			,@RequiredDate = [RequiredDate]
			,@ShippedDate = [ShippedDate]
			,@ShipVia = [ShipVia]
			,@Freight = [Freight]
			,@ShipName = [ShipName]
			,@ShipAddress = [ShipAddress]
			,@ShipCity = [ShipCity]
			,@ShipRegion = [ShipRegion]
			,@ShipPostalCode = [ShipPostalCode]
			,@ShipCountry = [ShipCountry]
			,@ctr_version = [ctr_version]
			FROM [dbo].[Orders]
			WHERE 
			[OrderID] = SCOPE_IDENTITY()
			";

		internal static string ctprOrders_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[OrderID]
			,[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			,[ctr_version]
			FROM [dbo].[Orders]
			";

		internal static string ctprOrders_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Orders]
			";

		internal static string ctprOrders_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Orders]
			##CRITERIA##
			";

		internal static string ctprOrders_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[OrderID]
			,[CustomerID]
			,[EmployeeID]
			,[OrderDate]
			,[RequiredDate]
			,[ShippedDate]
			,[ShipVia]
			,[Freight]
			,[ShipName]
			,[ShipAddress]
			,[ShipCity]
			,[ShipRegion]
			,[ShipPostalCode]
			,[ShipCountry]
			,[ctr_version]
			FROM [dbo].[Orders]
			##CRITERIA##
			";

		internal static string ctprOrders_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Orders]
			##CRITERIA##
			";

		internal static string ctprOrders_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			--data optimistic concurrency handling ----------------------------
			DECLARE @currVersion INT
			SELECT @currVersion = [ctr_version] FROM [dbo].[Orders]
			WHERE [OrderID] = @OrderID
			
			IF @currVersion > @ctr_version
			RAISERROR('data concurrency issue updating this record, possible stale data. %s', 16, 1, 
			'[dbo].[Orders] WHERE WHERE [OrderID] = @OrderID')
			
			IF @currVersion IS NULL
			RAISERROR('data concurrency issue updating this record, record not available (not found). %s', 16, 1, 
			'[dbo].[Orders] WHERE WHERE [OrderID] = @OrderID')
			
			SET @ctr_version = @currVersion  + 1 
			-------------------------------------------------------------------
			UPDATE [dbo].[Orders]
			SET
			[CustomerID] = @CustomerID
			,[EmployeeID] = @EmployeeID
			,[OrderDate] = @OrderDate
			,[RequiredDate] = @RequiredDate
			,[ShippedDate] = @ShippedDate
			,[ShipVia] = @ShipVia
			,[Freight] = @Freight
			,[ShipName] = @ShipName
			,[ShipAddress] = @ShipAddress
			,[ShipCity] = @ShipCity
			,[ShipRegion] = @ShipRegion
			,[ShipPostalCode] = @ShipPostalCode
			,[ShipCountry] = @ShipCountry
			,[ctr_version] = @ctr_version
			WHERE 
			[OrderID] = @OrderID
			SELECT 
			@OrderID = [OrderID]
			,@CustomerID = [CustomerID]
			,@EmployeeID = [EmployeeID]
			,@OrderDate = [OrderDate]
			,@RequiredDate = [RequiredDate]
			,@ShippedDate = [ShippedDate]
			,@ShipVia = [ShipVia]
			,@Freight = [Freight]
			,@ShipName = [ShipName]
			,@ShipAddress = [ShipAddress]
			,@ShipCity = [ShipCity]
			,@ShipRegion = [ShipRegion]
			,@ShipPostalCode = [ShipPostalCode]
			,@ShipCountry = [ShipCountry]
			,@ctr_version = [ctr_version]
			FROM [dbo].[Orders]
			WHERE 
			[OrderID] = @OrderID
			";

	}
}
#endregion
