/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:11:04
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindTest2.Data.Interfaces;

namespace NorthwindTest2.Data
{
	public partial class DAOEmployeeTerritories : zNorthwindTest2Conn_BaseData, IDAOEmployeeTerritories
	{
		#region member variables
		protected Int32? _employeeID;
		protected string _territoryID;
		#endregion

		#region class methods
		public DAOEmployeeTerritories()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table EmployeeTerritories based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOEmployeeTerritories
		///</returns>
		///<parameters>
		///Int32? employeeID, string territoryID
		///</parameters>
		public static IDAOEmployeeTerritories SelectOne(Int32? employeeID, string territoryID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("EmployeeTerritories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)territoryID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				DAOEmployeeTerritories retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOEmployeeTerritories();
					retObj._employeeID					 = Convert.IsDBNull(dt.Rows[0]["EmployeeID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EmployeeID"];
					retObj._territoryID					 = Convert.IsDBNull(dt.Rows[0]["TerritoryID"]) ? null : (string)dt.Rows[0]["TerritoryID"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table EmployeeTerritories based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_employeeID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table EmployeeTerritories based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOEmployeeTerritories.
		///</returns>
		///<parameters>
		///Int32? employeeID
		///</parameters>
		public static IList<IDAOEmployeeTerritories> SelectAllByEmployeeID(Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectAllByEmployeeID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("EmployeeTerritories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployeeTerritories> objList = new List<IDAOEmployeeTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployeeTerritories retObj = new DAOEmployeeTerritories();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? employeeID
		///</parameters>
		public static Int32 SelectAllByEmployeeIDCount(Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectAllByEmployeeIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table EmployeeTerritories with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? employeeID
		///</parameters>
		public static void DeleteAllByEmployeeID(IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_DeleteAllByEmployeeID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table EmployeeTerritories based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOEmployeeTerritories.
		///</returns>
		///<parameters>
		///string territoryID
		///</parameters>
		public static IList<IDAOEmployeeTerritories> SelectAllByTerritoryID(string territoryID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectAllByTerritoryID;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("EmployeeTerritories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)territoryID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployeeTerritories> objList = new List<IDAOEmployeeTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployeeTerritories retObj = new DAOEmployeeTerritories();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///string territoryID
		///</parameters>
		public static Int32 SelectAllByTerritoryIDCount(string territoryID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectAllByTerritoryIDCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)territoryID?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table EmployeeTerritories with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, string territoryID
		///</parameters>
		public static void DeleteAllByTerritoryID(IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, string territoryID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_DeleteAllByTerritoryID;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.Input, false, 0, 0, "", DataRowVersion.Proposed, (object)territoryID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table EmployeeTerritories
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_employeeID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TerritoryID", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_territoryID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

				_employeeID					 = Convert.IsDBNull(command.Parameters["@EmployeeID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EmployeeID"].Value;
				_territoryID					 = Convert.IsDBNull(command.Parameters["@TerritoryID"].Value) ? null : (string)command.Parameters["@TerritoryID"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table EmployeeTerritories
		///</Summary>
		///<returns>
		///IList-IDAOEmployeeTerritories.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IDAOEmployeeTerritories> SelectAll()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("EmployeeTerritories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployeeTerritories> objList = new List<IDAOEmployeeTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployeeTerritories retObj = new DAOEmployeeTerritories();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployeeTerritories_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiEmployeeTerritories
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprEmployeeTerritories_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("EmployeeTerritories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "EmployeeID", true) == 0) lst.Add(Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"]);
						if (string.Compare(projection.Member, "TerritoryID", true) == 0) lst.Add(Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api EmployeeTerritories
		///</Summary>
		///<returns>
		///IList-IDAOEmployeeTerritories.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<IDAOEmployeeTerritories> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprEmployeeTerritories_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("EmployeeTerritories");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployeeTerritories> objList = new List<IDAOEmployeeTerritories>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployeeTerritories retObj = new DAOEmployeeTerritories();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._territoryID					 = Convert.IsDBNull(row["TerritoryID"]) ? null : (string)row["TerritoryID"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api EmployeeTerritories
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprEmployeeTerritories_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? EmployeeID
		{
			get
			{
				return _employeeID;
			}
			set
			{
				_employeeID = value;
			}
		}

		public string TerritoryID
		{
			get
			{
				return _territoryID;
			}
			set
			{
				_territoryID = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindTest2.Data
{
	public partial class InlineProcs
	{
		internal static string ctprEmployeeTerritories_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[TerritoryID]
			FROM [dbo].[EmployeeTerritories]
			WHERE 
			[EmployeeID] = @EmployeeID
			AND [TerritoryID] = @TerritoryID
			";

		internal static string ctprEmployeeTerritories_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[EmployeeTerritories]
			WHERE 
			[EmployeeID] = @EmployeeID
			AND [TerritoryID] = @TerritoryID
			";

		internal static string ctprEmployeeTerritories_SelectAllByEmployeeID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[TerritoryID]
			FROM [dbo].[EmployeeTerritories]
			WHERE 
			[EmployeeID] = @EmployeeID OR ([EmployeeID] IS NULL AND @EmployeeID IS NULL)
			";

		internal static string ctprEmployeeTerritories_SelectAllByEmployeeIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[EmployeeTerritories]
			WHERE 
			[EmployeeID] = @EmployeeID OR ([EmployeeID] IS NULL AND @EmployeeID IS NULL)
			";

		internal static string ctprEmployeeTerritories_DeleteAllByEmployeeID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[EmployeeTerritories]
			WHERE 
			[EmployeeID] = @EmployeeID OR ([EmployeeID] IS NULL AND @EmployeeID IS NULL)
			";

		internal static string ctprEmployeeTerritories_SelectAllByTerritoryID = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[TerritoryID]
			FROM [dbo].[EmployeeTerritories]
			WHERE 
			[TerritoryID] = @TerritoryID OR ([TerritoryID] IS NULL AND @TerritoryID IS NULL)
			";

		internal static string ctprEmployeeTerritories_SelectAllByTerritoryIDCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[EmployeeTerritories]
			WHERE 
			[TerritoryID] = @TerritoryID OR ([TerritoryID] IS NULL AND @TerritoryID IS NULL)
			";

		internal static string ctprEmployeeTerritories_DeleteAllByTerritoryID = @"
			
			-- delete all matching from the table
			DELETE [dbo].[EmployeeTerritories]
			WHERE 
			[TerritoryID] = @TerritoryID OR ([TerritoryID] IS NULL AND @TerritoryID IS NULL)
			";

		internal static string ctprEmployeeTerritories_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[EmployeeTerritories]
			(
			[EmployeeID]
			,[TerritoryID]
			)
			VALUES
			(
			@EmployeeID
			,@TerritoryID
			)
			SELECT 
			@EmployeeID = [EmployeeID]
			,@TerritoryID = [TerritoryID]
			FROM [dbo].[EmployeeTerritories]
			WHERE 
			[EmployeeID] = @EmployeeID
			AND [TerritoryID] = @TerritoryID
			";

		internal static string ctprEmployeeTerritories_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[TerritoryID]
			FROM [dbo].[EmployeeTerritories]
			";

		internal static string ctprEmployeeTerritories_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[EmployeeTerritories]
			";

		internal static string ctprEmployeeTerritories_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[EmployeeTerritories]
			##CRITERIA##
			";

		internal static string ctprEmployeeTerritories_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[EmployeeID]
			,[TerritoryID]
			FROM [dbo].[EmployeeTerritories]
			##CRITERIA##
			";

		internal static string ctprEmployeeTerritories_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[EmployeeTerritories]
			##CRITERIA##
			";

	}
}
#endregion
