/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOTerritories.
	///It maintains a collection of BOEmployeeTerritories objects.
	///</Summary>
	public partial class BOTerritories : zNorthwindRestApiConn_BaseBusiness, IBOTerritories, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _territoryID;
		protected string _territoryDescription;
		protected Int32? _regionID;
		protected Int32? _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOEmployeeTerritories> _boEmployeeTerritoriesCollection;
		/*********************************************/
		/*repositories*********************************/
		protected ITerritoriesRepository _iTerritoriesRepository;
		protected IEmployeeTerritoriesRepository _iEmployeeTerritoriesRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOTerritories()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string territoryID
		///</parameters>
		public void Init(string territoryID)
		{
			try
			{
				IDAOTerritories daoTerritories = _iTerritoriesRepository.SelectOne(territoryID);
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
				_ctrVersion = daoTerritories.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOTerritories
		///</parameters>
		protected internal BOTerritories(IDAOTerritories daoTerritories)
		{
			try
			{
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
				_ctrVersion = daoTerritories.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Territories record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOTerritories daoTerritories = _iTerritoriesRepository.New();
			RegisterDataObject( _iTerritoriesRepository, _iTerritoriesRepository.BaseData(daoTerritories));
			BeginTransaction( _iTerritoriesRepository, "savenewBOTerritories");
			try
			{
				daoTerritories.TerritoryID = _territoryID;
				daoTerritories.TerritoryDescription = _territoryDescription;
				daoTerritories.RegionID = _regionID;
				_iTerritoriesRepository.Insert(daoTerritories);
				CommitTransaction( _iTerritoriesRepository);
				Done(this);
				
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
				_ctrVersion = daoTerritories.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iTerritoriesRepository, "savenewBOTerritories");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Territories record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOTerritories
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOTerritories daoTerritories = _iTerritoriesRepository.New();
			RegisterDataObject(_iTerritoriesRepository, _iTerritoriesRepository.BaseData(daoTerritories));
			BeginTransaction(_iTerritoriesRepository, "updateBOTerritories");
			try
			{
				daoTerritories.TerritoryID = _territoryID;
				daoTerritories.TerritoryDescription = _territoryDescription;
				daoTerritories.RegionID = _regionID;
				daoTerritories.CtrVersion = _ctrVersion;
				_iTerritoriesRepository.Update(daoTerritories);
				CommitTransaction(_iTerritoriesRepository);
				Done(this);
				
				_territoryID = daoTerritories.TerritoryID;
				_territoryDescription = daoTerritories.TerritoryDescription;
				_regionID = daoTerritories.RegionID;
				_ctrVersion = daoTerritories.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iTerritoriesRepository, "updateBOTerritories");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Territories record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOTerritories daoTerritories = _iTerritoriesRepository.New();
			RegisterDataObject(_iTerritoriesRepository, _iTerritoriesRepository.BaseData(daoTerritories));
			BeginTransaction(_iTerritoriesRepository, "deleteBOTerritories");
			try
			{
				daoTerritories.TerritoryID = _territoryID;
				_iTerritoriesRepository.Delete(daoTerritories);
				CommitTransaction(_iTerritoriesRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iTerritoriesRepository, "deleteBOTerritories");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///TerritoriesCollection
		///This method returns the collection of BOTerritories objects
		///</Summary>
		///<returns>
		///IList[IBOTerritories]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOTerritories> TerritoriesCollection(ITerritoriesRepository iTerritoriesRepository)
		{
			Doing(null);
			try
			{
				IList<IBOTerritories> boTerritoriesCollection = new List<IBOTerritories>();
				IList<IDAOTerritories> daoTerritoriesCollection = iTerritoriesRepository.SelectAll();
				Done(null);
				
				foreach(IDAOTerritories daoTerritories in daoTerritoriesCollection)
					boTerritoriesCollection.Add(new BOTerritories(daoTerritories));
				
				return boTerritoriesCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///TerritoriesCollectionCount
		///This method returns the collection count of BOTerritories objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 TerritoriesCollectionCount(ITerritoriesRepository iTerritoriesRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iTerritoriesRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///TerritoriesCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOTerritories>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iTerritoriesRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boTerritoriesCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOTerritories> daoTerritoriesCollection = _iTerritoriesRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOTerritories resdaoTerritories in daoTerritoriesCollection)
					boTerritoriesCollection.Add((T)(object)new BOTerritories(resdaoTerritories));
				
				return boTerritoriesCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOTerritories objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOTerritories> boTerritoriesCollection = new List<IBOTerritories>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iTerritoriesRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///EmployeeTerritoriesCollection
		///This method returns its collection of BOEmployeeTerritories objects
		///</Summary>
		///<returns>
		///IList[IBOEmployeeTerritories]
		///</returns>
		///<parameters>
		///BOTerritories
		///</parameters>
		public virtual IList<IBOEmployeeTerritories> EmployeeTerritoriesCollection()
		{
			Doing(this);
			try
			{
				if(_boEmployeeTerritoriesCollection == null)
					LoadEmployeeTerritoriesCollection();
				return _boEmployeeTerritoriesCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadEmployeeTerritoriesCollection
		///This method loads the internal collection of BOEmployeeTerritories objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadEmployeeTerritoriesCollection()
		{
			Doing(this);
			try
			{
				_boEmployeeTerritoriesCollection = new List<IBOEmployeeTerritories>();
				IList<IDAOEmployeeTerritories> daoEmployeeTerritoriesCollection = _iEmployeeTerritoriesRepository.SelectAllByTerritoryID(_territoryID);
				Done(this);
				
				foreach(IDAOEmployeeTerritories daoEmployeeTerritories in daoEmployeeTerritoriesCollection)
					_boEmployeeTerritoriesCollection.Add(new BOEmployeeTerritories(daoEmployeeTerritories));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddEmployeeTerritories
		///This method persists a BOEmployeeTerritories object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOEmployeeTerritories
		///</parameters>
		public virtual void AddEmployeeTerritories(IBOEmployeeTerritories boEmployeeTerritories)
		{
			Doing(this);
			IDAOEmployeeTerritories daoEmployeeTerritories = _iEmployeeTerritoriesRepository.New();
			RegisterDataObject(_iEmployeeTerritoriesRepository, _iEmployeeTerritoriesRepository.BaseData(daoEmployeeTerritories));
			BeginTransaction(_iEmployeeTerritoriesRepository, "addEmployeeTerritories");
			try
			{
				daoEmployeeTerritories.EmployeeID = boEmployeeTerritories.EmployeeID;
				daoEmployeeTerritories.TerritoryID = _territoryID;
				_iEmployeeTerritoriesRepository.Insert(daoEmployeeTerritories);
				CommitTransaction(_iEmployeeTerritoriesRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boEmployeeTerritories = new BOEmployeeTerritories(daoEmployeeTerritories);
				if(_boEmployeeTerritoriesCollection != null)
					_boEmployeeTerritoriesCollection.Add(boEmployeeTerritories);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeeTerritoriesRepository, "addEmployeeTerritories");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllEmployeeTerritories
		///This method deletes all BOEmployeeTerritories objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllEmployeeTerritories()
		{
			Doing(this);
			RegisterDataObject(_iEmployeeTerritoriesRepository, null);
			BeginTransaction(_iEmployeeTerritoriesRepository, "deleteAllEmployeeTerritories");
			try
			{
				_iEmployeeTerritoriesRepository.DeleteAllByTerritoryID(_territoryID);
				CommitTransaction(_iEmployeeTerritoriesRepository);
				Done(this);
				if(_boEmployeeTerritoriesCollection != null)
				{
					_boEmployeeTerritoriesCollection.Clear();
					_boEmployeeTerritoriesCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iEmployeeTerritoriesRepository, "deleteAllEmployeeTerritories");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ITerritoriesRepository TerritoriesRepository
		{
			set
			{
				_iTerritoriesRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IEmployeeTerritoriesRepository EmployeeTerritoriesRepository
		{
			set
			{
				_iEmployeeTerritoriesRepository = value;
			}
		}
		
		public virtual string TerritoryID
		{
			get
			{
				 return _territoryID;
			}
			set
			{
				_territoryID = value;
				_isDirty = true;
			}
		}
		
		public virtual string TerritoryDescription
		{
			get
			{
				 return _territoryDescription;
			}
			set
			{
				_territoryDescription = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? RegionID
		{
			get
			{
				 return _regionID;
			}
			set
			{
				_regionID = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iTerritoriesRepository;	}
			set {	TerritoriesRepository = (ITerritoriesRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
