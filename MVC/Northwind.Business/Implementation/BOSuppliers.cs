/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSuppliers.
	///It maintains a collection of BOPurchaseOrders objects.
	///</Summary>
	public partial class BOSuppliers : zNorthwindConn_BaseBusiness, IBOSuppliers, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _id;
		protected string _company;
		protected string _lastName;
		protected string _firstName;
		protected string _emailAddress;
		protected string _jobTitle;
		protected string _businessPhone;
		protected string _homePhone;
		protected string _mobilePhone;
		protected string _faxNumber;
		protected string _address;
		protected string _city;
		protected string _stateProvince;
		protected string _zipPostalCode;
		protected string _countryRegion;
		protected string _webPage;
		protected string _notes;
		protected byte[] _attachments;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOPurchaseOrders> _boPurchaseOrdersCollection;
		/*********************************************/
		/*repositories*********************************/
		protected ISuppliersRepository _iSuppliersRepository;
		protected IPurchaseOrdersRepository _iPurchaseOrdersRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSuppliers()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOSuppliers daoSuppliers = _iSuppliersRepository.SelectOne(id);
				_id = daoSuppliers.İd;
				_company = daoSuppliers.Company;
				_lastName = daoSuppliers.LastName;
				_firstName = daoSuppliers.FirstName;
				_emailAddress = daoSuppliers.EmailAddress;
				_jobTitle = daoSuppliers.JobTitle;
				_businessPhone = daoSuppliers.BusinessPhone;
				_homePhone = daoSuppliers.HomePhone;
				_mobilePhone = daoSuppliers.MobilePhone;
				_faxNumber = daoSuppliers.FaxNumber;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_stateProvince = daoSuppliers.StateProvince;
				_zipPostalCode = daoSuppliers.ZipPostalCode;
				_countryRegion = daoSuppliers.CountryRegion;
				_webPage = daoSuppliers.WebPage;
				_notes = daoSuppliers.Notes;
				_attachments = daoSuppliers.Attachments;
				_ctrVersion = daoSuppliers.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSuppliers
		///</parameters>
		protected internal BOSuppliers(IDAOSuppliers daoSuppliers)
		{
			try
			{
				_id = daoSuppliers.İd;
				_company = daoSuppliers.Company;
				_lastName = daoSuppliers.LastName;
				_firstName = daoSuppliers.FirstName;
				_emailAddress = daoSuppliers.EmailAddress;
				_jobTitle = daoSuppliers.JobTitle;
				_businessPhone = daoSuppliers.BusinessPhone;
				_homePhone = daoSuppliers.HomePhone;
				_mobilePhone = daoSuppliers.MobilePhone;
				_faxNumber = daoSuppliers.FaxNumber;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_stateProvince = daoSuppliers.StateProvince;
				_zipPostalCode = daoSuppliers.ZipPostalCode;
				_countryRegion = daoSuppliers.CountryRegion;
				_webPage = daoSuppliers.WebPage;
				_notes = daoSuppliers.Notes;
				_attachments = daoSuppliers.Attachments;
				_ctrVersion = daoSuppliers.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Suppliers record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOSuppliers daoSuppliers = _iSuppliersRepository.New();
			RegisterDataObject( _iSuppliersRepository, _iSuppliersRepository.BaseData(daoSuppliers));
			BeginTransaction( _iSuppliersRepository, "savenewBOSuppliers");
			try
			{
				daoSuppliers.Company = _company;
				daoSuppliers.LastName = _lastName;
				daoSuppliers.FirstName = _firstName;
				daoSuppliers.EmailAddress = _emailAddress;
				daoSuppliers.JobTitle = _jobTitle;
				daoSuppliers.BusinessPhone = _businessPhone;
				daoSuppliers.HomePhone = _homePhone;
				daoSuppliers.MobilePhone = _mobilePhone;
				daoSuppliers.FaxNumber = _faxNumber;
				daoSuppliers.Address = _address;
				daoSuppliers.City = _city;
				daoSuppliers.StateProvince = _stateProvince;
				daoSuppliers.ZipPostalCode = _zipPostalCode;
				daoSuppliers.CountryRegion = _countryRegion;
				daoSuppliers.WebPage = _webPage;
				daoSuppliers.Notes = _notes;
				daoSuppliers.Attachments = _attachments;
				_iSuppliersRepository.Insert(daoSuppliers);
				CommitTransaction( _iSuppliersRepository);
				Done(this);
				
				_id = daoSuppliers.İd;
				_company = daoSuppliers.Company;
				_lastName = daoSuppliers.LastName;
				_firstName = daoSuppliers.FirstName;
				_emailAddress = daoSuppliers.EmailAddress;
				_jobTitle = daoSuppliers.JobTitle;
				_businessPhone = daoSuppliers.BusinessPhone;
				_homePhone = daoSuppliers.HomePhone;
				_mobilePhone = daoSuppliers.MobilePhone;
				_faxNumber = daoSuppliers.FaxNumber;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_stateProvince = daoSuppliers.StateProvince;
				_zipPostalCode = daoSuppliers.ZipPostalCode;
				_countryRegion = daoSuppliers.CountryRegion;
				_webPage = daoSuppliers.WebPage;
				_notes = daoSuppliers.Notes;
				_attachments = daoSuppliers.Attachments;
				_ctrVersion = daoSuppliers.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSuppliersRepository, "savenewBOSuppliers");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Suppliers record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOSuppliers
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOSuppliers daoSuppliers = _iSuppliersRepository.New();
			RegisterDataObject(_iSuppliersRepository, _iSuppliersRepository.BaseData(daoSuppliers));
			BeginTransaction(_iSuppliersRepository, "updateBOSuppliers");
			try
			{
				daoSuppliers.İd = _id;
				daoSuppliers.Company = _company;
				daoSuppliers.LastName = _lastName;
				daoSuppliers.FirstName = _firstName;
				daoSuppliers.EmailAddress = _emailAddress;
				daoSuppliers.JobTitle = _jobTitle;
				daoSuppliers.BusinessPhone = _businessPhone;
				daoSuppliers.HomePhone = _homePhone;
				daoSuppliers.MobilePhone = _mobilePhone;
				daoSuppliers.FaxNumber = _faxNumber;
				daoSuppliers.Address = _address;
				daoSuppliers.City = _city;
				daoSuppliers.StateProvince = _stateProvince;
				daoSuppliers.ZipPostalCode = _zipPostalCode;
				daoSuppliers.CountryRegion = _countryRegion;
				daoSuppliers.WebPage = _webPage;
				daoSuppliers.Notes = _notes;
				daoSuppliers.Attachments = _attachments;
				daoSuppliers.CtrVersion = _ctrVersion;
				_iSuppliersRepository.Update(daoSuppliers);
				CommitTransaction(_iSuppliersRepository);
				Done(this);
				
				_id = daoSuppliers.İd;
				_company = daoSuppliers.Company;
				_lastName = daoSuppliers.LastName;
				_firstName = daoSuppliers.FirstName;
				_emailAddress = daoSuppliers.EmailAddress;
				_jobTitle = daoSuppliers.JobTitle;
				_businessPhone = daoSuppliers.BusinessPhone;
				_homePhone = daoSuppliers.HomePhone;
				_mobilePhone = daoSuppliers.MobilePhone;
				_faxNumber = daoSuppliers.FaxNumber;
				_address = daoSuppliers.Address;
				_city = daoSuppliers.City;
				_stateProvince = daoSuppliers.StateProvince;
				_zipPostalCode = daoSuppliers.ZipPostalCode;
				_countryRegion = daoSuppliers.CountryRegion;
				_webPage = daoSuppliers.WebPage;
				_notes = daoSuppliers.Notes;
				_attachments = daoSuppliers.Attachments;
				_ctrVersion = daoSuppliers.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSuppliersRepository, "updateBOSuppliers");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Suppliers record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOSuppliers daoSuppliers = _iSuppliersRepository.New();
			RegisterDataObject(_iSuppliersRepository, _iSuppliersRepository.BaseData(daoSuppliers));
			BeginTransaction(_iSuppliersRepository, "deleteBOSuppliers");
			try
			{
				daoSuppliers.İd = _id;
				_iSuppliersRepository.Delete(daoSuppliers);
				CommitTransaction(_iSuppliersRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iSuppliersRepository, "deleteBOSuppliers");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///SuppliersCollection
		///This method returns the collection of BOSuppliers objects
		///</Summary>
		///<returns>
		///IList[IBOSuppliers]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOSuppliers> SuppliersCollection(ISuppliersRepository iSuppliersRepository)
		{
			Doing(null);
			try
			{
				IList<IBOSuppliers> boSuppliersCollection = new List<IBOSuppliers>();
				IList<IDAOSuppliers> daoSuppliersCollection = iSuppliersRepository.SelectAll();
				Done(null);
				
				foreach(IDAOSuppliers daoSuppliers in daoSuppliersCollection)
					boSuppliersCollection.Add(new BOSuppliers(daoSuppliers));
				
				return boSuppliersCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SuppliersCollectionCount
		///This method returns the collection count of BOSuppliers objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SuppliersCollectionCount(ISuppliersRepository iSuppliersRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iSuppliersRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///SuppliersCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOSuppliers>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iSuppliersRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSuppliersCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOSuppliers> daoSuppliersCollection = _iSuppliersRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOSuppliers resdaoSuppliers in daoSuppliersCollection)
					boSuppliersCollection.Add((T)(object)new BOSuppliers(resdaoSuppliers));
				
				return boSuppliersCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOSuppliers objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOSuppliers> boSuppliersCollection = new List<IBOSuppliers>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iSuppliersRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///PurchaseOrdersCollection
		///This method returns its collection of BOPurchaseOrders objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrders]
		///</returns>
		///<parameters>
		///BOSuppliers
		///</parameters>
		public virtual IList<IBOPurchaseOrders> PurchaseOrdersCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrdersCollection == null)
					LoadPurchaseOrdersCollection();
				return _boPurchaseOrdersCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadPurchaseOrdersCollection
		///This method loads the internal collection of BOPurchaseOrders objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrdersCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrdersCollection = new List<IBOPurchaseOrders>();
				IList<IDAOPurchaseOrders> daoPurchaseOrdersCollection = _iPurchaseOrdersRepository.SelectAllBySupplierİd(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrders daoPurchaseOrders in daoPurchaseOrdersCollection)
					_boPurchaseOrdersCollection.Add(new BOPurchaseOrders(daoPurchaseOrders));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrders
		///This method persists a BOPurchaseOrders object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrders
		///</parameters>
		public virtual void AddPurchaseOrders(IBOPurchaseOrders boPurchaseOrders)
		{
			Doing(this);
			IDAOPurchaseOrders daoPurchaseOrders = _iPurchaseOrdersRepository.New();
			RegisterDataObject(_iPurchaseOrdersRepository, _iPurchaseOrdersRepository.BaseData(daoPurchaseOrders));
			BeginTransaction(_iPurchaseOrdersRepository, "addPurchaseOrders");
			try
			{
				daoPurchaseOrders.İd = boPurchaseOrders.İd;
				daoPurchaseOrders.CreatedBy = boPurchaseOrders.CreatedBy;
				daoPurchaseOrders.SubmittedDate = boPurchaseOrders.SubmittedDate;
				daoPurchaseOrders.CreationDate = boPurchaseOrders.CreationDate;
				daoPurchaseOrders.Statusİd = boPurchaseOrders.Statusİd;
				daoPurchaseOrders.ExpectedDate = boPurchaseOrders.ExpectedDate;
				daoPurchaseOrders.ShippingFee = boPurchaseOrders.ShippingFee;
				daoPurchaseOrders.Taxes = boPurchaseOrders.Taxes;
				daoPurchaseOrders.PaymentDate = boPurchaseOrders.PaymentDate;
				daoPurchaseOrders.PaymentAmount = boPurchaseOrders.PaymentAmount;
				daoPurchaseOrders.PaymentMethod = boPurchaseOrders.PaymentMethod;
				daoPurchaseOrders.Notes = boPurchaseOrders.Notes;
				daoPurchaseOrders.ApprovedBy = boPurchaseOrders.ApprovedBy;
				daoPurchaseOrders.ApprovedDate = boPurchaseOrders.ApprovedDate;
				daoPurchaseOrders.SubmittedBy = boPurchaseOrders.SubmittedBy;
				daoPurchaseOrders.Supplierİd = _id;
				_iPurchaseOrdersRepository.Insert(daoPurchaseOrders);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrders = new BOPurchaseOrders(daoPurchaseOrders);
				if(_boPurchaseOrdersCollection != null)
					_boPurchaseOrdersCollection.Add(boPurchaseOrders);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "addPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrders
		///This method deletes all BOPurchaseOrders objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrders()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrdersRepository, null);
			BeginTransaction(_iPurchaseOrdersRepository, "deleteAllPurchaseOrders");
			try
			{
				_iPurchaseOrdersRepository.DeleteAllBySupplierİd(_id);
				CommitTransaction(_iPurchaseOrdersRepository);
				Done(this);
				if(_boPurchaseOrdersCollection != null)
				{
					_boPurchaseOrdersCollection.Clear();
					_boPurchaseOrdersCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrdersRepository, "deleteAllPurchaseOrders");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ISuppliersRepository SuppliersRepository
		{
			set
			{
				_iSuppliersRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrdersRepository PurchaseOrdersRepository
		{
			set
			{
				_iPurchaseOrdersRepository = value;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string Company
		{
			get
			{
				 return _company;
			}
			set
			{
				_company = value;
				_isDirty = true;
			}
		}
		
		public virtual string LastName
		{
			get
			{
				 return _lastName;
			}
			set
			{
				_lastName = value;
				_isDirty = true;
			}
		}
		
		public virtual string FirstName
		{
			get
			{
				 return _firstName;
			}
			set
			{
				_firstName = value;
				_isDirty = true;
			}
		}
		
		public virtual string EmailAddress
		{
			get
			{
				 return _emailAddress;
			}
			set
			{
				_emailAddress = value;
				_isDirty = true;
			}
		}
		
		public virtual string JobTitle
		{
			get
			{
				 return _jobTitle;
			}
			set
			{
				_jobTitle = value;
				_isDirty = true;
			}
		}
		
		public virtual string BusinessPhone
		{
			get
			{
				 return _businessPhone;
			}
			set
			{
				_businessPhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string HomePhone
		{
			get
			{
				 return _homePhone;
			}
			set
			{
				_homePhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string MobilePhone
		{
			get
			{
				 return _mobilePhone;
			}
			set
			{
				_mobilePhone = value;
				_isDirty = true;
			}
		}
		
		public virtual string FaxNumber
		{
			get
			{
				 return _faxNumber;
			}
			set
			{
				_faxNumber = value;
				_isDirty = true;
			}
		}
		
		public virtual string Address
		{
			get
			{
				 return _address;
			}
			set
			{
				_address = value;
				_isDirty = true;
			}
		}
		
		public virtual string City
		{
			get
			{
				 return _city;
			}
			set
			{
				_city = value;
				_isDirty = true;
			}
		}
		
		public virtual string StateProvince
		{
			get
			{
				 return _stateProvince;
			}
			set
			{
				_stateProvince = value;
				_isDirty = true;
			}
		}
		
		public virtual string ZipPostalCode
		{
			get
			{
				 return _zipPostalCode;
			}
			set
			{
				_zipPostalCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string CountryRegion
		{
			get
			{
				 return _countryRegion;
			}
			set
			{
				_countryRegion = value;
				_isDirty = true;
			}
		}
		
		public virtual string WebPage
		{
			get
			{
				 return _webPage;
			}
			set
			{
				_webPage = value;
				_isDirty = true;
			}
		}
		
		public virtual string Notes
		{
			get
			{
				 return _notes;
			}
			set
			{
				_notes = value;
				_isDirty = true;
			}
		}
		
		public virtual byte[] Attachments
		{
			get
			{
				 return _attachments;
			}
			set
			{
				_attachments = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iSuppliersRepository;	}
			set {	SuppliersRepository = (ISuppliersRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
