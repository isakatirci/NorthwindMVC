/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:12
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindRestApi.Data.Interfaces;

namespace NorthwindRestApi.Data
{
	public partial class DAOIdentityUser : zNorthwindRestApiConn_BaseData, IDAOIdentityUser
	{
		#region member variables
		protected Int32? _userId;
		protected string _email;
		protected bool? _emailConfirmed;
		protected string _passwordHash;
		protected string _securityStamp;
		protected string _phoneNumber;
		protected bool? _phoneNumberConfirmed;
		protected bool? _twoFactorEnabled;
		protected DateTime? _lockoutEndDateUtc;
		protected bool? _lockoutEnabled;
		protected Int32? _accessFailedCount;
		protected string _username;
		protected Int32? _ctrVersion;
		#endregion

		#region class methods
		public DAOIdentityUser()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table IdentityUser based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOIdentityUser
		///</returns>
		///<parameters>
		///Int32? userId
		///</parameters>
		public static IDAOIdentityUser SelectOne(Int32? userId)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIdentityUser_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("IdentityUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)userId?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				DAOIdentityUser retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOIdentityUser();
					retObj._userId					 = Convert.IsDBNull(dt.Rows[0]["UserId"]) ? (Int32?)null : (Int32?)dt.Rows[0]["UserId"];
					retObj._email					 = Convert.IsDBNull(dt.Rows[0]["Email"]) ? null : (string)dt.Rows[0]["Email"];
					retObj._emailConfirmed					 = Convert.IsDBNull(dt.Rows[0]["EmailConfirmed"]) ? (bool?)null : (bool?)dt.Rows[0]["EmailConfirmed"];
					retObj._passwordHash					 = Convert.IsDBNull(dt.Rows[0]["PasswordHash"]) ? null : (string)dt.Rows[0]["PasswordHash"];
					retObj._securityStamp					 = Convert.IsDBNull(dt.Rows[0]["SecurityStamp"]) ? null : (string)dt.Rows[0]["SecurityStamp"];
					retObj._phoneNumber					 = Convert.IsDBNull(dt.Rows[0]["PhoneNumber"]) ? null : (string)dt.Rows[0]["PhoneNumber"];
					retObj._phoneNumberConfirmed					 = Convert.IsDBNull(dt.Rows[0]["PhoneNumberConfirmed"]) ? (bool?)null : (bool?)dt.Rows[0]["PhoneNumberConfirmed"];
					retObj._twoFactorEnabled					 = Convert.IsDBNull(dt.Rows[0]["TwoFactorEnabled"]) ? (bool?)null : (bool?)dt.Rows[0]["TwoFactorEnabled"];
					retObj._lockoutEndDateUtc					 = Convert.IsDBNull(dt.Rows[0]["LockoutEndDateUtc"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["LockoutEndDateUtc"];
					retObj._lockoutEnabled					 = Convert.IsDBNull(dt.Rows[0]["LockoutEnabled"]) ? (bool?)null : (bool?)dt.Rows[0]["LockoutEnabled"];
					retObj._accessFailedCount					 = Convert.IsDBNull(dt.Rows[0]["AccessFailedCount"]) ? (Int32?)null : (Int32?)dt.Rows[0]["AccessFailedCount"];
					retObj._username					 = Convert.IsDBNull(dt.Rows[0]["Username"]) ? null : (string)dt.Rows[0]["Username"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table IdentityUser based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIdentityUser_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table IdentityUser
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIdentityUser_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _userId));
				command.Parameters.Add(CtSqlParameter.Get("@Email", SqlDbType.NVarChar, 256, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_email?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmailConfirmed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_emailConfirmed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PasswordHash", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_passwordHash?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SecurityStamp", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_securityStamp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneNumber", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phoneNumber?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneNumberConfirmed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_phoneNumberConfirmed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TwoFactorEnabled", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_twoFactorEnabled?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LockoutEndDateUtc", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lockoutEndDateUtc?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LockoutEnabled", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_lockoutEnabled?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AccessFailedCount", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_accessFailedCount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Username", SqlDbType.NVarChar, 256, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_username?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_email					 = Convert.IsDBNull(command.Parameters["@Email"].Value) ? null : (string)command.Parameters["@Email"].Value;
				_emailConfirmed					 = Convert.IsDBNull(command.Parameters["@EmailConfirmed"].Value) ? (bool?)null : (bool?)command.Parameters["@EmailConfirmed"].Value;
				_passwordHash					 = Convert.IsDBNull(command.Parameters["@PasswordHash"].Value) ? null : (string)command.Parameters["@PasswordHash"].Value;
				_securityStamp					 = Convert.IsDBNull(command.Parameters["@SecurityStamp"].Value) ? null : (string)command.Parameters["@SecurityStamp"].Value;
				_phoneNumber					 = Convert.IsDBNull(command.Parameters["@PhoneNumber"].Value) ? null : (string)command.Parameters["@PhoneNumber"].Value;
				_phoneNumberConfirmed					 = Convert.IsDBNull(command.Parameters["@PhoneNumberConfirmed"].Value) ? (bool?)null : (bool?)command.Parameters["@PhoneNumberConfirmed"].Value;
				_twoFactorEnabled					 = Convert.IsDBNull(command.Parameters["@TwoFactorEnabled"].Value) ? (bool?)null : (bool?)command.Parameters["@TwoFactorEnabled"].Value;
				_lockoutEndDateUtc					 = Convert.IsDBNull(command.Parameters["@LockoutEndDateUtc"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LockoutEndDateUtc"].Value;
				_lockoutEnabled					 = Convert.IsDBNull(command.Parameters["@LockoutEnabled"].Value) ? (bool?)null : (bool?)command.Parameters["@LockoutEnabled"].Value;
				_accessFailedCount					 = Convert.IsDBNull(command.Parameters["@AccessFailedCount"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AccessFailedCount"].Value;
				_username					 = Convert.IsDBNull(command.Parameters["@Username"].Value) ? null : (string)command.Parameters["@Username"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table IdentityUser
		///</Summary>
		///<returns>
		///IList-IDAOIdentityUser.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IDAOIdentityUser> SelectAll()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIdentityUser_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("IdentityUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOIdentityUser> objList = new List<IDAOIdentityUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIdentityUser retObj = new DAOIdentityUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._emailConfirmed					 = Convert.IsDBNull(row["EmailConfirmed"]) ? (bool?)null : (bool?)row["EmailConfirmed"];
						retObj._passwordHash					 = Convert.IsDBNull(row["PasswordHash"]) ? null : (string)row["PasswordHash"];
						retObj._securityStamp					 = Convert.IsDBNull(row["SecurityStamp"]) ? null : (string)row["SecurityStamp"];
						retObj._phoneNumber					 = Convert.IsDBNull(row["PhoneNumber"]) ? null : (string)row["PhoneNumber"];
						retObj._phoneNumberConfirmed					 = Convert.IsDBNull(row["PhoneNumberConfirmed"]) ? (bool?)null : (bool?)row["PhoneNumberConfirmed"];
						retObj._twoFactorEnabled					 = Convert.IsDBNull(row["TwoFactorEnabled"]) ? (bool?)null : (bool?)row["TwoFactorEnabled"];
						retObj._lockoutEndDateUtc					 = Convert.IsDBNull(row["LockoutEndDateUtc"]) ? (DateTime?)null : (DateTime?)row["LockoutEndDateUtc"];
						retObj._lockoutEnabled					 = Convert.IsDBNull(row["LockoutEnabled"]) ? (bool?)null : (bool?)row["LockoutEnabled"];
						retObj._accessFailedCount					 = Convert.IsDBNull(row["AccessFailedCount"]) ? (Int32?)null : (Int32?)row["AccessFailedCount"];
						retObj._username					 = Convert.IsDBNull(row["Username"]) ? null : (string)row["Username"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIdentityUser_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiIdentityUser
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprIdentityUser_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("IdentityUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "UserId", true) == 0) lst.Add(Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"]);
						if (string.Compare(projection.Member, "Email", true) == 0) lst.Add(Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"]);
						if (string.Compare(projection.Member, "EmailConfirmed", true) == 0) lst.Add(Convert.IsDBNull(row["EmailConfirmed"]) ? (bool?)null : (bool?)row["EmailConfirmed"]);
						if (string.Compare(projection.Member, "PasswordHash", true) == 0) lst.Add(Convert.IsDBNull(row["PasswordHash"]) ? null : (string)row["PasswordHash"]);
						if (string.Compare(projection.Member, "SecurityStamp", true) == 0) lst.Add(Convert.IsDBNull(row["SecurityStamp"]) ? null : (string)row["SecurityStamp"]);
						if (string.Compare(projection.Member, "PhoneNumber", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneNumber"]) ? null : (string)row["PhoneNumber"]);
						if (string.Compare(projection.Member, "PhoneNumberConfirmed", true) == 0) lst.Add(Convert.IsDBNull(row["PhoneNumberConfirmed"]) ? (bool?)null : (bool?)row["PhoneNumberConfirmed"]);
						if (string.Compare(projection.Member, "TwoFactorEnabled", true) == 0) lst.Add(Convert.IsDBNull(row["TwoFactorEnabled"]) ? (bool?)null : (bool?)row["TwoFactorEnabled"]);
						if (string.Compare(projection.Member, "LockoutEndDateUtc", true) == 0) lst.Add(Convert.IsDBNull(row["LockoutEndDateUtc"]) ? (DateTime?)null : (DateTime?)row["LockoutEndDateUtc"]);
						if (string.Compare(projection.Member, "LockoutEnabled", true) == 0) lst.Add(Convert.IsDBNull(row["LockoutEnabled"]) ? (bool?)null : (bool?)row["LockoutEnabled"]);
						if (string.Compare(projection.Member, "AccessFailedCount", true) == 0) lst.Add(Convert.IsDBNull(row["AccessFailedCount"]) ? (Int32?)null : (Int32?)row["AccessFailedCount"]);
						if (string.Compare(projection.Member, "Username", true) == 0) lst.Add(Convert.IsDBNull(row["Username"]) ? null : (string)row["Username"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api IdentityUser
		///</Summary>
		///<returns>
		///IList-IDAOIdentityUser.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<IDAOIdentityUser> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprIdentityUser_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("IdentityUser");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOIdentityUser> objList = new List<IDAOIdentityUser>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOIdentityUser retObj = new DAOIdentityUser();
						retObj._userId					 = Convert.IsDBNull(row["UserId"]) ? (Int32?)null : (Int32?)row["UserId"];
						retObj._email					 = Convert.IsDBNull(row["Email"]) ? null : (string)row["Email"];
						retObj._emailConfirmed					 = Convert.IsDBNull(row["EmailConfirmed"]) ? (bool?)null : (bool?)row["EmailConfirmed"];
						retObj._passwordHash					 = Convert.IsDBNull(row["PasswordHash"]) ? null : (string)row["PasswordHash"];
						retObj._securityStamp					 = Convert.IsDBNull(row["SecurityStamp"]) ? null : (string)row["SecurityStamp"];
						retObj._phoneNumber					 = Convert.IsDBNull(row["PhoneNumber"]) ? null : (string)row["PhoneNumber"];
						retObj._phoneNumberConfirmed					 = Convert.IsDBNull(row["PhoneNumberConfirmed"]) ? (bool?)null : (bool?)row["PhoneNumberConfirmed"];
						retObj._twoFactorEnabled					 = Convert.IsDBNull(row["TwoFactorEnabled"]) ? (bool?)null : (bool?)row["TwoFactorEnabled"];
						retObj._lockoutEndDateUtc					 = Convert.IsDBNull(row["LockoutEndDateUtc"]) ? (DateTime?)null : (DateTime?)row["LockoutEndDateUtc"];
						retObj._lockoutEnabled					 = Convert.IsDBNull(row["LockoutEnabled"]) ? (bool?)null : (bool?)row["LockoutEnabled"];
						retObj._accessFailedCount					 = Convert.IsDBNull(row["AccessFailedCount"]) ? (Int32?)null : (Int32?)row["AccessFailedCount"];
						retObj._username					 = Convert.IsDBNull(row["Username"]) ? null : (string)row["Username"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api IdentityUser
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprIdentityUser_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table IdentityUser based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprIdentityUser_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@UserId", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_userId?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Email", SqlDbType.NVarChar, 256, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_email?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmailConfirmed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_emailConfirmed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PasswordHash", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_passwordHash?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@SecurityStamp", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_securityStamp?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneNumber", SqlDbType.NVarChar, -1, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_phoneNumber?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhoneNumberConfirmed", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_phoneNumberConfirmed?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TwoFactorEnabled", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_twoFactorEnabled?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LockoutEndDateUtc", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_lockoutEndDateUtc?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LockoutEnabled", SqlDbType.Bit, 1, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_lockoutEnabled?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@AccessFailedCount", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_accessFailedCount?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Username", SqlDbType.NVarChar, 256, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_username?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_ctrVersion?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

				_userId					 = Convert.IsDBNull(command.Parameters["@UserId"].Value) ? (Int32?)null : (Int32?)command.Parameters["@UserId"].Value;
				_email					 = Convert.IsDBNull(command.Parameters["@Email"].Value) ? null : (string)command.Parameters["@Email"].Value;
				_emailConfirmed					 = Convert.IsDBNull(command.Parameters["@EmailConfirmed"].Value) ? (bool?)null : (bool?)command.Parameters["@EmailConfirmed"].Value;
				_passwordHash					 = Convert.IsDBNull(command.Parameters["@PasswordHash"].Value) ? null : (string)command.Parameters["@PasswordHash"].Value;
				_securityStamp					 = Convert.IsDBNull(command.Parameters["@SecurityStamp"].Value) ? null : (string)command.Parameters["@SecurityStamp"].Value;
				_phoneNumber					 = Convert.IsDBNull(command.Parameters["@PhoneNumber"].Value) ? null : (string)command.Parameters["@PhoneNumber"].Value;
				_phoneNumberConfirmed					 = Convert.IsDBNull(command.Parameters["@PhoneNumberConfirmed"].Value) ? (bool?)null : (bool?)command.Parameters["@PhoneNumberConfirmed"].Value;
				_twoFactorEnabled					 = Convert.IsDBNull(command.Parameters["@TwoFactorEnabled"].Value) ? (bool?)null : (bool?)command.Parameters["@TwoFactorEnabled"].Value;
				_lockoutEndDateUtc					 = Convert.IsDBNull(command.Parameters["@LockoutEndDateUtc"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@LockoutEndDateUtc"].Value;
				_lockoutEnabled					 = Convert.IsDBNull(command.Parameters["@LockoutEnabled"].Value) ? (bool?)null : (bool?)command.Parameters["@LockoutEnabled"].Value;
				_accessFailedCount					 = Convert.IsDBNull(command.Parameters["@AccessFailedCount"].Value) ? (Int32?)null : (Int32?)command.Parameters["@AccessFailedCount"].Value;
				_username					 = Convert.IsDBNull(command.Parameters["@Username"].Value) ? null : (string)command.Parameters["@Username"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? UserId
		{
			get
			{
				return _userId;
			}
			set
			{
				_userId = value;
			}
		}

		public string Email
		{
			get
			{
				return _email;
			}
			set
			{
				_email = value;
			}
		}

		public bool? EmailConfirmed
		{
			get
			{
				return _emailConfirmed;
			}
			set
			{
				_emailConfirmed = value;
			}
		}

		public string PasswordHash
		{
			get
			{
				return _passwordHash;
			}
			set
			{
				_passwordHash = value;
			}
		}

		public string SecurityStamp
		{
			get
			{
				return _securityStamp;
			}
			set
			{
				_securityStamp = value;
			}
		}

		public string PhoneNumber
		{
			get
			{
				return _phoneNumber;
			}
			set
			{
				_phoneNumber = value;
			}
		}

		public bool? PhoneNumberConfirmed
		{
			get
			{
				return _phoneNumberConfirmed;
			}
			set
			{
				_phoneNumberConfirmed = value;
			}
		}

		public bool? TwoFactorEnabled
		{
			get
			{
				return _twoFactorEnabled;
			}
			set
			{
				_twoFactorEnabled = value;
			}
		}

		public DateTime? LockoutEndDateUtc
		{
			get
			{
				return _lockoutEndDateUtc;
			}
			set
			{
				_lockoutEndDateUtc = value;
			}
		}

		public bool? LockoutEnabled
		{
			get
			{
				return _lockoutEnabled;
			}
			set
			{
				_lockoutEnabled = value;
			}
		}

		public Int32? AccessFailedCount
		{
			get
			{
				return _accessFailedCount;
			}
			set
			{
				_accessFailedCount = value;
			}
		}

		public string Username
		{
			get
			{
				return _username;
			}
			set
			{
				_username = value;
			}
		}

		public Int32? CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindRestApi.Data
{
	public partial class InlineProcs
	{
		internal static string ctprIdentityUser_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[Email]
			,[EmailConfirmed]
			,[PasswordHash]
			,[SecurityStamp]
			,[PhoneNumber]
			,[PhoneNumberConfirmed]
			,[TwoFactorEnabled]
			,[LockoutEndDateUtc]
			,[LockoutEnabled]
			,[AccessFailedCount]
			,[Username]
			,[ctr_version]
			FROM [security].[IdentityUser]
			WHERE 
			[UserId] = @UserId
			";

		internal static string ctprIdentityUser_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [security].[IdentityUser]
			WHERE 
			[UserId] = @UserId
			";

		internal static string ctprIdentityUser_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [security].[IdentityUser]
			(
			[Email]
			,[EmailConfirmed]
			,[PasswordHash]
			,[SecurityStamp]
			,[PhoneNumber]
			,[PhoneNumberConfirmed]
			,[TwoFactorEnabled]
			,[LockoutEndDateUtc]
			,[LockoutEnabled]
			,[AccessFailedCount]
			,[Username]
			)
			VALUES
			(
			@Email
			,@EmailConfirmed
			,@PasswordHash
			,@SecurityStamp
			,@PhoneNumber
			,@PhoneNumberConfirmed
			,@TwoFactorEnabled
			,@LockoutEndDateUtc
			,@LockoutEnabled
			,@AccessFailedCount
			,@Username
			)
			SELECT 
			@UserId = [UserId]
			,@Email = [Email]
			,@EmailConfirmed = [EmailConfirmed]
			,@PasswordHash = [PasswordHash]
			,@SecurityStamp = [SecurityStamp]
			,@PhoneNumber = [PhoneNumber]
			,@PhoneNumberConfirmed = [PhoneNumberConfirmed]
			,@TwoFactorEnabled = [TwoFactorEnabled]
			,@LockoutEndDateUtc = [LockoutEndDateUtc]
			,@LockoutEnabled = [LockoutEnabled]
			,@AccessFailedCount = [AccessFailedCount]
			,@Username = [Username]
			,@ctr_version = [ctr_version]
			FROM [security].[IdentityUser]
			WHERE 
			[UserId] = SCOPE_IDENTITY()
			";

		internal static string ctprIdentityUser_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[UserId]
			,[Email]
			,[EmailConfirmed]
			,[PasswordHash]
			,[SecurityStamp]
			,[PhoneNumber]
			,[PhoneNumberConfirmed]
			,[TwoFactorEnabled]
			,[LockoutEndDateUtc]
			,[LockoutEnabled]
			,[AccessFailedCount]
			,[Username]
			,[ctr_version]
			FROM [security].[IdentityUser]
			";

		internal static string ctprIdentityUser_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [security].[IdentityUser]
			";

		internal static string ctprIdentityUser_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [security].[IdentityUser]
			##CRITERIA##
			";

		internal static string ctprIdentityUser_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[UserId]
			,[Email]
			,[EmailConfirmed]
			,[PasswordHash]
			,[SecurityStamp]
			,[PhoneNumber]
			,[PhoneNumberConfirmed]
			,[TwoFactorEnabled]
			,[LockoutEndDateUtc]
			,[LockoutEnabled]
			,[AccessFailedCount]
			,[Username]
			,[ctr_version]
			FROM [security].[IdentityUser]
			##CRITERIA##
			";

		internal static string ctprIdentityUser_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [security].[IdentityUser]
			##CRITERIA##
			";

		internal static string ctprIdentityUser_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			--data optimistic concurrency handling ----------------------------
			DECLARE @currVersion INT
			SELECT @currVersion = [ctr_version] FROM [security].[IdentityUser]
			WHERE [UserId] = @UserId
			
			IF @currVersion > @ctr_version
			RAISERROR('data concurrency issue updating this record, possible stale data. %s', 16, 1, 
			'[security].[IdentityUser] WHERE WHERE [UserId] = @UserId')
			
			IF @currVersion IS NULL
			RAISERROR('data concurrency issue updating this record, record not available (not found). %s', 16, 1, 
			'[security].[IdentityUser] WHERE WHERE [UserId] = @UserId')
			
			SET @ctr_version = @currVersion  + 1 
			-------------------------------------------------------------------
			UPDATE [security].[IdentityUser]
			SET
			[Email] = @Email
			,[EmailConfirmed] = @EmailConfirmed
			,[PasswordHash] = @PasswordHash
			,[SecurityStamp] = @SecurityStamp
			,[PhoneNumber] = @PhoneNumber
			,[PhoneNumberConfirmed] = @PhoneNumberConfirmed
			,[TwoFactorEnabled] = @TwoFactorEnabled
			,[LockoutEndDateUtc] = @LockoutEndDateUtc
			,[LockoutEnabled] = @LockoutEnabled
			,[AccessFailedCount] = @AccessFailedCount
			,[Username] = @Username
			,[ctr_version] = @ctr_version
			WHERE 
			[UserId] = @UserId
			SELECT 
			@UserId = [UserId]
			,@Email = [Email]
			,@EmailConfirmed = [EmailConfirmed]
			,@PasswordHash = [PasswordHash]
			,@SecurityStamp = [SecurityStamp]
			,@PhoneNumber = [PhoneNumber]
			,@PhoneNumberConfirmed = [PhoneNumberConfirmed]
			,@TwoFactorEnabled = [TwoFactorEnabled]
			,@LockoutEndDateUtc = [LockoutEndDateUtc]
			,@LockoutEnabled = [LockoutEnabled]
			,@AccessFailedCount = [AccessFailedCount]
			,@Username = [Username]
			,@ctr_version = [ctr_version]
			FROM [security].[IdentityUser]
			WHERE 
			[UserId] = @UserId
			";

	}
}
#endregion
