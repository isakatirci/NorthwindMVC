///*************************************************************
//** Class generated by CodeTrigger, Version 6.1.0.7
//** This class was generated on 2.12.2018 01:22:24
//** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
//**************************************************************/
//using System;
//using System.Collections.Generic;
//using System.Linq;
//using System.Net;
//using System.Net.Http;
//using System.Web.Http;
//using System.Web.Http.Description;
//using System.Threading.Tasks;
//using Northwind.Mvc.SampleViewModels;
//using Northwind.Business;
//using Northwind.Business.Interfaces;
//using Northwind.Business.Repository;
//using Northwind.Business.Repository.Interfaces;

//namespace Northwind.Mvc.SampleApiControllers
//{
//	public partial class İdentityuserroleController : ApiController
//	{
//		protected IIdentityuserroleRepository _iİdentityuserroleRepository;

//            // GET: api/İdentityuserrole
//        public async Task<IHttpActionResult> Getİdentityuserrole(int page = 0, int pageSize = 5)
//        {
//            int totalCount = 0;

//            IList<İdentityuserroleVm> listVm = new List<İdentityuserroleVm>();
//            var result = Task.Factory.StartNew(() => {

//                ICriteria criteria = new Criteria<BOIdentityuserrole>(İdentityuserroleRepository);
//                totalCount = criteria.Count();

//                IList<BOIdentityuserrole> listBOs = criteria
//                    .Add(new OrderBy("UserId", OrderBy.OrderDirection.Ascending))
//                    .Skip(page * pageSize)
//                    .Take(pageSize)
//                    .List<BOIdentityuserrole>();

//                foreach (var bo in listBOs)
//                    listVm.Add(new İdentityuserroleVm(bo));
//                return listVm;
//            });
//            await result;

//            return Ok(new { Data = result.Result, Paging = new { Total = totalCount, Limit = pageSize, CurrentPage = page, PageCount = (int) Math.Ceiling((double)totalCount / pageSize) } });
//        }

        
//        public IIdentityuserroleRepository İdentityuserroleRepository
//        {
//            get { return _iİdentityuserroleRepository ?? (_iİdentityuserroleRepository = RF.New().İdentityuserroleRepository); }
//            set { _iİdentityuserroleRepository = value; }
//        }
        

//        protected override void Dispose(bool disposing)
//        {
//            if (disposing)
//            {
//            }
//            base.Dispose(disposing);
//        }
//	}
//}
