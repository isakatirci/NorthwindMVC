/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:24
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business.Repository
{
	///<Summary>
	///Class definition
	///This is the definition of the IdentityuserRepository.
	///</Summary>
	public partial class IdentityuserRepository : IIdentityuserRepository, IDisposable
	{
		#region member variables
		IzNorthwindConn_TxConnectionProvider _connectionProvider;
		bool _isDisposed = false;
		#endregion

		#region disposable interface support
		public void Dispose()
		{
			Dispose(true);
			GC.SuppressFinalize(this);
		}

		protected virtual void Dispose(bool isDisposing)
		{
			if(!_isDisposed)
			{
				if(isDisposing)
				{
					if(_connectionProvider != null)
					{
						((IDisposable)_connectionProvider).Dispose();
						_connectionProvider = null;
					}
				}
			}
			_isDisposed = true;
		}
		#endregion

		#region methods
		public virtual IzNorthwindConn_BaseData BaseData(IDAOIdentityuser daoIdentityuser)
		{	return (IzNorthwindConn_BaseData)(DAOIdentityuser)daoIdentityuser;	}

		public virtual IDAOIdentityuser New()
		{	return new DAOIdentityuser();	}

		public virtual void Insert(IDAOIdentityuser daoIdentityuser)
		{	daoIdentityuser.Insert();	}

		public virtual void Update(IDAOIdentityuser daoIdentityuser)
		{	daoIdentityuser.Update();	}

		public virtual void Delete(IDAOIdentityuser daoIdentityuser)
		{	daoIdentityuser.Delete();	}

		public virtual IList<IDAOIdentityuser> SelectAll()
		{	return DAOIdentityuser.SelectAll();	}

		public virtual Int32 SelectAllCount()
		{	return DAOIdentityuser.SelectAllCount();	}

		public virtual IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{	return DAOIdentityuser.SelectAllByCriteriaProjection(listProjection, listCriterion, listOrder, dataSkip, dataTake);	}

		public virtual IList<IDAOIdentityuser> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{	return DAOIdentityuser.SelectAllByCriteria(listCriterion, listOrder, dataSkip, dataTake);	}

		public virtual Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{	return DAOIdentityuser.SelectAllByCriteriaCount(listCriterion);	}

		public virtual IDAOIdentityuser SelectOne(string userId)
		{	return DAOIdentityuser.SelectOne(userId);	}

		#endregion

		#region properties
		public virtual IzNorthwindConn_TxConnectionProvider ConnectionProvider
		{
			get { return _connectionProvider; }
			set { _connectionProvider = value; }
		}

		#endregion

	}
}
