/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 19:31:13
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using NorthwindRestApi.Data;
using NorthwindRestApi.Data.Interfaces;
using NorthwindRestApi.Business.Interfaces;
using NorthwindRestApi.Business.Repository.Interfaces;

namespace NorthwindRestApi.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOSummaryOfSalesByQuarter.
	///</Summary>
	public partial class BOSummaryOfSalesByQuarter : zNorthwindRestApiConn_BaseBusiness, IBOSummaryOfSalesByQuarter, IQueryableCollection
	{
		#region member variables
		protected DateTime? _shippedDate;
		protected Int32? _orderID;
		protected decimal? _subtotal;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected ISummaryOfSalesByQuarterRepository _iSummaryOfSalesByQuarterRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOSummaryOfSalesByQuarter()
		{
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOSummaryOfSalesByQuarter
		///</parameters>
		protected internal BOSummaryOfSalesByQuarter(IDAOSummaryOfSalesByQuarter daoSummaryOfSalesByQuarter)
		{
			try
			{
				_shippedDate = daoSummaryOfSalesByQuarter.ShippedDate;
				_orderID = daoSummaryOfSalesByQuarter.OrderID;
				_subtotal = daoSummaryOfSalesByQuarter.Subtotal;
			}
			catch
			{
				throw;
			}
		}

		
		///<Summary>
		///SummaryOfSalesByQuarterCollection
		///This method returns the collection of BOSummaryOfSalesByQuarter objects
		///</Summary>
		///<returns>
		///IList[IBOSummaryOfSalesByQuarter]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOSummaryOfSalesByQuarter> SummaryOfSalesByQuarterCollection(ISummaryOfSalesByQuarterRepository iSummaryOfSalesByQuarterRepository)
		{
			Doing(null);
			try
			{
				IList<IBOSummaryOfSalesByQuarter> boSummaryOfSalesByQuarterCollection = new List<IBOSummaryOfSalesByQuarter>();
				IList<IDAOSummaryOfSalesByQuarter> daoSummaryOfSalesByQuarterCollection = iSummaryOfSalesByQuarterRepository.SelectAll();
				Done(null);
				
				foreach(IDAOSummaryOfSalesByQuarter daoSummaryOfSalesByQuarter in daoSummaryOfSalesByQuarterCollection)
					boSummaryOfSalesByQuarterCollection.Add(new BOSummaryOfSalesByQuarter(daoSummaryOfSalesByQuarter));
				
				return boSummaryOfSalesByQuarterCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///SummaryOfSalesByQuarterCollectionCount
		///This method returns the collection count of BOSummaryOfSalesByQuarter objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SummaryOfSalesByQuarterCollectionCount(ISummaryOfSalesByQuarterRepository iSummaryOfSalesByQuarterRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iSummaryOfSalesByQuarterRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///SummaryOfSalesByQuarterCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOSummaryOfSalesByQuarter>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iSummaryOfSalesByQuarterRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boSummaryOfSalesByQuarterCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOSummaryOfSalesByQuarter> daoSummaryOfSalesByQuarterCollection = _iSummaryOfSalesByQuarterRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOSummaryOfSalesByQuarter resdaoSummaryOfSalesByQuarter in daoSummaryOfSalesByQuarterCollection)
					boSummaryOfSalesByQuarterCollection.Add((T)(object)new BOSummaryOfSalesByQuarter(resdaoSummaryOfSalesByQuarter));
				
				return boSummaryOfSalesByQuarterCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOSummaryOfSalesByQuarter objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOSummaryOfSalesByQuarter> boSummaryOfSalesByQuarterCollection = new List<IBOSummaryOfSalesByQuarter>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iSummaryOfSalesByQuarterRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual ISummaryOfSalesByQuarterRepository SummaryOfSalesByQuarterRepository
		{
			set
			{
				_iSummaryOfSalesByQuarterRepository = value;
			}
		}
		
		public virtual DateTime? ShippedDate
		{
			get
			{
				 return _shippedDate;
			}
			set
			{
				_shippedDate = value;
				_isDirty = true;
			}
		}
		
		public virtual Int32? OrderID
		{
			get
			{
				 return _orderID;
			}
			set
			{
				_orderID = value;
				_isDirty = true;
			}
		}
		
		public virtual decimal? Subtotal
		{
			get
			{
				 return _subtotal;
			}
			set
			{
				_subtotal = value;
				_isDirty = true;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iSummaryOfSalesByQuarterRepository;	}
			set {	SummaryOfSalesByQuarterRepository = (ISummaryOfSalesByQuarterRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
