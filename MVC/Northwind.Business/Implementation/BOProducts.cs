/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOProducts.
	///It maintains a collection of BOİnventoryTransactions,BOOrderDetails,BOPurchaseOrderDetails objects.
	///</Summary>
	public partial class BOProducts : zNorthwindConn_BaseBusiness, IBOProducts, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _supplierİds;
		protected string _id;
		protected string _productCode;
		protected string _productName;
		protected string _description;
		protected string _standardCost;
		protected string _listPrice;
		protected string _reorderLevel;
		protected string _targetLevel;
		protected string _quantityPerUnit;
		protected string _discontinued;
		protected string _minimumReorderQuantity;
		protected string _category;
		protected byte[] _attachments;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		List<IBOİnventoryTransactions> _boİnventoryTransactionsCollection;
		List<IBOOrderDetails> _boOrderDetailsCollection;
		List<IBOPurchaseOrderDetails> _boPurchaseOrderDetailsCollection;
		/*********************************************/
		/*repositories*********************************/
		protected IProductsRepository _iProductsRepository;
		protected IInventoryTransactionsRepository _iİnventoryTransactionsRepository;
		protected IOrderDetailsRepository _iOrderDetailsRepository;
		protected IPurchaseOrderDetailsRepository _iPurchaseOrderDetailsRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOProducts()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string id
		///</parameters>
		public void Init(string id)
		{
			try
			{
				IDAOProducts daoProducts = _iProductsRepository.SelectOne(id);
				_supplierİds = daoProducts.Supplierİds;
				_id = daoProducts.İd;
				_productCode = daoProducts.ProductCode;
				_productName = daoProducts.ProductName;
				_description = daoProducts.Description;
				_standardCost = daoProducts.StandardCost;
				_listPrice = daoProducts.ListPrice;
				_reorderLevel = daoProducts.ReorderLevel;
				_targetLevel = daoProducts.TargetLevel;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_discontinued = daoProducts.Discontinued;
				_minimumReorderQuantity = daoProducts.MinimumReorderQuantity;
				_category = daoProducts.Category;
				_attachments = daoProducts.Attachments;
				_ctrVersion = daoProducts.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOProducts
		///</parameters>
		protected internal BOProducts(IDAOProducts daoProducts)
		{
			try
			{
				_supplierİds = daoProducts.Supplierİds;
				_id = daoProducts.İd;
				_productCode = daoProducts.ProductCode;
				_productName = daoProducts.ProductName;
				_description = daoProducts.Description;
				_standardCost = daoProducts.StandardCost;
				_listPrice = daoProducts.ListPrice;
				_reorderLevel = daoProducts.ReorderLevel;
				_targetLevel = daoProducts.TargetLevel;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_discontinued = daoProducts.Discontinued;
				_minimumReorderQuantity = daoProducts.MinimumReorderQuantity;
				_category = daoProducts.Category;
				_attachments = daoProducts.Attachments;
				_ctrVersion = daoProducts.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Products record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject( _iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction( _iProductsRepository, "savenewBOProducts");
			try
			{
				daoProducts.Supplierİds = _supplierİds;
				daoProducts.ProductCode = _productCode;
				daoProducts.ProductName = _productName;
				daoProducts.Description = _description;
				daoProducts.StandardCost = _standardCost;
				daoProducts.ListPrice = _listPrice;
				daoProducts.ReorderLevel = _reorderLevel;
				daoProducts.TargetLevel = _targetLevel;
				daoProducts.QuantityPerUnit = _quantityPerUnit;
				daoProducts.Discontinued = _discontinued;
				daoProducts.MinimumReorderQuantity = _minimumReorderQuantity;
				daoProducts.Category = _category;
				daoProducts.Attachments = _attachments;
				_iProductsRepository.Insert(daoProducts);
				CommitTransaction( _iProductsRepository);
				Done(this);
				
				_supplierİds = daoProducts.Supplierİds;
				_id = daoProducts.İd;
				_productCode = daoProducts.ProductCode;
				_productName = daoProducts.ProductName;
				_description = daoProducts.Description;
				_standardCost = daoProducts.StandardCost;
				_listPrice = daoProducts.ListPrice;
				_reorderLevel = daoProducts.ReorderLevel;
				_targetLevel = daoProducts.TargetLevel;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_discontinued = daoProducts.Discontinued;
				_minimumReorderQuantity = daoProducts.MinimumReorderQuantity;
				_category = daoProducts.Category;
				_attachments = daoProducts.Attachments;
				_ctrVersion = daoProducts.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "savenewBOProducts");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Products record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject(_iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction(_iProductsRepository, "updateBOProducts");
			try
			{
				daoProducts.Supplierİds = _supplierİds;
				daoProducts.İd = _id;
				daoProducts.ProductCode = _productCode;
				daoProducts.ProductName = _productName;
				daoProducts.Description = _description;
				daoProducts.StandardCost = _standardCost;
				daoProducts.ListPrice = _listPrice;
				daoProducts.ReorderLevel = _reorderLevel;
				daoProducts.TargetLevel = _targetLevel;
				daoProducts.QuantityPerUnit = _quantityPerUnit;
				daoProducts.Discontinued = _discontinued;
				daoProducts.MinimumReorderQuantity = _minimumReorderQuantity;
				daoProducts.Category = _category;
				daoProducts.Attachments = _attachments;
				daoProducts.CtrVersion = _ctrVersion;
				_iProductsRepository.Update(daoProducts);
				CommitTransaction(_iProductsRepository);
				Done(this);
				
				_supplierİds = daoProducts.Supplierİds;
				_id = daoProducts.İd;
				_productCode = daoProducts.ProductCode;
				_productName = daoProducts.ProductName;
				_description = daoProducts.Description;
				_standardCost = daoProducts.StandardCost;
				_listPrice = daoProducts.ListPrice;
				_reorderLevel = daoProducts.ReorderLevel;
				_targetLevel = daoProducts.TargetLevel;
				_quantityPerUnit = daoProducts.QuantityPerUnit;
				_discontinued = daoProducts.Discontinued;
				_minimumReorderQuantity = daoProducts.MinimumReorderQuantity;
				_category = daoProducts.Category;
				_attachments = daoProducts.Attachments;
				_ctrVersion = daoProducts.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "updateBOProducts");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Products record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOProducts daoProducts = _iProductsRepository.New();
			RegisterDataObject(_iProductsRepository, _iProductsRepository.BaseData(daoProducts));
			BeginTransaction(_iProductsRepository, "deleteBOProducts");
			try
			{
				daoProducts.İd = _id;
				_iProductsRepository.Delete(daoProducts);
				CommitTransaction(_iProductsRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iProductsRepository, "deleteBOProducts");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///ProductsCollection
		///This method returns the collection of BOProducts objects
		///</Summary>
		///<returns>
		///IList[IBOProducts]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOProducts> ProductsCollection(IProductsRepository iProductsRepository)
		{
			Doing(null);
			try
			{
				IList<IBOProducts> boProductsCollection = new List<IBOProducts>();
				IList<IDAOProducts> daoProductsCollection = iProductsRepository.SelectAll();
				Done(null);
				
				foreach(IDAOProducts daoProducts in daoProductsCollection)
					boProductsCollection.Add(new BOProducts(daoProducts));
				
				return boProductsCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///ProductsCollectionCount
		///This method returns the collection count of BOProducts objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 ProductsCollectionCount(IProductsRepository iProductsRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iProductsRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///ProductsCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOProducts>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iProductsRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boProductsCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOProducts> daoProductsCollection = _iProductsRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOProducts resdaoProducts in daoProductsCollection)
					boProductsCollection.Add((T)(object)new BOProducts(resdaoProducts));
				
				return boProductsCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOProducts objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOProducts> boProductsCollection = new List<IBOProducts>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iProductsRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		///<Summary>
		///İnventoryTransactionsCollection
		///This method returns its collection of BOİnventoryTransactions objects
		///</Summary>
		///<returns>
		///IList[IBOİnventoryTransactions]
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual IList<IBOİnventoryTransactions> İnventoryTransactionsCollection()
		{
			Doing(this);
			try
			{
				if(_boİnventoryTransactionsCollection == null)
					LoadİnventoryTransactionsCollection();
				return _boİnventoryTransactionsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///OrderDetailsCollection
		///This method returns its collection of BOOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOOrderDetails]
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual IList<IBOOrderDetails> OrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boOrderDetailsCollection == null)
					LoadOrderDetailsCollection();
				return _boOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///PurchaseOrderDetailsCollection
		///This method returns its collection of BOPurchaseOrderDetails objects
		///</Summary>
		///<returns>
		///IList[IBOPurchaseOrderDetails]
		///</returns>
		///<parameters>
		///BOProducts
		///</parameters>
		public virtual IList<IBOPurchaseOrderDetails> PurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				if(_boPurchaseOrderDetailsCollection == null)
					LoadPurchaseOrderDetailsCollection();
				return _boPurchaseOrderDetailsCollection.AsReadOnly();
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///LoadİnventoryTransactionsCollection
		///This method loads the internal collection of BOİnventoryTransactions objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadİnventoryTransactionsCollection()
		{
			Doing(this);
			try
			{
				_boİnventoryTransactionsCollection = new List<IBOİnventoryTransactions>();
				IList<IDAOİnventoryTransactions> daoİnventoryTransactionsCollection = _iİnventoryTransactionsRepository.SelectAllByProductİd(_id);
				Done(this);
				
				foreach(IDAOİnventoryTransactions daoİnventoryTransactions in daoİnventoryTransactionsCollection)
					_boİnventoryTransactionsCollection.Add(new BOInventoryTransactions(daoİnventoryTransactions));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddİnventoryTransactions
		///This method persists a BOİnventoryTransactions object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOİnventoryTransactions
		///</parameters>
		public virtual void AddİnventoryTransactions(IBOİnventoryTransactions boİnventoryTransactions)
		{
			Doing(this);
			IDAOİnventoryTransactions daoİnventoryTransactions = _iİnventoryTransactionsRepository.New();
			RegisterDataObject(_iİnventoryTransactionsRepository, _iİnventoryTransactionsRepository.BaseData(daoİnventoryTransactions));
			BeginTransaction(_iİnventoryTransactionsRepository, "addİnventoryTransactions");
			try
			{
				daoİnventoryTransactions.İd = boİnventoryTransactions.İd;
				daoİnventoryTransactions.TransactionType = boİnventoryTransactions.TransactionType;
				daoİnventoryTransactions.TransactionCreatedDate = boİnventoryTransactions.TransactionCreatedDate;
				daoİnventoryTransactions.TransactionModifiedDate = boİnventoryTransactions.TransactionModifiedDate;
				daoİnventoryTransactions.Quantity = boİnventoryTransactions.Quantity;
				daoİnventoryTransactions.PurchaseOrderİd = boİnventoryTransactions.PurchaseOrderİd;
				daoİnventoryTransactions.CustomerOrderİd = boİnventoryTransactions.CustomerOrderİd;
				daoİnventoryTransactions.Comments = boİnventoryTransactions.Comments;
				daoİnventoryTransactions.Productİd = _id;
				_iİnventoryTransactionsRepository.Insert(daoİnventoryTransactions);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boİnventoryTransactions = new BOInventoryTransactions(daoİnventoryTransactions);
				if(_boİnventoryTransactionsCollection != null)
					_boİnventoryTransactionsCollection.Add(boİnventoryTransactions);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "addİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllİnventoryTransactions
		///This method deletes all BOİnventoryTransactions objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllİnventoryTransactions()
		{
			Doing(this);
			RegisterDataObject(_iİnventoryTransactionsRepository, null);
			BeginTransaction(_iİnventoryTransactionsRepository, "deleteAllİnventoryTransactions");
			try
			{
				_iİnventoryTransactionsRepository.DeleteAllByProductİd(_id);
				CommitTransaction(_iİnventoryTransactionsRepository);
				Done(this);
				if(_boİnventoryTransactionsCollection != null)
				{
					_boİnventoryTransactionsCollection.Clear();
					_boİnventoryTransactionsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iİnventoryTransactionsRepository, "deleteAllİnventoryTransactions");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadOrderDetailsCollection
		///This method loads the internal collection of BOOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boOrderDetailsCollection = new List<IBOOrderDetails>();
				IList<IDAOOrderDetails> daoOrderDetailsCollection = _iOrderDetailsRepository.SelectAllByProductİd(_id);
				Done(this);
				
				foreach(IDAOOrderDetails daoOrderDetails in daoOrderDetailsCollection)
					_boOrderDetailsCollection.Add(new BOOrderDetails(daoOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddOrderDetails
		///This method persists a BOOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOOrderDetails
		///</parameters>
		public virtual void AddOrderDetails(IBOOrderDetails boOrderDetails)
		{
			Doing(this);
			IDAOOrderDetails daoOrderDetails = _iOrderDetailsRepository.New();
			RegisterDataObject(_iOrderDetailsRepository, _iOrderDetailsRepository.BaseData(daoOrderDetails));
			BeginTransaction(_iOrderDetailsRepository, "addOrderDetails");
			try
			{
				daoOrderDetails.İd = boOrderDetails.İd;
				daoOrderDetails.Orderİd = boOrderDetails.Orderİd;
				daoOrderDetails.Quantity = boOrderDetails.Quantity;
				daoOrderDetails.UnitPrice = boOrderDetails.UnitPrice;
				daoOrderDetails.Discount = boOrderDetails.Discount;
				daoOrderDetails.Statusİd = boOrderDetails.Statusİd;
				daoOrderDetails.DateAllocated = boOrderDetails.DateAllocated;
				daoOrderDetails.PurchaseOrderİd = boOrderDetails.PurchaseOrderİd;
				daoOrderDetails.İnventoryİd = boOrderDetails.İnventoryİd;
				daoOrderDetails.Productİd = _id;
				_iOrderDetailsRepository.Insert(daoOrderDetails);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boOrderDetails = new BOOrderDetails(daoOrderDetails);
				if(_boOrderDetailsCollection != null)
					_boOrderDetailsCollection.Add(boOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "addOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllOrderDetails
		///This method deletes all BOOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iOrderDetailsRepository, null);
			BeginTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
			try
			{
				_iOrderDetailsRepository.DeleteAllByProductİd(_id);
				CommitTransaction(_iOrderDetailsRepository);
				Done(this);
				if(_boOrderDetailsCollection != null)
				{
					_boOrderDetailsCollection.Clear();
					_boOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iOrderDetailsRepository, "deleteAllOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///LoadPurchaseOrderDetailsCollection
		///This method loads the internal collection of BOPurchaseOrderDetails objects from storage. 
		///Call this if you need to ensure the collection is up-to-date (concurrency)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void LoadPurchaseOrderDetailsCollection()
		{
			Doing(this);
			try
			{
				_boPurchaseOrderDetailsCollection = new List<IBOPurchaseOrderDetails>();
				IList<IDAOPurchaseOrderDetails> daoPurchaseOrderDetailsCollection = _iPurchaseOrderDetailsRepository.SelectAllByProductİd(_id);
				Done(this);
				
				foreach(IDAOPurchaseOrderDetails daoPurchaseOrderDetails in daoPurchaseOrderDetailsCollection)
					_boPurchaseOrderDetailsCollection.Add(new BOPurchaseOrderDetails(daoPurchaseOrderDetails));
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///AddPurchaseOrderDetails
		///This method persists a BOPurchaseOrderDetails object to the database collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOPurchaseOrderDetails
		///</parameters>
		public virtual void AddPurchaseOrderDetails(IBOPurchaseOrderDetails boPurchaseOrderDetails)
		{
			Doing(this);
			IDAOPurchaseOrderDetails daoPurchaseOrderDetails = _iPurchaseOrderDetailsRepository.New();
			RegisterDataObject(_iPurchaseOrderDetailsRepository, _iPurchaseOrderDetailsRepository.BaseData(daoPurchaseOrderDetails));
			BeginTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
			try
			{
				daoPurchaseOrderDetails.İd = boPurchaseOrderDetails.İd;
				daoPurchaseOrderDetails.PurchaseOrderİd = boPurchaseOrderDetails.PurchaseOrderİd;
				daoPurchaseOrderDetails.Quantity = boPurchaseOrderDetails.Quantity;
				daoPurchaseOrderDetails.UnitCost = boPurchaseOrderDetails.UnitCost;
				daoPurchaseOrderDetails.DateReceived = boPurchaseOrderDetails.DateReceived;
				daoPurchaseOrderDetails.PostedToİnventory = boPurchaseOrderDetails.PostedToİnventory;
				daoPurchaseOrderDetails.İnventoryİd = boPurchaseOrderDetails.İnventoryİd;
				daoPurchaseOrderDetails.Productİd = _id;
				_iPurchaseOrderDetailsRepository.Insert(daoPurchaseOrderDetails);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				
				/*pick up any primary keys, computed values etc*/
				boPurchaseOrderDetails = new BOPurchaseOrderDetails(daoPurchaseOrderDetails);
				if(_boPurchaseOrderDetailsCollection != null)
					_boPurchaseOrderDetailsCollection.Add(boPurchaseOrderDetails);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "addPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///DeleteAllPurchaseOrderDetails
		///This method deletes all BOPurchaseOrderDetails objects from its collection
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void DeleteAllPurchaseOrderDetails()
		{
			Doing(this);
			RegisterDataObject(_iPurchaseOrderDetailsRepository, null);
			BeginTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
			try
			{
				_iPurchaseOrderDetailsRepository.DeleteAllByProductİd(_id);
				CommitTransaction(_iPurchaseOrderDetailsRepository);
				Done(this);
				if(_boPurchaseOrderDetailsCollection != null)
				{
					_boPurchaseOrderDetailsCollection.Clear();
					_boPurchaseOrderDetailsCollection = null;
				}
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iPurchaseOrderDetailsRepository, "deleteAllPurchaseOrderDetails");
				Handle(this, ex);
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IProductsRepository ProductsRepository
		{
			set
			{
				_iProductsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IInventoryTransactionsRepository İnventoryTransactionsRepository
		{
			set
			{
				_iİnventoryTransactionsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IOrderDetailsRepository OrderDetailsRepository
		{
			set
			{
				_iOrderDetailsRepository = value;
			}
		}
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IPurchaseOrderDetailsRepository PurchaseOrderDetailsRepository
		{
			set
			{
				_iPurchaseOrderDetailsRepository = value;
			}
		}
		
		public virtual string Supplierİds
		{
			get
			{
				 return _supplierİds;
			}
			set
			{
				_supplierİds = value;
				_isDirty = true;
			}
		}
		
		public virtual string İd
		{
			get
			{
				 return _id;
			}
			set
			{
				_id = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductCode
		{
			get
			{
				 return _productCode;
			}
			set
			{
				_productCode = value;
				_isDirty = true;
			}
		}
		
		public virtual string ProductName
		{
			get
			{
				 return _productName;
			}
			set
			{
				_productName = value;
				_isDirty = true;
			}
		}
		
		public virtual string Description
		{
			get
			{
				 return _description;
			}
			set
			{
				_description = value;
				_isDirty = true;
			}
		}
		
		public virtual string StandardCost
		{
			get
			{
				 return _standardCost;
			}
			set
			{
				_standardCost = value;
				_isDirty = true;
			}
		}
		
		public virtual string ListPrice
		{
			get
			{
				 return _listPrice;
			}
			set
			{
				_listPrice = value;
				_isDirty = true;
			}
		}
		
		public virtual string ReorderLevel
		{
			get
			{
				 return _reorderLevel;
			}
			set
			{
				_reorderLevel = value;
				_isDirty = true;
			}
		}
		
		public virtual string TargetLevel
		{
			get
			{
				 return _targetLevel;
			}
			set
			{
				_targetLevel = value;
				_isDirty = true;
			}
		}
		
		public virtual string QuantityPerUnit
		{
			get
			{
				 return _quantityPerUnit;
			}
			set
			{
				_quantityPerUnit = value;
				_isDirty = true;
			}
		}
		
		public virtual string Discontinued
		{
			get
			{
				 return _discontinued;
			}
			set
			{
				_discontinued = value;
				_isDirty = true;
			}
		}
		
		public virtual string MinimumReorderQuantity
		{
			get
			{
				 return _minimumReorderQuantity;
			}
			set
			{
				_minimumReorderQuantity = value;
				_isDirty = true;
			}
		}
		
		public virtual string Category
		{
			get
			{
				 return _category;
			}
			set
			{
				_category = value;
				_isDirty = true;
			}
		}
		
		public virtual byte[] Attachments
		{
			get
			{
				 return _attachments;
			}
			set
			{
				_attachments = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iProductsRepository;	}
			set {	ProductsRepository = (IProductsRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
