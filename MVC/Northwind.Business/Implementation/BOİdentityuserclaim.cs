/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 2.12.2018 01:22:23
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Collections.Generic;
using System.Xml.Serialization;
using Northwind.Data;
using Northwind.Data.Interfaces;
using Northwind.Business.Interfaces;
using Northwind.Business.Repository.Interfaces;

namespace Northwind.Business
{
	///<Summary>
	///Class definition
	///This is the definition of the class BOIdentityuserclaim.
	///</Summary>
	public partial class BOIdentityuserclaim : zNorthwindConn_BaseBusiness, IBOIdentityuserclaim, IQueryableCollection, IUnitOfWorkEntity
	{
		#region member variables
		protected string _ıd;
		protected string _userId;
		protected string _claimType;
		protected string _claimValue;
		protected string _ctrVersion;
		protected bool _isDirty = false;
		/*collection member objects*******************/
		/*********************************************/
		/*repositories*********************************/
		protected IIdentityuserclaimRepository _iIdentityuserclaimRepository;
		/*********************************************/
		#endregion

		#region class methods
		///<Summary>
		///Constructor
		///This is the default constructor
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public BOIdentityuserclaim()
		{
		}

		///<Summary>
		///Initializer
		///Initializer using primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///string ıd
		///</parameters>
		public void Init(string ıd)
		{
			try
			{
				IDAOIdentityuserclaim daoIdentityuserclaim = _iIdentityuserclaimRepository.SelectOne(ıd);
				_ıd = daoIdentityuserclaim.Id;
				_userId = daoIdentityuserclaim.UserId;
				_claimType = daoIdentityuserclaim.ClaimType;
				_claimValue = daoIdentityuserclaim.ClaimValue;
				_ctrVersion = daoIdentityuserclaim.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///Constructor
		///This constructor initializes the business object from its respective data object
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///DAOIdentityuserclaim
		///</parameters>
		protected internal BOIdentityuserclaim(IDAOIdentityuserclaim daoIdentityuserclaim)
		{
			try
			{
				_ıd = daoIdentityuserclaim.Id;
				_userId = daoIdentityuserclaim.UserId;
				_claimType = daoIdentityuserclaim.ClaimType;
				_claimValue = daoIdentityuserclaim.ClaimValue;
				_ctrVersion = daoIdentityuserclaim.CtrVersion;
			}
			catch
			{
				throw;
			}
		}

		///<Summary>
		///SaveNew
		///This method persists a new Identityuserclaim record to the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void SaveNew()
		{
			Doing(this);
			IDAOIdentityuserclaim daoIdentityuserclaim = _iIdentityuserclaimRepository.New();
			RegisterDataObject( _iIdentityuserclaimRepository, _iIdentityuserclaimRepository.BaseData(daoIdentityuserclaim));
			BeginTransaction( _iIdentityuserclaimRepository, "savenewBOIdentityuserclaim");
			try
			{
				daoIdentityuserclaim.UserId = _userId;
				daoIdentityuserclaim.ClaimType = _claimType;
				daoIdentityuserclaim.ClaimValue = _claimValue;
				_iIdentityuserclaimRepository.Insert(daoIdentityuserclaim);
				CommitTransaction( _iIdentityuserclaimRepository);
				Done(this);
				
				_ıd = daoIdentityuserclaim.Id;
				_userId = daoIdentityuserclaim.UserId;
				_claimType = daoIdentityuserclaim.ClaimType;
				_claimValue = daoIdentityuserclaim.ClaimValue;
				_ctrVersion = daoIdentityuserclaim.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityuserclaimRepository, "savenewBOIdentityuserclaim");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Update
		///This method updates one Identityuserclaim record in the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///BOIdentityuserclaim
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			IDAOIdentityuserclaim daoIdentityuserclaim = _iIdentityuserclaimRepository.New();
			RegisterDataObject(_iIdentityuserclaimRepository, _iIdentityuserclaimRepository.BaseData(daoIdentityuserclaim));
			BeginTransaction(_iIdentityuserclaimRepository, "updateBOIdentityuserclaim");
			try
			{
				daoIdentityuserclaim.Id = _ıd;
				daoIdentityuserclaim.UserId = _userId;
				daoIdentityuserclaim.ClaimType = _claimType;
				daoIdentityuserclaim.ClaimValue = _claimValue;
				daoIdentityuserclaim.CtrVersion = _ctrVersion;
				_iIdentityuserclaimRepository.Update(daoIdentityuserclaim);
				CommitTransaction(_iIdentityuserclaimRepository);
				Done(this);
				
				_ıd = daoIdentityuserclaim.Id;
				_userId = daoIdentityuserclaim.UserId;
				_claimType = daoIdentityuserclaim.ClaimType;
				_claimValue = daoIdentityuserclaim.ClaimValue;
				_ctrVersion = daoIdentityuserclaim.CtrVersion;
				_isDirty = false;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityuserclaimRepository, "updateBOIdentityuserclaim");
				Handle(this, ex);
			}
		}
		///<Summary>
		///Delete
		///This method deletes one Identityuserclaim record from the store
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			IDAOIdentityuserclaim daoIdentityuserclaim = _iIdentityuserclaimRepository.New();
			RegisterDataObject(_iIdentityuserclaimRepository, _iIdentityuserclaimRepository.BaseData(daoIdentityuserclaim));
			BeginTransaction(_iIdentityuserclaimRepository, "deleteBOIdentityuserclaim");
			try
			{
				daoIdentityuserclaim.Id = _ıd;
				_iIdentityuserclaimRepository.Delete(daoIdentityuserclaim);
				CommitTransaction(_iIdentityuserclaimRepository);
				Done(this);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				RollbackTransaction(_iIdentityuserclaimRepository, "deleteBOIdentityuserclaim");
				Handle(this, ex);
			}
		}
		
		///<Summary>
		///IdentityuserclaimCollection
		///This method returns the collection of BOIdentityuserclaim objects
		///</Summary>
		///<returns>
		///IList[IBOIdentityuserclaim]
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IBOIdentityuserclaim> IdentityuserclaimCollection(IIdentityuserclaimRepository iIdentityuserclaimRepository)
		{
			Doing(null);
			try
			{
				IList<IBOIdentityuserclaim> boIdentityuserclaimCollection = new List<IBOIdentityuserclaim>();
				IList<IDAOIdentityuserclaim> daoIdentityuserclaimCollection = iIdentityuserclaimRepository.SelectAll();
				Done(null);
				
				foreach(IDAOIdentityuserclaim daoIdentityuserclaim in daoIdentityuserclaimCollection)
					boIdentityuserclaimCollection.Add(new BOIdentityuserclaim(daoIdentityuserclaim));
				
				return boIdentityuserclaimCollection;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///IdentityuserclaimCollectionCount
		///This method returns the collection count of BOIdentityuserclaim objects
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 IdentityuserclaimCollectionCount(IIdentityuserclaimRepository iIdentityuserclaimRepository)
		{
			Doing(null);
			try
			{
				Int32 objCount = iIdentityuserclaimRepository.SelectAllCount();
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
		}
		
		
		///<Summary>
		///IdentityuserclaimCollectionFromCriteria
		///This method returns the collection of projections, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<IBOIdentityuserclaim>
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual IDictionary<string, IList<object>> Projections(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<IDataProjection> lstDataProjection = (icriteria == null) ? null : icriteria.ListDataProjection();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				return _iIdentityuserclaimRepository.SelectAllByCriteriaProjection(lstDataProjection, lstDataCriteria, lstDataOrder, dataSkip, dataTake);
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		///<Summary>
		///Collection<T>
		///This method returns the collection of T objects, ordered and filtered by optional criteria
		///</Summary>
		///<returns>
		///IList<T>
		///</returns>
		///<parameters>
		///object o (ICriteria)
		///</parameters>
		public virtual IList<T> Collection<T>(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				IList<T> boIdentityuserclaimCollection = new List<T>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				IList<IDataOrderBy> lstDataOrder = (icriteria == null) ? null : icriteria.ListDataOrder();
				IDataSkip dataSkip = (icriteria == null) ? null : icriteria.DataSkip();
				IDataTake dataTake = (icriteria == null) ? null : icriteria.DataTake();
				IList<IDAOIdentityuserclaim> daoIdentityuserclaimCollection = _iIdentityuserclaimRepository.SelectAllByCriteria(lstDataCriteria, lstDataOrder, dataSkip, dataTake);
				
				foreach(IDAOIdentityuserclaim resdaoIdentityuserclaim in daoIdentityuserclaimCollection)
					boIdentityuserclaimCollection.Add((T)(object)new BOIdentityuserclaim(resdaoIdentityuserclaim));
				
				return boIdentityuserclaimCollection;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return null;
			}
		}
		
		
		///<Summary>
		///CollectionCount
		///This method returns the collection count of BOIdentityuserclaim objects, filtered by optional criteria
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///ICriteria icriteria
		///</parameters>
		public virtual Int32 CollectionCount(object o)
		{
			Doing(this);
			try
			{
				ICriteria icriteria = (ICriteria)o;
				List<IBOIdentityuserclaim> boIdentityuserclaimCollection = new List<IBOIdentityuserclaim>();
				IList<IDataCriterion> lstDataCriteria = (icriteria == null) ? null : icriteria.ListDataCriteria();
				Int32 objCount = _iIdentityuserclaimRepository.SelectAllByCriteriaCount(lstDataCriteria);
				
				return objCount;
			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
				return -1;
			}
		}
		
		#endregion

		#region member properties
		
		[InjectionPoint]
		[XmlIgnore]
		public virtual IIdentityuserclaimRepository IdentityuserclaimRepository
		{
			set
			{
				_iIdentityuserclaimRepository = value;
			}
		}
		
		public virtual string Id
		{
			get
			{
				 return _ıd;
			}
			set
			{
				_ıd = value;
				_isDirty = true;
			}
		}
		
		public virtual string UserId
		{
			get
			{
				 return _userId;
			}
			set
			{
				_userId = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClaimType
		{
			get
			{
				 return _claimType;
			}
			set
			{
				_claimType = value;
				_isDirty = true;
			}
		}
		
		public virtual string ClaimValue
		{
			get
			{
				 return _claimValue;
			}
			set
			{
				_claimValue = value;
				_isDirty = true;
			}
		}
		
		public virtual string CtrVersion
		{
			get
			{
				 return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}
		
		[XmlIgnore]
		public virtual object Repository
		{
			get {	return (object) _iIdentityuserclaimRepository;	}
			set {	IdentityuserclaimRepository = (IIdentityuserclaimRepository)value;	}
		}
		
		public virtual bool IsDirty
		{
			get
			{
				 return _isDirty;
			}
			set
			{
				_isDirty = value;
			}
		}
		#endregion
	}
}
