/*************************************************************
** Class generated by CodeTrigger, Version 6.1.0.7
** This class was generated on 1.12.2018 16:11:04
** Changes to this file may cause incorrect behaviour and will be lost if the code is regenerated
**************************************************************/
using System;
using System.Data;
using System.Data.SqlClient;
using System.Collections.Generic;
using NorthwindTest2.Data.Interfaces;

namespace NorthwindTest2.Data
{
	public partial class DAOEmployees : zNorthwindTest2Conn_BaseData, IDAOEmployees
	{
		#region member variables
		protected Int32? _employeeID;
		protected string _lastName;
		protected string _firstName;
		protected string _title;
		protected string _titleOfCourtesy;
		protected DateTime? _birthDate;
		protected DateTime? _hireDate;
		protected string _address;
		protected string _city;
		protected string _region;
		protected string _postalCode;
		protected string _country;
		protected string _homePhone;
		protected string _extension;
		protected byte[] _photo;
		protected string _notes;
		protected Int32? _reportsTo;
		protected string _photoPath;
		protected Int32? _ctrVersion;
		#endregion

		#region class methods
		public DAOEmployees()
		{
		}
		///<Summary>
		///Select one row by primary key(s)
		///This method returns one row from the table Employees based on the primary key(s)
		///</Summary>
		///<returns>
		///IDAOEmployees
		///</returns>
		///<parameters>
		///Int32? employeeID
		///</parameters>
		public static IDAOEmployees SelectOne(Int32? employeeID)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_SelectOne;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Employees");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)employeeID?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				DAOEmployees retObj = null;
				if(dt.Rows.Count > 0)
				{
					retObj = new DAOEmployees();
					retObj._employeeID					 = Convert.IsDBNull(dt.Rows[0]["EmployeeID"]) ? (Int32?)null : (Int32?)dt.Rows[0]["EmployeeID"];
					retObj._lastName					 = Convert.IsDBNull(dt.Rows[0]["LastName"]) ? null : (string)dt.Rows[0]["LastName"];
					retObj._firstName					 = Convert.IsDBNull(dt.Rows[0]["FirstName"]) ? null : (string)dt.Rows[0]["FirstName"];
					retObj._title					 = Convert.IsDBNull(dt.Rows[0]["Title"]) ? null : (string)dt.Rows[0]["Title"];
					retObj._titleOfCourtesy					 = Convert.IsDBNull(dt.Rows[0]["TitleOfCourtesy"]) ? null : (string)dt.Rows[0]["TitleOfCourtesy"];
					retObj._birthDate					 = Convert.IsDBNull(dt.Rows[0]["BirthDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["BirthDate"];
					retObj._hireDate					 = Convert.IsDBNull(dt.Rows[0]["HireDate"]) ? (DateTime?)null : (DateTime?)dt.Rows[0]["HireDate"];
					retObj._address					 = Convert.IsDBNull(dt.Rows[0]["Address"]) ? null : (string)dt.Rows[0]["Address"];
					retObj._city					 = Convert.IsDBNull(dt.Rows[0]["City"]) ? null : (string)dt.Rows[0]["City"];
					retObj._region					 = Convert.IsDBNull(dt.Rows[0]["Region"]) ? null : (string)dt.Rows[0]["Region"];
					retObj._postalCode					 = Convert.IsDBNull(dt.Rows[0]["PostalCode"]) ? null : (string)dt.Rows[0]["PostalCode"];
					retObj._country					 = Convert.IsDBNull(dt.Rows[0]["Country"]) ? null : (string)dt.Rows[0]["Country"];
					retObj._homePhone					 = Convert.IsDBNull(dt.Rows[0]["HomePhone"]) ? null : (string)dt.Rows[0]["HomePhone"];
					retObj._extension					 = Convert.IsDBNull(dt.Rows[0]["Extension"]) ? null : (string)dt.Rows[0]["Extension"];
					retObj._photo					 = Convert.IsDBNull(dt.Rows[0]["Photo"]) ? null : (byte[])dt.Rows[0]["Photo"];
					retObj._notes					 = Convert.IsDBNull(dt.Rows[0]["Notes"]) ? null : (string)dt.Rows[0]["Notes"];
					retObj._reportsTo					 = Convert.IsDBNull(dt.Rows[0]["ReportsTo"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ReportsTo"];
					retObj._photoPath					 = Convert.IsDBNull(dt.Rows[0]["PhotoPath"]) ? null : (string)dt.Rows[0]["PhotoPath"];
					retObj._ctrVersion					 = Convert.IsDBNull(dt.Rows[0]["ctr_version"]) ? (Int32?)null : (Int32?)dt.Rows[0]["ctr_version"];
				}
				return retObj;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete one row by primary key(s)
		///this method allows the object to delete itself from the table Employees based on its primary key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Delete()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_DeleteOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Input, false, 10, 0, "", DataRowVersion.Proposed, (object)_employeeID?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by foreign key
		///This method returns all data rows in the table Employees based on a foreign key
		///</Summary>
		///<returns>
		///IList-IDAOEmployees.
		///</returns>
		///<parameters>
		///Int32? reportsTo
		///</parameters>
		public static IList<IDAOEmployees> SelectAllByReportsTo(Int32? reportsTo)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_SelectAllByReportsTo;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Employees");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReportsTo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)reportsTo?? (object)DBNull.Value));

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployees> objList = new List<IDAOEmployees>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployees retObj = new DAOEmployees();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._lastName					 = Convert.IsDBNull(row["LastName"]) ? null : (string)row["LastName"];
						retObj._firstName					 = Convert.IsDBNull(row["FirstName"]) ? null : (string)row["FirstName"];
						retObj._title					 = Convert.IsDBNull(row["Title"]) ? null : (string)row["Title"];
						retObj._titleOfCourtesy					 = Convert.IsDBNull(row["TitleOfCourtesy"]) ? null : (string)row["TitleOfCourtesy"];
						retObj._birthDate					 = Convert.IsDBNull(row["BirthDate"]) ? (DateTime?)null : (DateTime?)row["BirthDate"];
						retObj._hireDate					 = Convert.IsDBNull(row["HireDate"]) ? (DateTime?)null : (DateTime?)row["HireDate"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._city					 = Convert.IsDBNull(row["City"]) ? null : (string)row["City"];
						retObj._region					 = Convert.IsDBNull(row["Region"]) ? null : (string)row["Region"];
						retObj._postalCode					 = Convert.IsDBNull(row["PostalCode"]) ? null : (string)row["PostalCode"];
						retObj._country					 = Convert.IsDBNull(row["Country"]) ? null : (string)row["Country"];
						retObj._homePhone					 = Convert.IsDBNull(row["HomePhone"]) ? null : (string)row["HomePhone"];
						retObj._extension					 = Convert.IsDBNull(row["Extension"]) ? null : (string)row["Extension"];
						retObj._photo					 = Convert.IsDBNull(row["Photo"]) ? null : (byte[])row["Photo"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._reportsTo					 = Convert.IsDBNull(row["ReportsTo"]) ? (Int32?)null : (Int32?)row["ReportsTo"];
						retObj._photoPath					 = Convert.IsDBNull(row["PhotoPath"]) ? null : (string)row["PhotoPath"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///Int32? reportsTo
		///</parameters>
		public static Int32 SelectAllByReportsToCount(Int32? reportsTo)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_SelectAllByReportsToCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReportsTo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)reportsTo?? (object)DBNull.Value));

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Delete all by foreign key
		///This method deletes all rows in the table Employees with a given foreign key
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? reportsTo
		///</parameters>
		public static void DeleteAllByReportsTo(IzNorthwindTest2Conn_TxConnectionProvider connectionProvider, Int32? reportsTo)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_DeleteAllByReportsTo;
			command.CommandType = CommandType.Text;
			command.Connection = connectionProvider.Connection;
			command.Transaction = connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@ReportsTo", SqlDbType.Int, 4, ParameterDirection.Input, true, 10, 0, "", DataRowVersion.Proposed, (object)reportsTo?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(null);

			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Insert a new row
		///This method saves a new object to the table Employees
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Insert()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_InsertOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Photo", SqlDbType.Image, 16, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_photo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NText, 8000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _employeeID));
				command.Parameters.Add(CtSqlParameter.Get("@LastName", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_lastName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FirstName", SqlDbType.NVarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_firstName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Title", SqlDbType.NVarChar, 30, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_title?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TitleOfCourtesy", SqlDbType.NVarChar, 25, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_titleOfCourtesy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BirthDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_birthDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HireDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_hireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 60, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@City", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_city?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Region", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_region?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PostalCode", SqlDbType.NVarChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_postalCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Country", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_country?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HomePhone", SqlDbType.NVarChar, 24, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_homePhone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Extension", SqlDbType.NVarChar, 4, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_extension?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReportsTo", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_reportsTo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhotoPath", SqlDbType.NVarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_photoPath?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.Output, false, 10, 0, "", DataRowVersion.Proposed, _ctrVersion));

				command.ExecuteNonQuery();
				Done(this);

				_employeeID					 = Convert.IsDBNull(command.Parameters["@EmployeeID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EmployeeID"].Value;
				_lastName					 = Convert.IsDBNull(command.Parameters["@LastName"].Value) ? null : (string)command.Parameters["@LastName"].Value;
				_firstName					 = Convert.IsDBNull(command.Parameters["@FirstName"].Value) ? null : (string)command.Parameters["@FirstName"].Value;
				_title					 = Convert.IsDBNull(command.Parameters["@Title"].Value) ? null : (string)command.Parameters["@Title"].Value;
				_titleOfCourtesy					 = Convert.IsDBNull(command.Parameters["@TitleOfCourtesy"].Value) ? null : (string)command.Parameters["@TitleOfCourtesy"].Value;
				_birthDate					 = Convert.IsDBNull(command.Parameters["@BirthDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@BirthDate"].Value;
				_hireDate					 = Convert.IsDBNull(command.Parameters["@HireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@HireDate"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_city					 = Convert.IsDBNull(command.Parameters["@City"].Value) ? null : (string)command.Parameters["@City"].Value;
				_region					 = Convert.IsDBNull(command.Parameters["@Region"].Value) ? null : (string)command.Parameters["@Region"].Value;
				_postalCode					 = Convert.IsDBNull(command.Parameters["@PostalCode"].Value) ? null : (string)command.Parameters["@PostalCode"].Value;
				_country					 = Convert.IsDBNull(command.Parameters["@Country"].Value) ? null : (string)command.Parameters["@Country"].Value;
				_homePhone					 = Convert.IsDBNull(command.Parameters["@HomePhone"].Value) ? null : (string)command.Parameters["@HomePhone"].Value;
				_extension					 = Convert.IsDBNull(command.Parameters["@Extension"].Value) ? null : (string)command.Parameters["@Extension"].Value;
				_reportsTo					 = Convert.IsDBNull(command.Parameters["@ReportsTo"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReportsTo"].Value;
				_photoPath					 = Convert.IsDBNull(command.Parameters["@PhotoPath"].Value) ? null : (string)command.Parameters["@PhotoPath"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows
		///This method returns all data rows in the table Employees
		///</Summary>
		///<returns>
		///IList-IDAOEmployees.
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static IList<IDAOEmployees> SelectAll()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_SelectAll;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Employees");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployees> objList = new List<IDAOEmployees>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployees retObj = new DAOEmployees();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._lastName					 = Convert.IsDBNull(row["LastName"]) ? null : (string)row["LastName"];
						retObj._firstName					 = Convert.IsDBNull(row["FirstName"]) ? null : (string)row["FirstName"];
						retObj._title					 = Convert.IsDBNull(row["Title"]) ? null : (string)row["Title"];
						retObj._titleOfCourtesy					 = Convert.IsDBNull(row["TitleOfCourtesy"]) ? null : (string)row["TitleOfCourtesy"];
						retObj._birthDate					 = Convert.IsDBNull(row["BirthDate"]) ? (DateTime?)null : (DateTime?)row["BirthDate"];
						retObj._hireDate					 = Convert.IsDBNull(row["HireDate"]) ? (DateTime?)null : (DateTime?)row["HireDate"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._city					 = Convert.IsDBNull(row["City"]) ? null : (string)row["City"];
						retObj._region					 = Convert.IsDBNull(row["Region"]) ? null : (string)row["Region"];
						retObj._postalCode					 = Convert.IsDBNull(row["PostalCode"]) ? null : (string)row["PostalCode"];
						retObj._country					 = Convert.IsDBNull(row["Country"]) ? null : (string)row["Country"];
						retObj._homePhone					 = Convert.IsDBNull(row["HomePhone"]) ? null : (string)row["HomePhone"];
						retObj._extension					 = Convert.IsDBNull(row["Extension"]) ? null : (string)row["Extension"];
						retObj._photo					 = Convert.IsDBNull(row["Photo"]) ? null : (byte[])row["Photo"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._reportsTo					 = Convert.IsDBNull(row["ReportsTo"]) ? (Int32?)null : (Int32?)row["ReportsTo"];
						retObj._photoPath					 = Convert.IsDBNull(row["PhotoPath"]) ? null : (string)row["PhotoPath"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///
		///</parameters>
		public static Int32 SelectAllCount()
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_SelectAllCount;
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select specific fields of all rows using criteriaquery api
		///This method returns specific fields of all data rows in the table using criteriaquery apiEmployees
		///</Summary>
		///<returns>
		///IDictionary-string, IList-object..
		///</returns>
		///<parameters>
		///IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IDictionary<string, IList<object>> SelectAllByCriteriaProjection(IList<IDataProjection> listProjection, IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprEmployees_SelectAllByCriteriaProjection, listProjection, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Employees");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				IDictionary<string, IList<object>> dict = new Dictionary<string, IList<object>>();
				foreach (IDataProjection projection in listProjection)
				{
					IList<object> lst = new List<object>();
					dict.Add(projection.Member, lst);
					foreach (DataRow row in dt.Rows)
					{
						if (string.Compare(projection.Member, "EmployeeID", true) == 0) lst.Add(Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"]);
						if (string.Compare(projection.Member, "LastName", true) == 0) lst.Add(Convert.IsDBNull(row["LastName"]) ? null : (string)row["LastName"]);
						if (string.Compare(projection.Member, "FirstName", true) == 0) lst.Add(Convert.IsDBNull(row["FirstName"]) ? null : (string)row["FirstName"]);
						if (string.Compare(projection.Member, "Title", true) == 0) lst.Add(Convert.IsDBNull(row["Title"]) ? null : (string)row["Title"]);
						if (string.Compare(projection.Member, "TitleOfCourtesy", true) == 0) lst.Add(Convert.IsDBNull(row["TitleOfCourtesy"]) ? null : (string)row["TitleOfCourtesy"]);
						if (string.Compare(projection.Member, "BirthDate", true) == 0) lst.Add(Convert.IsDBNull(row["BirthDate"]) ? (DateTime?)null : (DateTime?)row["BirthDate"]);
						if (string.Compare(projection.Member, "HireDate", true) == 0) lst.Add(Convert.IsDBNull(row["HireDate"]) ? (DateTime?)null : (DateTime?)row["HireDate"]);
						if (string.Compare(projection.Member, "Address", true) == 0) lst.Add(Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"]);
						if (string.Compare(projection.Member, "City", true) == 0) lst.Add(Convert.IsDBNull(row["City"]) ? null : (string)row["City"]);
						if (string.Compare(projection.Member, "Region", true) == 0) lst.Add(Convert.IsDBNull(row["Region"]) ? null : (string)row["Region"]);
						if (string.Compare(projection.Member, "PostalCode", true) == 0) lst.Add(Convert.IsDBNull(row["PostalCode"]) ? null : (string)row["PostalCode"]);
						if (string.Compare(projection.Member, "Country", true) == 0) lst.Add(Convert.IsDBNull(row["Country"]) ? null : (string)row["Country"]);
						if (string.Compare(projection.Member, "HomePhone", true) == 0) lst.Add(Convert.IsDBNull(row["HomePhone"]) ? null : (string)row["HomePhone"]);
						if (string.Compare(projection.Member, "Extension", true) == 0) lst.Add(Convert.IsDBNull(row["Extension"]) ? null : (string)row["Extension"]);
						if (string.Compare(projection.Member, "Photo", true) == 0) lst.Add(Convert.IsDBNull(row["Photo"]) ? null : (byte[])row["Photo"]);
						if (string.Compare(projection.Member, "Notes", true) == 0) lst.Add(Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"]);
						if (string.Compare(projection.Member, "ReportsTo", true) == 0) lst.Add(Convert.IsDBNull(row["ReportsTo"]) ? (Int32?)null : (Int32?)row["ReportsTo"]);
						if (string.Compare(projection.Member, "PhotoPath", true) == 0) lst.Add(Convert.IsDBNull(row["PhotoPath"]) ? null : (string)row["PhotoPath"]);
					}
				}
				return dict;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select all rows by filter criteria
		///This method returns all data rows in the table using criteriaquery api Employees
		///</Summary>
		///<returns>
		///IList-IDAOEmployees.
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake
		///</parameters>
		public static IList<IDAOEmployees> SelectAllByCriteria(IList<IDataCriterion> listCriterion, IList<IDataOrderBy> listOrder, IDataSkip dataSkip, IDataTake dataTake)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprEmployees_SelectAllByCriteria, null, listCriterion, listOrder, dataSkip, dataTake);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			DataTable dt = new DataTable("Employees");
			SqlDataAdapter sqlAdapter = new SqlDataAdapter(command);
			try
			{

				staticConnection.Open();
				sqlAdapter.Fill(dt);
				Done(null);

				List<IDAOEmployees> objList = new List<IDAOEmployees>();
				if(dt.Rows.Count > 0)
				{
					foreach(DataRow row in dt.Rows)
					{
						DAOEmployees retObj = new DAOEmployees();
						retObj._employeeID					 = Convert.IsDBNull(row["EmployeeID"]) ? (Int32?)null : (Int32?)row["EmployeeID"];
						retObj._lastName					 = Convert.IsDBNull(row["LastName"]) ? null : (string)row["LastName"];
						retObj._firstName					 = Convert.IsDBNull(row["FirstName"]) ? null : (string)row["FirstName"];
						retObj._title					 = Convert.IsDBNull(row["Title"]) ? null : (string)row["Title"];
						retObj._titleOfCourtesy					 = Convert.IsDBNull(row["TitleOfCourtesy"]) ? null : (string)row["TitleOfCourtesy"];
						retObj._birthDate					 = Convert.IsDBNull(row["BirthDate"]) ? (DateTime?)null : (DateTime?)row["BirthDate"];
						retObj._hireDate					 = Convert.IsDBNull(row["HireDate"]) ? (DateTime?)null : (DateTime?)row["HireDate"];
						retObj._address					 = Convert.IsDBNull(row["Address"]) ? null : (string)row["Address"];
						retObj._city					 = Convert.IsDBNull(row["City"]) ? null : (string)row["City"];
						retObj._region					 = Convert.IsDBNull(row["Region"]) ? null : (string)row["Region"];
						retObj._postalCode					 = Convert.IsDBNull(row["PostalCode"]) ? null : (string)row["PostalCode"];
						retObj._country					 = Convert.IsDBNull(row["Country"]) ? null : (string)row["Country"];
						retObj._homePhone					 = Convert.IsDBNull(row["HomePhone"]) ? null : (string)row["HomePhone"];
						retObj._extension					 = Convert.IsDBNull(row["Extension"]) ? null : (string)row["Extension"];
						retObj._photo					 = Convert.IsDBNull(row["Photo"]) ? null : (byte[])row["Photo"];
						retObj._notes					 = Convert.IsDBNull(row["Notes"]) ? null : (string)row["Notes"];
						retObj._reportsTo					 = Convert.IsDBNull(row["ReportsTo"]) ? (Int32?)null : (Int32?)row["ReportsTo"];
						retObj._photoPath					 = Convert.IsDBNull(row["PhotoPath"]) ? null : (string)row["PhotoPath"];
						retObj._ctrVersion					 = Convert.IsDBNull(row["ctr_version"]) ? (Int32?)null : (Int32?)row["ctr_version"];
						objList.Add(retObj);
					}
				}
				return objList;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return null;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Select count of all rows using criteriaquery api
		///This method returns all data rows in the table using criteriaquery api Employees
		///</Summary>
		///<returns>
		///Int32
		///</returns>
		///<parameters>
		///IList<IDataCriterion> listCriterion
		///</parameters>
		public static Int32 SelectAllByCriteriaCount(IList<IDataCriterion> listCriterion)
		{
			Doing(null);
			SqlCommand	command = new SqlCommand();
			command.CommandText = GetSelectionCriteria(InlineProcs.ctprEmployees_SelectAllByCriteriaCount, null, listCriterion, null);
			command.CommandType = CommandType.Text;
			SqlConnection staticConnection = StaticSqlConnection;
			command.Connection = staticConnection;

			try
			{

				staticConnection.Open();
				Int32 retCount = (Int32)command.ExecuteScalar();
				Done(null);

				return retCount;
			}
			catch(Exception ex)
			{
				Failed(null, ex);
				Handle(null, ex);
				return -1;
			}
			finally
			{
				staticConnection.Close();
				command.Dispose();
			}
		}

		///<Summary>
		///Update one row by primary key(s)
		///This method allows the object to update itself in the table Employees based on its primary key(s)
		///</Summary>
		///<returns>
		///void
		///</returns>
		///<parameters>
		///
		///</parameters>
		public virtual void Update()
		{
			Doing(this);
			SqlCommand	command = new SqlCommand();
			command.CommandText = InlineProcs.ctprEmployees_UpdateOne;
			command.CommandType = CommandType.Text;
			command.Connection = _connectionProvider.Connection;
			command.Transaction = _connectionProvider.CurrentTransaction;

			try
			{
				command.Parameters.Add(CtSqlParameter.Get("@Photo", SqlDbType.Image, 16, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_photo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Notes", SqlDbType.NText, 8000, ParameterDirection.Input, true, 0, 0, "", DataRowVersion.Proposed, (object)_notes?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@EmployeeID", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_employeeID?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@LastName", SqlDbType.NVarChar, 20, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_lastName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@FirstName", SqlDbType.NVarChar, 10, ParameterDirection.InputOutput, false, 0, 0, "", DataRowVersion.Proposed, (object)_firstName?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Title", SqlDbType.NVarChar, 30, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_title?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@TitleOfCourtesy", SqlDbType.NVarChar, 25, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_titleOfCourtesy?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@BirthDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_birthDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HireDate", SqlDbType.DateTime, 8, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_hireDate?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Address", SqlDbType.NVarChar, 60, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_address?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@City", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_city?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Region", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_region?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PostalCode", SqlDbType.NVarChar, 10, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_postalCode?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Country", SqlDbType.NVarChar, 15, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_country?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@HomePhone", SqlDbType.NVarChar, 24, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_homePhone?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@Extension", SqlDbType.NVarChar, 4, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_extension?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ReportsTo", SqlDbType.Int, 4, ParameterDirection.InputOutput, true, 10, 0, "", DataRowVersion.Proposed, (object)_reportsTo?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@PhotoPath", SqlDbType.NVarChar, 255, ParameterDirection.InputOutput, true, 0, 0, "", DataRowVersion.Proposed, (object)_photoPath?? (object)DBNull.Value));
				command.Parameters.Add(CtSqlParameter.Get("@ctr_version", SqlDbType.Int, 4, ParameterDirection.InputOutput, false, 10, 0, "", DataRowVersion.Proposed, (object)_ctrVersion?? (object)DBNull.Value));

				command.ExecuteNonQuery();
				Done(this);

				_employeeID					 = Convert.IsDBNull(command.Parameters["@EmployeeID"].Value) ? (Int32?)null : (Int32?)command.Parameters["@EmployeeID"].Value;
				_lastName					 = Convert.IsDBNull(command.Parameters["@LastName"].Value) ? null : (string)command.Parameters["@LastName"].Value;
				_firstName					 = Convert.IsDBNull(command.Parameters["@FirstName"].Value) ? null : (string)command.Parameters["@FirstName"].Value;
				_title					 = Convert.IsDBNull(command.Parameters["@Title"].Value) ? null : (string)command.Parameters["@Title"].Value;
				_titleOfCourtesy					 = Convert.IsDBNull(command.Parameters["@TitleOfCourtesy"].Value) ? null : (string)command.Parameters["@TitleOfCourtesy"].Value;
				_birthDate					 = Convert.IsDBNull(command.Parameters["@BirthDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@BirthDate"].Value;
				_hireDate					 = Convert.IsDBNull(command.Parameters["@HireDate"].Value) ? (DateTime?)null : (DateTime?)command.Parameters["@HireDate"].Value;
				_address					 = Convert.IsDBNull(command.Parameters["@Address"].Value) ? null : (string)command.Parameters["@Address"].Value;
				_city					 = Convert.IsDBNull(command.Parameters["@City"].Value) ? null : (string)command.Parameters["@City"].Value;
				_region					 = Convert.IsDBNull(command.Parameters["@Region"].Value) ? null : (string)command.Parameters["@Region"].Value;
				_postalCode					 = Convert.IsDBNull(command.Parameters["@PostalCode"].Value) ? null : (string)command.Parameters["@PostalCode"].Value;
				_country					 = Convert.IsDBNull(command.Parameters["@Country"].Value) ? null : (string)command.Parameters["@Country"].Value;
				_homePhone					 = Convert.IsDBNull(command.Parameters["@HomePhone"].Value) ? null : (string)command.Parameters["@HomePhone"].Value;
				_extension					 = Convert.IsDBNull(command.Parameters["@Extension"].Value) ? null : (string)command.Parameters["@Extension"].Value;
				_reportsTo					 = Convert.IsDBNull(command.Parameters["@ReportsTo"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ReportsTo"].Value;
				_photoPath					 = Convert.IsDBNull(command.Parameters["@PhotoPath"].Value) ? null : (string)command.Parameters["@PhotoPath"].Value;
				_ctrVersion					 = Convert.IsDBNull(command.Parameters["@ctr_version"].Value) ? (Int32?)null : (Int32?)command.Parameters["@ctr_version"].Value;

			}
			catch(Exception ex)
			{
				Failed(this, ex);
				Handle(this, ex);
			}
			finally
			{
				command.Dispose();
			}
		}

		#endregion

		#region member properties

		public Int32? EmployeeID
		{
			get
			{
				return _employeeID;
			}
			set
			{
				_employeeID = value;
			}
		}

		public string LastName
		{
			get
			{
				return _lastName;
			}
			set
			{
				_lastName = value;
			}
		}

		public string FirstName
		{
			get
			{
				return _firstName;
			}
			set
			{
				_firstName = value;
			}
		}

		public string Title
		{
			get
			{
				return _title;
			}
			set
			{
				_title = value;
			}
		}

		public string TitleOfCourtesy
		{
			get
			{
				return _titleOfCourtesy;
			}
			set
			{
				_titleOfCourtesy = value;
			}
		}

		public DateTime? BirthDate
		{
			get
			{
				return _birthDate;
			}
			set
			{
				_birthDate = value;
			}
		}

		public DateTime? HireDate
		{
			get
			{
				return _hireDate;
			}
			set
			{
				_hireDate = value;
			}
		}

		public string Address
		{
			get
			{
				return _address;
			}
			set
			{
				_address = value;
			}
		}

		public string City
		{
			get
			{
				return _city;
			}
			set
			{
				_city = value;
			}
		}

		public string Region
		{
			get
			{
				return _region;
			}
			set
			{
				_region = value;
			}
		}

		public string PostalCode
		{
			get
			{
				return _postalCode;
			}
			set
			{
				_postalCode = value;
			}
		}

		public string Country
		{
			get
			{
				return _country;
			}
			set
			{
				_country = value;
			}
		}

		public string HomePhone
		{
			get
			{
				return _homePhone;
			}
			set
			{
				_homePhone = value;
			}
		}

		public string Extension
		{
			get
			{
				return _extension;
			}
			set
			{
				_extension = value;
			}
		}

		public byte[] Photo
		{
			get
			{
				return _photo;
			}
			set
			{
				_photo = value;
			}
		}

		public string Notes
		{
			get
			{
				return _notes;
			}
			set
			{
				_notes = value;
			}
		}

		public Int32? ReportsTo
		{
			get
			{
				return _reportsTo;
			}
			set
			{
				_reportsTo = value;
			}
		}

		public string PhotoPath
		{
			get
			{
				return _photoPath;
			}
			set
			{
				_photoPath = value;
			}
		}

		public Int32? CtrVersion
		{
			get
			{
				return _ctrVersion;
			}
			set
			{
				_ctrVersion = value;
			}
		}

		#endregion
	}
}

#region inline sql procs
namespace NorthwindTest2.Data
{
	public partial class InlineProcs
	{
		internal static string ctprEmployees_SelectOne = @"
			-- Select one row based on the primary key(s)
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[LastName]
			,[FirstName]
			,[Title]
			,[TitleOfCourtesy]
			,[BirthDate]
			,[HireDate]
			,[Address]
			,[City]
			,[Region]
			,[PostalCode]
			,[Country]
			,[HomePhone]
			,[Extension]
			,[Photo]
			,[Notes]
			,[ReportsTo]
			,[PhotoPath]
			,[ctr_version]
			FROM [dbo].[Employees]
			WHERE 
			[EmployeeID] = @EmployeeID
			";

		internal static string ctprEmployees_DeleteOne = @"
			-- Delete a row based on the primary key(s)
			-- delete all matching from the table
			DELETE [dbo].[Employees]
			WHERE 
			[EmployeeID] = @EmployeeID
			";

		internal static string ctprEmployees_SelectAllByReportsTo = @"
			-- Select all rows based on a foreign key
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[LastName]
			,[FirstName]
			,[Title]
			,[TitleOfCourtesy]
			,[BirthDate]
			,[HireDate]
			,[Address]
			,[City]
			,[Region]
			,[PostalCode]
			,[Country]
			,[HomePhone]
			,[Extension]
			,[Photo]
			,[Notes]
			,[ReportsTo]
			,[PhotoPath]
			,[ctr_version]
			FROM [dbo].[Employees]
			WHERE 
			[ReportsTo] = @ReportsTo OR ([ReportsTo] IS NULL AND @ReportsTo IS NULL)
			";

		internal static string ctprEmployees_SelectAllByReportsToCount = @"
			-- Get count of rows returnable by this query
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Employees]
			WHERE 
			[ReportsTo] = @ReportsTo OR ([ReportsTo] IS NULL AND @ReportsTo IS NULL)
			";

		internal static string ctprEmployees_DeleteAllByReportsTo = @"
			
			-- delete all matching from the table
			DELETE [dbo].[Employees]
			WHERE 
			[ReportsTo] = @ReportsTo OR ([ReportsTo] IS NULL AND @ReportsTo IS NULL)
			";

		internal static string ctprEmployees_InsertOne = @"
			-- Insert a new row
			-- inserts a new row into the table
			INSERT [dbo].[Employees]
			(
			[LastName]
			,[FirstName]
			,[Title]
			,[TitleOfCourtesy]
			,[BirthDate]
			,[HireDate]
			,[Address]
			,[City]
			,[Region]
			,[PostalCode]
			,[Country]
			,[HomePhone]
			,[Extension]
			,[Photo]
			,[Notes]
			,[ReportsTo]
			,[PhotoPath]
			)
			VALUES
			(
			@LastName
			,@FirstName
			,@Title
			,@TitleOfCourtesy
			,@BirthDate
			,@HireDate
			,@Address
			,@City
			,@Region
			,@PostalCode
			,@Country
			,@HomePhone
			,@Extension
			,@Photo
			,@Notes
			,@ReportsTo
			,@PhotoPath
			)
			SELECT 
			@EmployeeID = [EmployeeID]
			,@LastName = [LastName]
			,@FirstName = [FirstName]
			,@Title = [Title]
			,@TitleOfCourtesy = [TitleOfCourtesy]
			,@BirthDate = [BirthDate]
			,@HireDate = [HireDate]
			,@Address = [Address]
			,@City = [City]
			,@Region = [Region]
			,@PostalCode = [PostalCode]
			,@Country = [Country]
			,@HomePhone = [HomePhone]
			,@Extension = [Extension]
			,@ReportsTo = [ReportsTo]
			,@PhotoPath = [PhotoPath]
			,@ctr_version = [ctr_version]
			FROM [dbo].[Employees]
			WHERE 
			[EmployeeID] = SCOPE_IDENTITY()
			";

		internal static string ctprEmployees_SelectAll = @"
			-- Select All rows
			-- selects all rows from the table
			SELECT 
			[EmployeeID]
			,[LastName]
			,[FirstName]
			,[Title]
			,[TitleOfCourtesy]
			,[BirthDate]
			,[HireDate]
			,[Address]
			,[City]
			,[Region]
			,[PostalCode]
			,[Country]
			,[HomePhone]
			,[Extension]
			,[Photo]
			,[Notes]
			,[ReportsTo]
			,[PhotoPath]
			,[ctr_version]
			FROM [dbo].[Employees]
			";

		internal static string ctprEmployees_SelectAllCount = @"
			
			-- selects count of all rows from the table
			SELECT COUNT(*)
			FROM [dbo].[Employees]
			";

		internal static string ctprEmployees_SelectAllByCriteriaProjection = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			##STARTFIELDS##
			##ENDFIELDS##
			FROM [dbo].[Employees]
			##CRITERIA##
			";

		internal static string ctprEmployees_SelectAllByCriteria = @"
			
			-- selects all rows from the table by criteria
			SELECT 
			[EmployeeID]
			,[LastName]
			,[FirstName]
			,[Title]
			,[TitleOfCourtesy]
			,[BirthDate]
			,[HireDate]
			,[Address]
			,[City]
			,[Region]
			,[PostalCode]
			,[Country]
			,[HomePhone]
			,[Extension]
			,[Photo]
			,[Notes]
			,[ReportsTo]
			,[PhotoPath]
			,[ctr_version]
			FROM [dbo].[Employees]
			##CRITERIA##
			";

		internal static string ctprEmployees_SelectAllByCriteriaCount = @"
			
			-- selects count of all rows from the table according to criteria
			SELECT COUNT(*)
			FROM [dbo].[Employees]
			##CRITERIA##
			";

		internal static string ctprEmployees_UpdateOne = @"
			-- Update one row based on the primary key(s)
			-- updates a row in the table based on the primary key
			
			--data optimistic concurrency handling ----------------------------
			DECLARE @currVersion INT
			SELECT @currVersion = [ctr_version] FROM [dbo].[Employees]
			WHERE [EmployeeID] = @EmployeeID
			
			IF @currVersion > @ctr_version
			RAISERROR('data concurrency issue updating this record, possible stale data. %s', 16, 1, 
			'[dbo].[Employees] WHERE WHERE [EmployeeID] = @EmployeeID')
			
			IF @currVersion IS NULL
			RAISERROR('data concurrency issue updating this record, record not available (not found). %s', 16, 1, 
			'[dbo].[Employees] WHERE WHERE [EmployeeID] = @EmployeeID')
			
			SET @ctr_version = @currVersion  + 1 
			-------------------------------------------------------------------
			UPDATE [dbo].[Employees]
			SET
			[LastName] = @LastName
			,[FirstName] = @FirstName
			,[Title] = @Title
			,[TitleOfCourtesy] = @TitleOfCourtesy
			,[BirthDate] = @BirthDate
			,[HireDate] = @HireDate
			,[Address] = @Address
			,[City] = @City
			,[Region] = @Region
			,[PostalCode] = @PostalCode
			,[Country] = @Country
			,[HomePhone] = @HomePhone
			,[Extension] = @Extension
			,[Photo] = @Photo
			,[Notes] = @Notes
			,[ReportsTo] = @ReportsTo
			,[PhotoPath] = @PhotoPath
			,[ctr_version] = @ctr_version
			WHERE 
			[EmployeeID] = @EmployeeID
			SELECT 
			@EmployeeID = [EmployeeID]
			,@LastName = [LastName]
			,@FirstName = [FirstName]
			,@Title = [Title]
			,@TitleOfCourtesy = [TitleOfCourtesy]
			,@BirthDate = [BirthDate]
			,@HireDate = [HireDate]
			,@Address = [Address]
			,@City = [City]
			,@Region = [Region]
			,@PostalCode = [PostalCode]
			,@Country = [Country]
			,@HomePhone = [HomePhone]
			,@Extension = [Extension]
			,@ReportsTo = [ReportsTo]
			,@PhotoPath = [PhotoPath]
			,@ctr_version = [ctr_version]
			FROM [dbo].[Employees]
			WHERE 
			[EmployeeID] = @EmployeeID
			";

	}
}
#endregion
